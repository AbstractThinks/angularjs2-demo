webpackJsonp([0],{

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var platform_browser_dynamic_1 = __webpack_require__(1);
	var app_module_1 = __webpack_require__(23);
	platform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(app_module_1.AppModule);


/***/ },

/***/ 23:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(3);
	var platform_browser_1 = __webpack_require__(21);
	var forms_1 = __webpack_require__(24);
	var http_1 = __webpack_require__(28);
	var appRouter_module_1 = __webpack_require__(81);
	var app_component_1 = __webpack_require__(98);
	__webpack_require__(99);
	// if (environment.production) {
	core_1.enableProdMode();
	// }
	var AppModule = (function () {
	    function AppModule() {
	    }
	    return AppModule;
	}());
	AppModule = __decorate([
	    core_1.NgModule({
	        imports: [
	            forms_1.FormsModule,
	            platform_browser_1.BrowserModule,
	            http_1.HttpModule,
	            appRouter_module_1.AppRoutingModule,
	        ],
	        declarations: [
	            app_component_1.AppComponent,
	        ],
	        bootstrap: [app_component_1.AppComponent]
	    }),
	    __metadata("design:paramtypes", [])
	], AppModule);
	exports.AppModule = AppModule;


/***/ },

/***/ 24:
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license Angular v2.4.8
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(3), __webpack_require__(25), __webpack_require__(6), __webpack_require__(7), __webpack_require__(26)) :
	    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/operator/toPromise', 'rxjs/Subject', 'rxjs/Observable', 'rxjs/observable/fromPromise'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.forms = global.ng.forms || {}),global.ng.core,global.Rx.Observable.prototype,global.Rx,global.Rx,global.Rx.Observable));
	}(this, function (exports,_angular_core,rxjs_operator_toPromise,rxjs_Subject,rxjs_Observable,rxjs_observable_fromPromise) { 'use strict';
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * Base class for control directives.
	     *
	     * Only used internally in the forms module.
	     *
	     * \@stable
	     * @abstract
	     */
	    var AbstractControlDirective = (function () {
	        function AbstractControlDirective() {
	        }
	        Object.defineProperty(AbstractControlDirective.prototype, "control", {
	            /**
	             * @return {?}
	             */
	            get: function () { throw new Error('unimplemented'); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "value", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.value : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "valid", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.valid : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "invalid", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.invalid : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "pending", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.pending : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "errors", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.errors : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.pristine : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.dirty : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "touched", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.touched : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.untouched : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "disabled", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.disabled : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "enabled", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.enabled : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "statusChanges", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.statusChanges : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "valueChanges", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.valueChanges : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "path", {
	            /**
	             * @return {?}
	             */
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?=} value
	         * @return {?}
	         */
	        AbstractControlDirective.prototype.reset = function (value) {
	            if (value === void 0) { value = undefined; }
	            if (this.control)
	                this.control.reset(value);
	        };
	        /**
	         * @param {?} errorCode
	         * @param {?=} path
	         * @return {?}
	         */
	        AbstractControlDirective.prototype.hasError = function (errorCode, path) {
	            if (path === void 0) { path = null; }
	            return this.control ? this.control.hasError(errorCode, path) : false;
	        };
	        /**
	         * @param {?} errorCode
	         * @param {?=} path
	         * @return {?}
	         */
	        AbstractControlDirective.prototype.getError = function (errorCode, path) {
	            if (path === void 0) { path = null; }
	            return this.control ? this.control.getError(errorCode, path) : null;
	        };
	        return AbstractControlDirective;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * A directive that contains multiple {\@link NgControl}s.
	     *
	     * Only used by the forms module.
	     *
	     * \@stable
	     */
	    var ControlContainer = (function (_super) {
	        __extends$1(ControlContainer, _super);
	        function ControlContainer() {
	            _super.apply(this, arguments);
	        }
	        Object.defineProperty(ControlContainer.prototype, "formDirective", {
	            /**
	             * Get the form to which this container belongs.
	             * @return {?}
	             */
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ControlContainer.prototype, "path", {
	            /**
	             * Get the path to this container.
	             * @return {?}
	             */
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        return ControlContainer;
	    }(AbstractControlDirective));
	
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isPresent(obj) {
	        return obj != null;
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isBlank(obj) {
	        return obj == null;
	    }
	    /**
	     * @param {?} a
	     * @param {?} b
	     * @return {?}
	     */
	    function looseIdentical(a, b) {
	        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
	    }
	    /**
	     * @param {?} o
	     * @return {?}
	     */
	    function isJsObject(o) {
	        return o !== null && (typeof o === 'function' || typeof o === 'object');
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isPrimitive(obj) {
	        return !isJsObject(obj);
	    }
	
	    /**
	     * Wraps Javascript Objects
	     */
	    var StringMapWrapper = (function () {
	        function StringMapWrapper() {
	        }
	        /**
	         * @param {?} m1
	         * @param {?} m2
	         * @return {?}
	         */
	        StringMapWrapper.merge = function (m1, m2) {
	            var /** @type {?} */ m = {};
	            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
	                var k = _a[_i];
	                m[k] = m1[k];
	            }
	            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
	                var k = _c[_b];
	                m[k] = m2[k];
	            }
	            return m;
	        };
	        /**
	         * @param {?} m1
	         * @param {?} m2
	         * @return {?}
	         */
	        StringMapWrapper.equals = function (m1, m2) {
	            var /** @type {?} */ k1 = Object.keys(m1);
	            var /** @type {?} */ k2 = Object.keys(m2);
	            if (k1.length != k2.length) {
	                return false;
	            }
	            for (var /** @type {?} */ i = 0; i < k1.length; i++) {
	                var /** @type {?} */ key = k1[i];
	                if (m1[key] !== m2[key]) {
	                    return false;
	                }
	            }
	            return true;
	        };
	        return StringMapWrapper;
	    }());
	    var ListWrapper = (function () {
	        function ListWrapper() {
	        }
	        /**
	         * @param {?} arr
	         * @param {?} condition
	         * @return {?}
	         */
	        ListWrapper.findLast = function (arr, condition) {
	            for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {
	                if (condition(arr[i])) {
	                    return arr[i];
	                }
	            }
	            return null;
	        };
	        /**
	         * @param {?} list
	         * @param {?} items
	         * @return {?}
	         */
	        ListWrapper.removeAll = function (list, items) {
	            for (var /** @type {?} */ i = 0; i < items.length; ++i) {
	                var /** @type {?} */ index = list.indexOf(items[i]);
	                if (index > -1) {
	                    list.splice(index, 1);
	                }
	            }
	        };
	        /**
	         * @param {?} list
	         * @param {?} el
	         * @return {?}
	         */
	        ListWrapper.remove = function (list, el) {
	            var /** @type {?} */ index = list.indexOf(el);
	            if (index > -1) {
	                list.splice(index, 1);
	                return true;
	            }
	            return false;
	        };
	        /**
	         * @param {?} a
	         * @param {?} b
	         * @return {?}
	         */
	        ListWrapper.equals = function (a, b) {
	            if (a.length != b.length)
	                return false;
	            for (var /** @type {?} */ i = 0; i < a.length; ++i) {
	                if (a[i] !== b[i])
	                    return false;
	            }
	            return true;
	        };
	        /**
	         * @param {?} list
	         * @return {?}
	         */
	        ListWrapper.flatten = function (list) {
	            return list.reduce(function (flat, item) {
	                var /** @type {?} */ flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
	                return ((flat)).concat(flatItem);
	            }, []);
	        };
	        return ListWrapper;
	    }());
	
	    var /** @type {?} */ isPromise = _angular_core.__core_private__.isPromise;
	    var /** @type {?} */ isObservable = _angular_core.__core_private__.isObservable;
	
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    function isEmptyInputValue(value) {
	        // we don't check for string here so it also works with arrays
	        return value == null || value.length === 0;
	    }
	    /**
	     * Providers for validators to be used for {@link FormControl}s in a form.
	     *
	     * Provide this using `multi: true` to add validators.
	     *
	     * ### Example
	     *
	     * {@example core/forms/ts/ng_validators/ng_validators.ts region='ng_validators'}
	     * @stable
	     */
	    var /** @type {?} */ NG_VALIDATORS = new _angular_core.OpaqueToken('NgValidators');
	    /**
	     * Providers for asynchronous validators to be used for {@link FormControl}s
	     * in a form.
	     *
	     * Provide this using `multi: true` to add validators.
	     *
	     * See {@link NG_VALIDATORS} for more details.
	     *
	     * @stable
	     */
	    var /** @type {?} */ NG_ASYNC_VALIDATORS = new _angular_core.OpaqueToken('NgAsyncValidators');
	    /**
	     * Provides a set of validators used by form controls.
	     *
	     * A validator is a function that processes a {\@link FormControl} or collection of
	     * controls and returns a map of errors. A null map means that validation has passed.
	     *
	     * ### Example
	     *
	     * ```typescript
	     * var loginControl = new FormControl("", Validators.required)
	     * ```
	     *
	     * \@stable
	     */
	    var Validators = (function () {
	        function Validators() {
	        }
	        /**
	         * Validator that requires controls to have a non-empty value.
	         * @param {?} control
	         * @return {?}
	         */
	        Validators.required = function (control) {
	            return isEmptyInputValue(control.value) ? { 'required': true } : null;
	        };
	        /**
	         * Validator that requires control value to be true.
	         * @param {?} control
	         * @return {?}
	         */
	        Validators.requiredTrue = function (control) {
	            return control.value === true ? null : { 'required': true };
	        };
	        /**
	         * Validator that requires controls to have a value of a minimum length.
	         * @param {?} minLength
	         * @return {?}
	         */
	        Validators.minLength = function (minLength) {
	            return function (control) {
	                if (isEmptyInputValue(control.value)) {
	                    return null; // don't validate empty values to allow optional controls
	                }
	                var /** @type {?} */ length = control.value ? control.value.length : 0;
	                return length < minLength ?
	                    { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :
	                    null;
	            };
	        };
	        /**
	         * Validator that requires controls to have a value of a maximum length.
	         * @param {?} maxLength
	         * @return {?}
	         */
	        Validators.maxLength = function (maxLength) {
	            return function (control) {
	                var /** @type {?} */ length = control.value ? control.value.length : 0;
	                return length > maxLength ?
	                    { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :
	                    null;
	            };
	        };
	        /**
	         * Validator that requires a control to match a regex to its value.
	         * @param {?} pattern
	         * @return {?}
	         */
	        Validators.pattern = function (pattern) {
	            if (!pattern)
	                return Validators.nullValidator;
	            var /** @type {?} */ regex;
	            var /** @type {?} */ regexStr;
	            if (typeof pattern === 'string') {
	                regexStr = "^" + pattern + "$";
	                regex = new RegExp(regexStr);
	            }
	            else {
	                regexStr = pattern.toString();
	                regex = pattern;
	            }
	            return function (control) {
	                if (isEmptyInputValue(control.value)) {
	                    return null; // don't validate empty values to allow optional controls
	                }
	                var /** @type {?} */ value = control.value;
	                return regex.test(value) ? null :
	                    { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };
	            };
	        };
	        /**
	         * No-op validator.
	         * @param {?} c
	         * @return {?}
	         */
	        Validators.nullValidator = function (c) { return null; };
	        /**
	         * Compose multiple validators into a single function that returns the union
	         * of the individual error maps.
	         * @param {?} validators
	         * @return {?}
	         */
	        Validators.compose = function (validators) {
	            if (!validators)
	                return null;
	            var /** @type {?} */ presentValidators = validators.filter(isPresent);
	            if (presentValidators.length == 0)
	                return null;
	            return function (control) {
	                return _mergeErrors(_executeValidators(control, presentValidators));
	            };
	        };
	        /**
	         * @param {?} validators
	         * @return {?}
	         */
	        Validators.composeAsync = function (validators) {
	            if (!validators)
	                return null;
	            var /** @type {?} */ presentValidators = validators.filter(isPresent);
	            if (presentValidators.length == 0)
	                return null;
	            return function (control) {
	                var /** @type {?} */ promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);
	                return Promise.all(promises).then(_mergeErrors);
	            };
	        };
	        return Validators;
	    }());
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function _convertToPromise(obj) {
	        return isPromise(obj) ? obj : rxjs_operator_toPromise.toPromise.call(obj);
	    }
	    /**
	     * @param {?} control
	     * @param {?} validators
	     * @return {?}
	     */
	    function _executeValidators(control, validators) {
	        return validators.map(function (v) { return v(control); });
	    }
	    /**
	     * @param {?} control
	     * @param {?} validators
	     * @return {?}
	     */
	    function _executeAsyncValidators(control, validators) {
	        return validators.map(function (v) { return v(control); });
	    }
	    /**
	     * @param {?} arrayOfErrors
	     * @return {?}
	     */
	    function _mergeErrors(arrayOfErrors) {
	        var /** @type {?} */ res = arrayOfErrors.reduce(function (res, errors) {
	            return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;
	        }, {});
	        return Object.keys(res).length === 0 ? null : res;
	    }
	
	    /**
	     * Used to provide a {@link ControlValueAccessor} for form controls.
	     *
	     * See {@link DefaultValueAccessor} for how to implement one.
	     * @stable
	     */
	    var /** @type {?} */ NG_VALUE_ACCESSOR = new _angular_core.OpaqueToken('NgValueAccessor');
	
	    var /** @type {?} */ CHECKBOX_VALUE_ACCESSOR = {
	        provide: NG_VALUE_ACCESSOR,
	        useExisting: _angular_core.forwardRef(function () { return CheckboxControlValueAccessor; }),
	        multi: true,
	    };
	    /**
	     * The accessor for writing a value and listening to changes on a checkbox input element.
	     *
	     *  ### Example
	     *  ```
	     *  <input type="checkbox" name="rememberLogin" ngModel>
	     *  ```
	     *
	     *  \@stable
	     */
	    var CheckboxControlValueAccessor = (function () {
	        /**
	         * @param {?} _renderer
	         * @param {?} _elementRef
	         */
	        function CheckboxControlValueAccessor(_renderer, _elementRef) {
	            this._renderer = _renderer;
	            this._elementRef = _elementRef;
	            this.onChange = function (_) { };
	            this.onTouched = function () { };
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        CheckboxControlValueAccessor.prototype.writeValue = function (value) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	        /**
	         * @param {?} isDisabled
	         * @return {?}
	         */
	        CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	        };
	        CheckboxControlValueAccessor.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',
	                        host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },
	                        providers: [CHECKBOX_VALUE_ACCESSOR]
	                    },] },
	        ];
	        /** @nocollapse */
	        CheckboxControlValueAccessor.ctorParameters = function () { return [
	            { type: _angular_core.Renderer, },
	            { type: _angular_core.ElementRef, },
	        ]; };
	        return CheckboxControlValueAccessor;
	    }());
	
	    var /** @type {?} */ DEFAULT_VALUE_ACCESSOR = {
	        provide: NG_VALUE_ACCESSOR,
	        useExisting: _angular_core.forwardRef(function () { return DefaultValueAccessor; }),
	        multi: true
	    };
	    /**
	     * The default accessor for writing a value and listening to changes that is used by the
	     * {\@link NgModel}, {\@link FormControlDirective}, and {\@link FormControlName} directives.
	     *
	     *  ### Example
	     *  ```
	     *  <input type="text" name="searchQuery" ngModel>
	     *  ```
	     *
	     *  \@stable
	     */
	    var DefaultValueAccessor = (function () {
	        /**
	         * @param {?} _renderer
	         * @param {?} _elementRef
	         */
	        function DefaultValueAccessor(_renderer, _elementRef) {
	            this._renderer = _renderer;
	            this._elementRef = _elementRef;
	            this.onChange = function (_) { };
	            this.onTouched = function () { };
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        DefaultValueAccessor.prototype.writeValue = function (value) {
	            var /** @type {?} */ normalizedValue = value == null ? '' : value;
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	        /**
	         * @param {?} isDisabled
	         * @return {?}
	         */
	        DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	        };
	        DefaultValueAccessor.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',
	                        // TODO: vsavkin replace the above selector with the one below it once
	                        // https://github.com/angular/angular/issues/3011 is implemented
	                        // selector: '[ngControl],[ngModel],[ngFormControl]',
	                        host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },
	                        providers: [DEFAULT_VALUE_ACCESSOR]
	                    },] },
	        ];
	        /** @nocollapse */
	        DefaultValueAccessor.ctorParameters = function () { return [
	            { type: _angular_core.Renderer, },
	            { type: _angular_core.ElementRef, },
	        ]; };
	        return DefaultValueAccessor;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * @param {?} validator
	     * @return {?}
	     */
	    function normalizeValidator(validator) {
	        if (((validator)).validate) {
	            return function (c) { return ((validator)).validate(c); };
	        }
	        else {
	            return (validator);
	        }
	    }
	    /**
	     * @param {?} validator
	     * @return {?}
	     */
	    function normalizeAsyncValidator(validator) {
	        if (((validator)).validate) {
	            return function (c) { return ((validator)).validate(c); };
	        }
	        else {
	            return (validator);
	        }
	    }
	
	    var /** @type {?} */ NUMBER_VALUE_ACCESSOR = {
	        provide: NG_VALUE_ACCESSOR,
	        useExisting: _angular_core.forwardRef(function () { return NumberValueAccessor; }),
	        multi: true
	    };
	    /**
	     * The accessor for writing a number value and listening to changes that is used by the
	     * {\@link NgModel}, {\@link FormControlDirective}, and {\@link FormControlName} directives.
	     *
	     *  ### Example
	     *  ```
	     *  <input type="number" [(ngModel)]="age">
	     *  ```
	     */
	    var NumberValueAccessor = (function () {
	        /**
	         * @param {?} _renderer
	         * @param {?} _elementRef
	         */
	        function NumberValueAccessor(_renderer, _elementRef) {
	            this._renderer = _renderer;
	            this._elementRef = _elementRef;
	            this.onChange = function (_) { };
	            this.onTouched = function () { };
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        NumberValueAccessor.prototype.writeValue = function (value) {
	            // The value needs to be normalized for IE9, otherwise it is set to 'null' when null
	            var /** @type {?} */ normalizedValue = value == null ? '' : value;
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        NumberValueAccessor.prototype.registerOnChange = function (fn) {
	            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	        /**
	         * @param {?} isDisabled
	         * @return {?}
	         */
	        NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	        };
	        NumberValueAccessor.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',
	                        host: {
	                            '(change)': 'onChange($event.target.value)',
	                            '(input)': 'onChange($event.target.value)',
	                            '(blur)': 'onTouched()'
	                        },
	                        providers: [NUMBER_VALUE_ACCESSOR]
	                    },] },
	        ];
	        /** @nocollapse */
	        NumberValueAccessor.ctorParameters = function () { return [
	            { type: _angular_core.Renderer, },
	            { type: _angular_core.ElementRef, },
	        ]; };
	        return NumberValueAccessor;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$2 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @return {?}
	     */
	    function unimplemented() {
	        throw new Error('unimplemented');
	    }
	    /**
	     * A base class that all control directive extend.
	     * It binds a {\@link FormControl} object to a DOM element.
	     *
	     * Used internally by Angular forms.
	     *
	     * \@stable
	     * @abstract
	     */
	    var NgControl = (function (_super) {
	        __extends$2(NgControl, _super);
	        function NgControl() {
	            _super.apply(this, arguments);
	            /** @internal */
	            this._parent = null;
	            this.name = null;
	            this.valueAccessor = null;
	            /** @internal */
	            this._rawValidators = [];
	            /** @internal */
	            this._rawAsyncValidators = [];
	        }
	        Object.defineProperty(NgControl.prototype, "validator", {
	            /**
	             * @return {?}
	             */
	            get: function () { return (unimplemented()); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgControl.prototype, "asyncValidator", {
	            /**
	             * @return {?}
	             */
	            get: function () { return (unimplemented()); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @abstract
	         * @param {?} newValue
	         * @return {?}
	         */
	        NgControl.prototype.viewToModelUpdate = function (newValue) { };
	        return NgControl;
	    }(AbstractControlDirective));
	
	    var /** @type {?} */ RADIO_VALUE_ACCESSOR = {
	        provide: NG_VALUE_ACCESSOR,
	        useExisting: _angular_core.forwardRef(function () { return RadioControlValueAccessor; }),
	        multi: true
	    };
	    /**
	     * Internal class used by Angular to uncheck radio buttons with the matching name.
	     */
	    var RadioControlRegistry = (function () {
	        function RadioControlRegistry() {
	            this._accessors = [];
	        }
	        /**
	         * @param {?} control
	         * @param {?} accessor
	         * @return {?}
	         */
	        RadioControlRegistry.prototype.add = function (control, accessor) {
	            this._accessors.push([control, accessor]);
	        };
	        /**
	         * @param {?} accessor
	         * @return {?}
	         */
	        RadioControlRegistry.prototype.remove = function (accessor) {
	            for (var /** @type {?} */ i = this._accessors.length - 1; i >= 0; --i) {
	                if (this._accessors[i][1] === accessor) {
	                    this._accessors.splice(i, 1);
	                    return;
	                }
	            }
	        };
	        /**
	         * @param {?} accessor
	         * @return {?}
	         */
	        RadioControlRegistry.prototype.select = function (accessor) {
	            var _this = this;
	            this._accessors.forEach(function (c) {
	                if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {
	                    c[1].fireUncheck(accessor.value);
	                }
	            });
	        };
	        /**
	         * @param {?} controlPair
	         * @param {?} accessor
	         * @return {?}
	         */
	        RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {
	            if (!controlPair[0].control)
	                return false;
	            return controlPair[0]._parent === accessor._control._parent &&
	                controlPair[1].name === accessor.name;
	        };
	        RadioControlRegistry.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        RadioControlRegistry.ctorParameters = function () { return []; };
	        return RadioControlRegistry;
	    }());
	    /**
	     * \@whatItDoes Writes radio control values and listens to radio control changes.
	     *
	     * Used by {\@link NgModel}, {\@link FormControlDirective}, and {\@link FormControlName}
	     * to keep the view synced with the {\@link FormControl} model.
	     *
	     * \@howToUse
	     *
	     * If you have imported the {\@link FormsModule} or the {\@link ReactiveFormsModule}, this
	     * value accessor will be active on any radio control that has a form directive. You do
	     * **not** need to add a special selector to activate it.
	     *
	     * ### How to use radio buttons with form directives
	     *
	     * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons
	     * in the same group have the same `name` attribute.  Radio buttons with different `name`
	     * attributes do not affect each other.
	     *
	     * {\@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}
	     *
	     * When using radio buttons in a reactive form, radio buttons in the same group should have the
	     * same `formControlName`. You can also add a `name` attribute, but it's optional.
	     *
	     * {\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}
	     *
	     *  * **npm package**: `\@angular/forms`
	     *
	     *  \@stable
	     */
	    var RadioControlValueAccessor = (function () {
	        /**
	         * @param {?} _renderer
	         * @param {?} _elementRef
	         * @param {?} _registry
	         * @param {?} _injector
	         */
	        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
	            this._renderer = _renderer;
	            this._elementRef = _elementRef;
	            this._registry = _registry;
	            this._injector = _injector;
	            this.onChange = function () { };
	            this.onTouched = function () { };
	        }
	        /**
	         * @return {?}
	         */
	        RadioControlValueAccessor.prototype.ngOnInit = function () {
	            this._control = this._injector.get(NgControl);
	            this._checkName();
	            this._registry.add(this._control, this);
	        };
	        /**
	         * @return {?}
	         */
	        RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        RadioControlValueAccessor.prototype.writeValue = function (value) {
	            this._state = value === this.value;
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        RadioControlValueAccessor.prototype.registerOnChange = function (fn) {
	            var _this = this;
	            this._fn = fn;
	            this.onChange = function () {
	                fn(_this.value);
	                _this._registry.select(_this);
	            };
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        RadioControlValueAccessor.prototype.fireUncheck = function (value) { this.writeValue(value); };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	        /**
	         * @param {?} isDisabled
	         * @return {?}
	         */
	        RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	        };
	        /**
	         * @return {?}
	         */
	        RadioControlValueAccessor.prototype._checkName = function () {
	            if (this.name && this.formControlName && this.name !== this.formControlName) {
	                this._throwNameError();
	            }
	            if (!this.name && this.formControlName)
	                this.name = this.formControlName;
	        };
	        /**
	         * @return {?}
	         */
	        RadioControlValueAccessor.prototype._throwNameError = function () {
	            throw new Error("\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    ");
	        };
	        RadioControlValueAccessor.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',
	                        host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },
	                        providers: [RADIO_VALUE_ACCESSOR]
	                    },] },
	        ];
	        /** @nocollapse */
	        RadioControlValueAccessor.ctorParameters = function () { return [
	            { type: _angular_core.Renderer, },
	            { type: _angular_core.ElementRef, },
	            { type: RadioControlRegistry, },
	            { type: _angular_core.Injector, },
	        ]; };
	        RadioControlValueAccessor.propDecorators = {
	            'name': [{ type: _angular_core.Input },],
	            'formControlName': [{ type: _angular_core.Input },],
	            'value': [{ type: _angular_core.Input },],
	        };
	        return RadioControlValueAccessor;
	    }());
	
	    var /** @type {?} */ RANGE_VALUE_ACCESSOR = {
	        provide: NG_VALUE_ACCESSOR,
	        useExisting: _angular_core.forwardRef(function () { return RangeValueAccessor; }),
	        multi: true
	    };
	    /**
	     * The accessor for writing a range value and listening to changes that is used by the
	     * {\@link NgModel}, {\@link FormControlDirective}, and {\@link FormControlName} directives.
	     *
	     *  ### Example
	     *  ```
	     *  <input type="range" [(ngModel)]="age" >
	     *  ```
	     */
	    var RangeValueAccessor = (function () {
	        /**
	         * @param {?} _renderer
	         * @param {?} _elementRef
	         */
	        function RangeValueAccessor(_renderer, _elementRef) {
	            this._renderer = _renderer;
	            this._elementRef = _elementRef;
	            this.onChange = function (_) { };
	            this.onTouched = function () { };
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        RangeValueAccessor.prototype.writeValue = function (value) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', parseFloat(value));
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        RangeValueAccessor.prototype.registerOnChange = function (fn) {
	            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        RangeValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	        /**
	         * @param {?} isDisabled
	         * @return {?}
	         */
	        RangeValueAccessor.prototype.setDisabledState = function (isDisabled) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	        };
	        RangeValueAccessor.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',
	                        host: {
	                            '(change)': 'onChange($event.target.value)',
	                            '(input)': 'onChange($event.target.value)',
	                            '(blur)': 'onTouched()'
	                        },
	                        providers: [RANGE_VALUE_ACCESSOR]
	                    },] },
	        ];
	        /** @nocollapse */
	        RangeValueAccessor.ctorParameters = function () { return [
	            { type: _angular_core.Renderer, },
	            { type: _angular_core.ElementRef, },
	        ]; };
	        return RangeValueAccessor;
	    }());
	
	    var /** @type {?} */ SELECT_VALUE_ACCESSOR = {
	        provide: NG_VALUE_ACCESSOR,
	        useExisting: _angular_core.forwardRef(function () { return SelectControlValueAccessor; }),
	        multi: true
	    };
	    /**
	     * @param {?} id
	     * @param {?} value
	     * @return {?}
	     */
	    function _buildValueString(id, value) {
	        if (id == null)
	            return "" + value;
	        if (!isPrimitive(value))
	            value = 'Object';
	        return (id + ": " + value).slice(0, 50);
	    }
	    /**
	     * @param {?} valueString
	     * @return {?}
	     */
	    function _extractId(valueString) {
	        return valueString.split(':')[0];
	    }
	    /**
	     * \@whatItDoes Writes values and listens to changes on a select element.
	     *
	     * Used by {\@link NgModel}, {\@link FormControlDirective}, and {\@link FormControlName}
	     * to keep the view synced with the {\@link FormControl} model.
	     *
	     * \@howToUse
	     *
	     * If you have imported the {\@link FormsModule} or the {\@link ReactiveFormsModule}, this
	     * value accessor will be active on any select control that has a form directive. You do
	     * **not** need to add a special selector to activate it.
	     *
	     * ### How to use select controls with form directives
	     *
	     * To use a select in a template-driven form, simply add an `ngModel` and a `name`
	     * attribute to the main `<select>` tag.
	     *
	     * If your option values are simple strings, you can bind to the normal `value` property
	     * on the option.  If your option values happen to be objects (and you'd like to save the
	     * selection in your form as an object), use `ngValue` instead:
	     *
	     * {\@example forms/ts/selectControl/select_control_example.ts region='Component'}
	     *
	     * In reactive forms, you'll also want to add your form directive (`formControlName` or
	     * `formControl`) on the main `<select>` tag. Like in the former example, you have the
	     * choice of binding to the  `value` or `ngValue` property on the select's options.
	     *
	     * {\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}
	     *
	     * Note: We listen to the 'change' event because 'input' events aren't fired
	     * for selects in Firefox and IE:
	     * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350
	     * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/
	     *
	     * * **npm package**: `\@angular/forms`
	     *
	     * \@stable
	     */
	    var SelectControlValueAccessor = (function () {
	        /**
	         * @param {?} _renderer
	         * @param {?} _elementRef
	         */
	        function SelectControlValueAccessor(_renderer, _elementRef) {
	            this._renderer = _renderer;
	            this._elementRef = _elementRef;
	            /** @internal */
	            this._optionMap = new Map();
	            /** @internal */
	            this._idCounter = 0;
	            this.onChange = function (_) { };
	            this.onTouched = function () { };
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        SelectControlValueAccessor.prototype.writeValue = function (value) {
	            this.value = value;
	            var /** @type {?} */ id = this._getOptionId(value);
	            if (id == null) {
	                this._renderer.setElementProperty(this._elementRef.nativeElement, 'selectedIndex', -1);
	            }
	            var /** @type {?} */ valueString = _buildValueString(id, value);
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        SelectControlValueAccessor.prototype.registerOnChange = function (fn) {
	            var _this = this;
	            this.onChange = function (valueString) {
	                _this.value = valueString;
	                fn(_this._getOptionValue(valueString));
	            };
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	        /**
	         * @param {?} isDisabled
	         * @return {?}
	         */
	        SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        SelectControlValueAccessor.prototype._registerOption = function () { return (this._idCounter++).toString(); };
	        /**
	         * \@internal
	         * @param {?} value
	         * @return {?}
	         */
	        SelectControlValueAccessor.prototype._getOptionId = function (value) {
	            for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {
	                var id = _a[_i];
	                if (looseIdentical(this._optionMap.get(id), value))
	                    return id;
	            }
	            return null;
	        };
	        /**
	         * \@internal
	         * @param {?} valueString
	         * @return {?}
	         */
	        SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {
	            var /** @type {?} */ id = _extractId(valueString);
	            return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;
	        };
	        SelectControlValueAccessor.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',
	                        host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },
	                        providers: [SELECT_VALUE_ACCESSOR]
	                    },] },
	        ];
	        /** @nocollapse */
	        SelectControlValueAccessor.ctorParameters = function () { return [
	            { type: _angular_core.Renderer, },
	            { type: _angular_core.ElementRef, },
	        ]; };
	        return SelectControlValueAccessor;
	    }());
	    /**
	     * \@whatItDoes Marks `<option>` as dynamic, so Angular can be notified when options change.
	     *
	     * \@howToUse
	     *
	     * See docs for {\@link SelectControlValueAccessor} for usage examples.
	     *
	     * \@stable
	     */
	    var NgSelectOption = (function () {
	        /**
	         * @param {?} _element
	         * @param {?} _renderer
	         * @param {?} _select
	         */
	        function NgSelectOption(_element, _renderer, _select) {
	            this._element = _element;
	            this._renderer = _renderer;
	            this._select = _select;
	            if (this._select)
	                this.id = this._select._registerOption();
	        }
	        Object.defineProperty(NgSelectOption.prototype, "ngValue", {
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) {
	                if (this._select == null)
	                    return;
	                this._select._optionMap.set(this.id, value);
	                this._setElementValue(_buildValueString(this.id, value));
	                this._select.writeValue(this._select.value);
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgSelectOption.prototype, "value", {
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) {
	                this._setElementValue(value);
	                if (this._select)
	                    this._select.writeValue(this._select.value);
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * \@internal
	         * @param {?} value
	         * @return {?}
	         */
	        NgSelectOption.prototype._setElementValue = function (value) {
	            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);
	        };
	        /**
	         * @return {?}
	         */
	        NgSelectOption.prototype.ngOnDestroy = function () {
	            if (this._select) {
	                this._select._optionMap.delete(this.id);
	                this._select.writeValue(this._select.value);
	            }
	        };
	        NgSelectOption.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: 'option' },] },
	        ];
	        /** @nocollapse */
	        NgSelectOption.ctorParameters = function () { return [
	            { type: _angular_core.ElementRef, },
	            { type: _angular_core.Renderer, },
	            { type: SelectControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },
	        ]; };
	        NgSelectOption.propDecorators = {
	            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],
	            'value': [{ type: _angular_core.Input, args: ['value',] },],
	        };
	        return NgSelectOption;
	    }());
	
	    var /** @type {?} */ SELECT_MULTIPLE_VALUE_ACCESSOR = {
	        provide: NG_VALUE_ACCESSOR,
	        useExisting: _angular_core.forwardRef(function () { return SelectMultipleControlValueAccessor; }),
	        multi: true
	    };
	    /**
	     * @param {?} id
	     * @param {?} value
	     * @return {?}
	     */
	    function _buildValueString$1(id, value) {
	        if (id == null)
	            return "" + value;
	        if (typeof value === 'string')
	            value = "'" + value + "'";
	        if (!isPrimitive(value))
	            value = 'Object';
	        return (id + ": " + value).slice(0, 50);
	    }
	    /**
	     * @param {?} valueString
	     * @return {?}
	     */
	    function _extractId$1(valueString) {
	        return valueString.split(':')[0];
	    }
	    /**
	     * The accessor for writing a value and listening to changes on a select element.
	     *
	     * \@stable
	     */
	    var SelectMultipleControlValueAccessor = (function () {
	        /**
	         * @param {?} _renderer
	         * @param {?} _elementRef
	         */
	        function SelectMultipleControlValueAccessor(_renderer, _elementRef) {
	            this._renderer = _renderer;
	            this._elementRef = _elementRef;
	            /** @internal */
	            this._optionMap = new Map();
	            /** @internal */
	            this._idCounter = 0;
	            this.onChange = function (_) { };
	            this.onTouched = function () { };
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {
	            var _this = this;
	            this.value = value;
	            var /** @type {?} */ optionSelectedStateSetter;
	            if (Array.isArray(value)) {
	                // convert values to ids
	                var /** @type {?} */ ids_1 = value.map(function (v) { return _this._getOptionId(v); });
	                optionSelectedStateSetter = function (opt, o) { opt._setSelected(ids_1.indexOf(o.toString()) > -1); };
	            }
	            else {
	                optionSelectedStateSetter = function (opt, o) { opt._setSelected(false); };
	            }
	            this._optionMap.forEach(optionSelectedStateSetter);
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {
	            var _this = this;
	            this.onChange = function (_) {
	                var /** @type {?} */ selected = [];
	                if (_.hasOwnProperty('selectedOptions')) {
	                    var /** @type {?} */ options = _.selectedOptions;
	                    for (var /** @type {?} */ i = 0; i < options.length; i++) {
	                        var /** @type {?} */ opt = options.item(i);
	                        var /** @type {?} */ val = _this._getOptionValue(opt.value);
	                        selected.push(val);
	                    }
	                }
	                else {
	                    var /** @type {?} */ options = (_.options);
	                    for (var /** @type {?} */ i = 0; i < options.length; i++) {
	                        var /** @type {?} */ opt = options.item(i);
	                        if (opt.selected) {
	                            var /** @type {?} */ val = _this._getOptionValue(opt.value);
	                            selected.push(val);
	                        }
	                    }
	                }
	                _this.value = selected;
	                fn(selected);
	            };
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	        /**
	         * @param {?} isDisabled
	         * @return {?}
	         */
	        SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	        };
	        /**
	         * \@internal
	         * @param {?} value
	         * @return {?}
	         */
	        SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {
	            var /** @type {?} */ id = (this._idCounter++).toString();
	            this._optionMap.set(id, value);
	            return id;
	        };
	        /**
	         * \@internal
	         * @param {?} value
	         * @return {?}
	         */
	        SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {
	            for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {
	                var id = _a[_i];
	                if (looseIdentical(this._optionMap.get(id)._value, value))
	                    return id;
	            }
	            return null;
	        };
	        /**
	         * \@internal
	         * @param {?} valueString
	         * @return {?}
	         */
	        SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {
	            var /** @type {?} */ id = _extractId$1(valueString);
	            return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;
	        };
	        SelectMultipleControlValueAccessor.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',
	                        host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },
	                        providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]
	                    },] },
	        ];
	        /** @nocollapse */
	        SelectMultipleControlValueAccessor.ctorParameters = function () { return [
	            { type: _angular_core.Renderer, },
	            { type: _angular_core.ElementRef, },
	        ]; };
	        return SelectMultipleControlValueAccessor;
	    }());
	    /**
	     * Marks `<option>` as dynamic, so Angular can be notified when options change.
	     *
	     * ### Example
	     *
	     * ```
	     * <select multiple name="city" ngModel>
	     *   <option *ngFor="let c of cities" [value]="c"></option>
	     * </select>
	     * ```
	     */
	    var NgSelectMultipleOption = (function () {
	        /**
	         * @param {?} _element
	         * @param {?} _renderer
	         * @param {?} _select
	         */
	        function NgSelectMultipleOption(_element, _renderer, _select) {
	            this._element = _element;
	            this._renderer = _renderer;
	            this._select = _select;
	            if (this._select) {
	                this.id = this._select._registerOption(this);
	            }
	        }
	        Object.defineProperty(NgSelectMultipleOption.prototype, "ngValue", {
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) {
	                if (this._select == null)
	                    return;
	                this._value = value;
	                this._setElementValue(_buildValueString$1(this.id, value));
	                this._select.writeValue(this._select.value);
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgSelectMultipleOption.prototype, "value", {
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) {
	                if (this._select) {
	                    this._value = value;
	                    this._setElementValue(_buildValueString$1(this.id, value));
	                    this._select.writeValue(this._select.value);
	                }
	                else {
	                    this._setElementValue(value);
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * \@internal
	         * @param {?} value
	         * @return {?}
	         */
	        NgSelectMultipleOption.prototype._setElementValue = function (value) {
	            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);
	        };
	        /**
	         * \@internal
	         * @param {?} selected
	         * @return {?}
	         */
	        NgSelectMultipleOption.prototype._setSelected = function (selected) {
	            this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);
	        };
	        /**
	         * @return {?}
	         */
	        NgSelectMultipleOption.prototype.ngOnDestroy = function () {
	            if (this._select) {
	                this._select._optionMap.delete(this.id);
	                this._select.writeValue(this._select.value);
	            }
	        };
	        NgSelectMultipleOption.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: 'option' },] },
	        ];
	        /** @nocollapse */
	        NgSelectMultipleOption.ctorParameters = function () { return [
	            { type: _angular_core.ElementRef, },
	            { type: _angular_core.Renderer, },
	            { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },
	        ]; };
	        NgSelectMultipleOption.propDecorators = {
	            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],
	            'value': [{ type: _angular_core.Input, args: ['value',] },],
	        };
	        return NgSelectMultipleOption;
	    }());
	
	    /**
	     * @param {?} name
	     * @param {?} parent
	     * @return {?}
	     */
	    function controlPath(name, parent) {
	        return parent.path.concat([name]);
	    }
	    /**
	     * @param {?} control
	     * @param {?} dir
	     * @return {?}
	     */
	    function setUpControl(control, dir) {
	        if (!control)
	            _throwError(dir, 'Cannot find control with');
	        if (!dir.valueAccessor)
	            _throwError(dir, 'No value accessor for form control with');
	        control.validator = Validators.compose([control.validator, dir.validator]);
	        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
	        dir.valueAccessor.writeValue(control.value);
	        // view -> model
	        dir.valueAccessor.registerOnChange(function (newValue) {
	            dir.viewToModelUpdate(newValue);
	            control.markAsDirty();
	            control.setValue(newValue, { emitModelToViewChange: false });
	        });
	        // touched
	        dir.valueAccessor.registerOnTouched(function () { return control.markAsTouched(); });
	        control.registerOnChange(function (newValue, emitModelEvent) {
	            // control -> view
	            dir.valueAccessor.writeValue(newValue);
	            // control -> ngModel
	            if (emitModelEvent)
	                dir.viewToModelUpdate(newValue);
	        });
	        if (dir.valueAccessor.setDisabledState) {
	            control.registerOnDisabledChange(function (isDisabled) { dir.valueAccessor.setDisabledState(isDisabled); });
	        }
	        // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4
	        dir._rawValidators.forEach(function (validator) {
	            if (((validator)).registerOnValidatorChange)
	                ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });
	        });
	        dir._rawAsyncValidators.forEach(function (validator) {
	            if (((validator)).registerOnValidatorChange)
	                ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });
	        });
	    }
	    /**
	     * @param {?} control
	     * @param {?} dir
	     * @return {?}
	     */
	    function cleanUpControl(control, dir) {
	        dir.valueAccessor.registerOnChange(function () { return _noControlError(dir); });
	        dir.valueAccessor.registerOnTouched(function () { return _noControlError(dir); });
	        dir._rawValidators.forEach(function (validator) {
	            if (validator.registerOnValidatorChange) {
	                validator.registerOnValidatorChange(null);
	            }
	        });
	        dir._rawAsyncValidators.forEach(function (validator) {
	            if (validator.registerOnValidatorChange) {
	                validator.registerOnValidatorChange(null);
	            }
	        });
	        if (control)
	            control._clearChangeFns();
	    }
	    /**
	     * @param {?} control
	     * @param {?} dir
	     * @return {?}
	     */
	    function setUpFormContainer(control, dir) {
	        if (isBlank(control))
	            _throwError(dir, 'Cannot find control with');
	        control.validator = Validators.compose([control.validator, dir.validator]);
	        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
	    }
	    /**
	     * @param {?} dir
	     * @return {?}
	     */
	    function _noControlError(dir) {
	        return _throwError(dir, 'There is no FormControl instance attached to form control element with');
	    }
	    /**
	     * @param {?} dir
	     * @param {?} message
	     * @return {?}
	     */
	    function _throwError(dir, message) {
	        var /** @type {?} */ messageEnd;
	        if (dir.path.length > 1) {
	            messageEnd = "path: '" + dir.path.join(' -> ') + "'";
	        }
	        else if (dir.path[0]) {
	            messageEnd = "name: '" + dir.path + "'";
	        }
	        else {
	            messageEnd = 'unspecified name attribute';
	        }
	        throw new Error(message + " " + messageEnd);
	    }
	    /**
	     * @param {?} validators
	     * @return {?}
	     */
	    function composeValidators(validators) {
	        return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;
	    }
	    /**
	     * @param {?} validators
	     * @return {?}
	     */
	    function composeAsyncValidators(validators) {
	        return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :
	            null;
	    }
	    /**
	     * @param {?} changes
	     * @param {?} viewModel
	     * @return {?}
	     */
	    function isPropertyUpdated(changes, viewModel) {
	        if (!changes.hasOwnProperty('model'))
	            return false;
	        var /** @type {?} */ change = changes['model'];
	        if (change.isFirstChange())
	            return true;
	        return !looseIdentical(viewModel, change.currentValue);
	    }
	    var /** @type {?} */ BUILTIN_ACCESSORS = [
	        CheckboxControlValueAccessor,
	        RangeValueAccessor,
	        NumberValueAccessor,
	        SelectControlValueAccessor,
	        SelectMultipleControlValueAccessor,
	        RadioControlValueAccessor,
	    ];
	    /**
	     * @param {?} valueAccessor
	     * @return {?}
	     */
	    function isBuiltInAccessor(valueAccessor) {
	        return BUILTIN_ACCESSORS.some(function (a) { return valueAccessor.constructor === a; });
	    }
	    /**
	     * @param {?} dir
	     * @param {?} valueAccessors
	     * @return {?}
	     */
	    function selectValueAccessor(dir, valueAccessors) {
	        if (!valueAccessors)
	            return null;
	        var /** @type {?} */ defaultAccessor;
	        var /** @type {?} */ builtinAccessor;
	        var /** @type {?} */ customAccessor;
	        valueAccessors.forEach(function (v) {
	            if (v.constructor === DefaultValueAccessor) {
	                defaultAccessor = v;
	            }
	            else if (isBuiltInAccessor(v)) {
	                if (builtinAccessor)
	                    _throwError(dir, 'More than one built-in value accessor matches form control with');
	                builtinAccessor = v;
	            }
	            else {
	                if (customAccessor)
	                    _throwError(dir, 'More than one custom value accessor matches form control with');
	                customAccessor = v;
	            }
	        });
	        if (customAccessor)
	            return customAccessor;
	        if (builtinAccessor)
	            return builtinAccessor;
	        if (defaultAccessor)
	            return defaultAccessor;
	        _throwError(dir, 'No valid value accessor for form control with');
	        return null;
	    }
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * This is a base class for code shared between {\@link NgModelGroup} and {\@link FormGroupName}.
	     *
	     * \@stable
	     */
	    var AbstractFormGroupDirective = (function (_super) {
	        __extends(AbstractFormGroupDirective, _super);
	        function AbstractFormGroupDirective() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @return {?}
	         */
	        AbstractFormGroupDirective.prototype.ngOnInit = function () {
	            this._checkParentType();
	            this.formDirective.addFormGroup(this);
	        };
	        /**
	         * @return {?}
	         */
	        AbstractFormGroupDirective.prototype.ngOnDestroy = function () {
	            if (this.formDirective) {
	                this.formDirective.removeFormGroup(this);
	            }
	        };
	        Object.defineProperty(AbstractFormGroupDirective.prototype, "control", {
	            /**
	             * Get the {\@link FormGroup} backing this binding.
	             * @return {?}
	             */
	            get: function () { return this.formDirective.getFormGroup(this); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractFormGroupDirective.prototype, "path", {
	            /**
	             * Get the path to this control group.
	             * @return {?}
	             */
	            get: function () { return controlPath(this.name, this._parent); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractFormGroupDirective.prototype, "formDirective", {
	            /**
	             * Get the {\@link Form} to which this group belongs.
	             * @return {?}
	             */
	            get: function () { return this._parent ? this._parent.formDirective : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractFormGroupDirective.prototype, "validator", {
	            /**
	             * @return {?}
	             */
	            get: function () { return composeValidators(this._validators); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractFormGroupDirective.prototype, "asyncValidator", {
	            /**
	             * @return {?}
	             */
	            get: function () { return composeAsyncValidators(this._asyncValidators); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * \@internal
	         * @return {?}
	         */
	        AbstractFormGroupDirective.prototype._checkParentType = function () { };
	        return AbstractFormGroupDirective;
	    }(ControlContainer));
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$3 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var AbstractControlStatus = (function () {
	        /**
	         * @param {?} cd
	         */
	        function AbstractControlStatus(cd) {
	            this._cd = cd;
	        }
	        Object.defineProperty(AbstractControlStatus.prototype, "ngClassUntouched", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._cd.control ? this._cd.control.untouched : false; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlStatus.prototype, "ngClassTouched", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._cd.control ? this._cd.control.touched : false; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlStatus.prototype, "ngClassPristine", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._cd.control ? this._cd.control.pristine : false; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlStatus.prototype, "ngClassDirty", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._cd.control ? this._cd.control.dirty : false; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlStatus.prototype, "ngClassValid", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._cd.control ? this._cd.control.valid : false; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlStatus.prototype, "ngClassInvalid", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._cd.control ? this._cd.control.invalid : false; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlStatus.prototype, "ngClassPending", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._cd.control ? this._cd.control.pending : false; },
	            enumerable: true,
	            configurable: true
	        });
	        return AbstractControlStatus;
	    }());
	    var /** @type {?} */ ngControlStatusHost = {
	        '[class.ng-untouched]': 'ngClassUntouched',
	        '[class.ng-touched]': 'ngClassTouched',
	        '[class.ng-pristine]': 'ngClassPristine',
	        '[class.ng-dirty]': 'ngClassDirty',
	        '[class.ng-valid]': 'ngClassValid',
	        '[class.ng-invalid]': 'ngClassInvalid',
	        '[class.ng-pending]': 'ngClassPending',
	    };
	    /**
	     * Directive automatically applied to Angular form controls that sets CSS classes
	     * based on control status (valid/invalid/dirty/etc).
	     *
	     * \@stable
	     */
	    var NgControlStatus = (function (_super) {
	        __extends$3(NgControlStatus, _super);
	        /**
	         * @param {?} cd
	         */
	        function NgControlStatus(cd) {
	            _super.call(this, cd);
	        }
	        NgControlStatus.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },
	        ];
	        /** @nocollapse */
	        NgControlStatus.ctorParameters = function () { return [
	            { type: NgControl, decorators: [{ type: _angular_core.Self },] },
	        ]; };
	        return NgControlStatus;
	    }(AbstractControlStatus));
	    /**
	     * Directive automatically applied to Angular form groups that sets CSS classes
	     * based on control status (valid/invalid/dirty/etc).
	     *
	     * \@stable
	     */
	    var NgControlStatusGroup = (function (_super) {
	        __extends$3(NgControlStatusGroup, _super);
	        /**
	         * @param {?} cd
	         */
	        function NgControlStatusGroup(cd) {
	            _super.call(this, cd);
	        }
	        NgControlStatusGroup.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',
	                        host: ngControlStatusHost
	                    },] },
	        ];
	        /** @nocollapse */
	        NgControlStatusGroup.ctorParameters = function () { return [
	            { type: ControlContainer, decorators: [{ type: _angular_core.Self },] },
	        ]; };
	        return NgControlStatusGroup;
	    }(AbstractControlStatus));
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$5 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Use by directives and components to emit custom Events.
	     *
	     * ### Examples
	     *
	     * In the following example, `Zippy` alternatively emits `open` and `close` events when its
	     * title gets clicked:
	     *
	     * ```
	     * \@Component({
	     *   selector: 'zippy',
	     *   template: `
	     *   <div class="zippy">
	     *     <div (click)="toggle()">Toggle</div>
	     *     <div [hidden]="!visible">
	     *       <ng-content></ng-content>
	     *     </div>
	     *  </div>`})
	     * export class Zippy {
	     *   visible: boolean = true;
	     *   \@Output() open: EventEmitter<any> = new EventEmitter();
	     *   \@Output() close: EventEmitter<any> = new EventEmitter();
	     *
	     *   toggle() {
	     *     this.visible = !this.visible;
	     *     if (this.visible) {
	     *       this.open.emit(null);
	     *     } else {
	     *       this.close.emit(null);
	     *     }
	     *   }
	     * }
	     * ```
	     *
	     * The events payload can be accessed by the parameter `$event` on the components output event
	     * handler:
	     *
	     * ```
	     * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
	     * ```
	     *
	     * Uses Rx.Observable but provides an adapter to make it work as specified here:
	     * https://github.com/jhusain/observable-spec
	     *
	     * Once a reference implementation of the spec is available, switch to it.
	     * \@stable
	     */
	    var EventEmitter = (function (_super) {
	        __extends$5(EventEmitter, _super);
	        /**
	         * Creates an instance of [EventEmitter], which depending on [isAsync],
	         * delivers events synchronously or asynchronously.
	         * @param {?=} isAsync
	         */
	        function EventEmitter(isAsync) {
	            if (isAsync === void 0) { isAsync = false; }
	            _super.call(this);
	            this.__isAsync = isAsync;
	        }
	        /**
	         * @param {?=} value
	         * @return {?}
	         */
	        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };
	        /**
	         * @param {?=} generatorOrNext
	         * @param {?=} error
	         * @param {?=} complete
	         * @return {?}
	         */
	        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
	            var /** @type {?} */ schedulerFn;
	            var /** @type {?} */ errorFn = function (err) { return null; };
	            var /** @type {?} */ completeFn = function () { return null; };
	            if (generatorOrNext && typeof generatorOrNext === 'object') {
	                schedulerFn = this.__isAsync ? function (value) {
	                    setTimeout(function () { return generatorOrNext.next(value); });
	                } : function (value) { generatorOrNext.next(value); };
	                if (generatorOrNext.error) {
	                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :
	                        function (err) { generatorOrNext.error(err); };
	                }
	                if (generatorOrNext.complete) {
	                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :
	                        function () { generatorOrNext.complete(); };
	                }
	            }
	            else {
	                schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :
	                    function (value) { generatorOrNext(value); };
	                if (error) {
	                    errorFn =
	                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };
	                }
	                if (complete) {
	                    completeFn =
	                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };
	                }
	            }
	            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
	        };
	        return EventEmitter;
	    }(rxjs_Subject.Subject));
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$6 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.
	     */
	    var /** @type {?} */ VALID = 'VALID';
	    /**
	     * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.
	     */
	    var /** @type {?} */ INVALID = 'INVALID';
	    /**
	     * Indicates that a FormControl is pending, i.e. that async validation is occurring and
	     * errors are not yet available for the input value.
	     */
	    var /** @type {?} */ PENDING = 'PENDING';
	    /**
	     * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor
	     * calculations of validity or value.
	     */
	    var /** @type {?} */ DISABLED = 'DISABLED';
	    /**
	     * @param {?} control
	     * @param {?} path
	     * @param {?} delimiter
	     * @return {?}
	     */
	    function _find(control, path, delimiter) {
	        if (path == null)
	            return null;
	        if (!(path instanceof Array)) {
	            path = ((path)).split(delimiter);
	        }
	        if (path instanceof Array && (path.length === 0))
	            return null;
	        return ((path)).reduce(function (v, name) {
	            if (v instanceof FormGroup) {
	                return v.controls[name] || null;
	            }
	            if (v instanceof FormArray) {
	                return v.at(/** @type {?} */ (name)) || null;
	            }
	            return null;
	        }, control);
	    }
	    /**
	     * @param {?} r
	     * @return {?}
	     */
	    function toObservable(r) {
	        return isPromise(r) ? rxjs_observable_fromPromise.fromPromise(r) : r;
	    }
	    /**
	     * @param {?} validator
	     * @return {?}
	     */
	    function coerceToValidator(validator) {
	        return Array.isArray(validator) ? composeValidators(validator) : validator;
	    }
	    /**
	     * @param {?} asyncValidator
	     * @return {?}
	     */
	    function coerceToAsyncValidator(asyncValidator) {
	        return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;
	    }
	    /**
	     * \@whatItDoes This is the base class for {\@link FormControl}, {\@link FormGroup}, and
	     * {\@link FormArray}.
	     *
	     * It provides some of the shared behavior that all controls and groups of controls have, like
	     * running validators, calculating status, and resetting state. It also defines the properties
	     * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be
	     * instantiated directly.
	     *
	     * \@stable
	     * @abstract
	     */
	    var AbstractControl = (function () {
	        /**
	         * @param {?} validator
	         * @param {?} asyncValidator
	         */
	        function AbstractControl(validator, asyncValidator) {
	            this.validator = validator;
	            this.asyncValidator = asyncValidator;
	            /** @internal */
	            this._onCollectionChange = function () { };
	            this._pristine = true;
	            this._touched = false;
	            /** @internal */
	            this._onDisabledChange = [];
	        }
	        Object.defineProperty(AbstractControl.prototype, "value", {
	            /**
	             * The value of the control.
	             * @return {?}
	             */
	            get: function () { return this._value; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "parent", {
	            /**
	             * The parent control.
	             * @return {?}
	             */
	            get: function () { return this._parent; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "status", {
	            /**
	             * The validation status of the control. There are four possible
	             * validation statuses:
	             *
	             * * **VALID**:  control has passed all validation checks
	             * * **INVALID**: control has failed at least one validation check
	             * * **PENDING**: control is in the midst of conducting a validation check
	             * * **DISABLED**: control is exempt from validation checks
	             *
	             * These statuses are mutually exclusive, so a control cannot be
	             * both valid AND invalid or invalid AND disabled.
	             * @return {?}
	             */
	            get: function () { return this._status; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "valid", {
	            /**
	             * A control is `valid` when its `status === VALID`.
	             *
	             * In order to have this status, the control must have passed all its
	             * validation checks.
	             * @return {?}
	             */
	            get: function () { return this._status === VALID; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "invalid", {
	            /**
	             * A control is `invalid` when its `status === INVALID`.
	             *
	             * In order to have this status, the control must have failed
	             * at least one of its validation checks.
	             * @return {?}
	             */
	            get: function () { return this._status === INVALID; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "pending", {
	            /**
	             * A control is `pending` when its `status === PENDING`.
	             *
	             * In order to have this status, the control must be in the
	             * middle of conducting a validation check.
	             * @return {?}
	             */
	            get: function () { return this._status == PENDING; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "disabled", {
	            /**
	             * A control is `disabled` when its `status === DISABLED`.
	             *
	             * Disabled controls are exempt from validation checks and
	             * are not included in the aggregate value of their ancestor
	             * controls.
	             * @return {?}
	             */
	            get: function () { return this._status === DISABLED; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "enabled", {
	            /**
	             * A control is `enabled` as long as its `status !== DISABLED`.
	             *
	             * In other words, it has a status of `VALID`, `INVALID`, or
	             * `PENDING`.
	             * @return {?}
	             */
	            get: function () { return this._status !== DISABLED; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "errors", {
	            /**
	             * Returns any errors generated by failing validation. If there
	             * are no errors, it will return null.
	             * @return {?}
	             */
	            get: function () { return this._errors; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "pristine", {
	            /**
	             * A control is `pristine` if the user has not yet changed
	             * the value in the UI.
	             *
	             * Note that programmatic changes to a control's value will
	             * *not* mark it dirty.
	             * @return {?}
	             */
	            get: function () { return this._pristine; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "dirty", {
	            /**
	             * A control is `dirty` if the user has changed the value
	             * in the UI.
	             *
	             * Note that programmatic changes to a control's value will
	             * *not* mark it dirty.
	             * @return {?}
	             */
	            get: function () { return !this.pristine; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "touched", {
	            /**
	             * A control is marked `touched` once the user has triggered
	             * a `blur` event on it.
	             * @return {?}
	             */
	            get: function () { return this._touched; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "untouched", {
	            /**
	             * A control is `untouched` if the user has not yet triggered
	             * a `blur` event on it.
	             * @return {?}
	             */
	            get: function () { return !this._touched; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "valueChanges", {
	            /**
	             * Emits an event every time the value of the control changes, in
	             * the UI or programmatically.
	             * @return {?}
	             */
	            get: function () { return this._valueChanges; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "statusChanges", {
	            /**
	             * Emits an event every time the validation status of the control
	             * is re-calculated.
	             * @return {?}
	             */
	            get: function () { return this._statusChanges; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Sets the synchronous validators that are active on this control.  Calling
	         * this will overwrite any existing sync validators.
	         * @param {?} newValidator
	         * @return {?}
	         */
	        AbstractControl.prototype.setValidators = function (newValidator) {
	            this.validator = coerceToValidator(newValidator);
	        };
	        /**
	         * Sets the async validators that are active on this control. Calling this
	         * will overwrite any existing async validators.
	         * @param {?} newValidator
	         * @return {?}
	         */
	        AbstractControl.prototype.setAsyncValidators = function (newValidator) {
	            this.asyncValidator = coerceToAsyncValidator(newValidator);
	        };
	        /**
	         * Empties out the sync validator list.
	         * @return {?}
	         */
	        AbstractControl.prototype.clearValidators = function () { this.validator = null; };
	        /**
	         * Empties out the async validator list.
	         * @return {?}
	         */
	        AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null; };
	        /**
	         * Marks the control as `touched`.
	         *
	         * This will also mark all direct ancestors as `touched` to maintain
	         * the model.
	         * @param {?=} __0
	         * @return {?}
	         */
	        AbstractControl.prototype.markAsTouched = function (_a) {
	            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	            this._touched = true;
	            if (this._parent && !onlySelf) {
	                this._parent.markAsTouched({ onlySelf: onlySelf });
	            }
	        };
	        /**
	         * Marks the control as `untouched`.
	         *
	         * If the control has any children, it will also mark all children as `untouched`
	         * to maintain the model, and re-calculate the `touched` status of all parent
	         * controls.
	         * @param {?=} __0
	         * @return {?}
	         */
	        AbstractControl.prototype.markAsUntouched = function (_a) {
	            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	            this._touched = false;
	            this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });
	            if (this._parent && !onlySelf) {
	                this._parent._updateTouched({ onlySelf: onlySelf });
	            }
	        };
	        /**
	         * Marks the control as `dirty`.
	         *
	         * This will also mark all direct ancestors as `dirty` to maintain
	         * the model.
	         * @param {?=} __0
	         * @return {?}
	         */
	        AbstractControl.prototype.markAsDirty = function (_a) {
	            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	            this._pristine = false;
	            if (this._parent && !onlySelf) {
	                this._parent.markAsDirty({ onlySelf: onlySelf });
	            }
	        };
	        /**
	         * Marks the control as `pristine`.
	         *
	         * If the control has any children, it will also mark all children as `pristine`
	         * to maintain the model, and re-calculate the `pristine` status of all parent
	         * controls.
	         * @param {?=} __0
	         * @return {?}
	         */
	        AbstractControl.prototype.markAsPristine = function (_a) {
	            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	            this._pristine = true;
	            this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });
	            if (this._parent && !onlySelf) {
	                this._parent._updatePristine({ onlySelf: onlySelf });
	            }
	        };
	        /**
	         * Marks the control as `pending`.
	         * @param {?=} __0
	         * @return {?}
	         */
	        AbstractControl.prototype.markAsPending = function (_a) {
	            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	            this._status = PENDING;
	            if (this._parent && !onlySelf) {
	                this._parent.markAsPending({ onlySelf: onlySelf });
	            }
	        };
	        /**
	         * Disables the control. This means the control will be exempt from validation checks and
	         * excluded from the aggregate value of any parent. Its status is `DISABLED`.
	         *
	         * If the control has children, all children will be disabled to maintain the model.
	         * @param {?=} __0
	         * @return {?}
	         */
	        AbstractControl.prototype.disable = function (_a) {
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            this._status = DISABLED;
	            this._errors = null;
	            this._forEachChild(function (control) { control.disable({ onlySelf: true }); });
	            this._updateValue();
	            if (emitEvent !== false) {
	                this._valueChanges.emit(this._value);
	                this._statusChanges.emit(this._status);
	            }
	            this._updateAncestors(onlySelf);
	            this._onDisabledChange.forEach(function (changeFn) { return changeFn(true); });
	        };
	        /**
	         * Enables the control. This means the control will be included in validation checks and
	         * the aggregate value of its parent. Its status is re-calculated based on its value and
	         * its validators.
	         *
	         * If the control has children, all children will be enabled.
	         * @param {?=} __0
	         * @return {?}
	         */
	        AbstractControl.prototype.enable = function (_a) {
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            this._status = VALID;
	            this._forEachChild(function (control) { control.enable({ onlySelf: true }); });
	            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });
	            this._updateAncestors(onlySelf);
	            this._onDisabledChange.forEach(function (changeFn) { return changeFn(false); });
	        };
	        /**
	         * @param {?} onlySelf
	         * @return {?}
	         */
	        AbstractControl.prototype._updateAncestors = function (onlySelf) {
	            if (this._parent && !onlySelf) {
	                this._parent.updateValueAndValidity();
	                this._parent._updatePristine();
	                this._parent._updateTouched();
	            }
	        };
	        /**
	         * @param {?} parent
	         * @return {?}
	         */
	        AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };
	        /**
	         * Sets the value of the control. Abstract method (implemented in sub-classes).
	         * @abstract
	         * @param {?} value
	         * @param {?=} options
	         * @return {?}
	         */
	        AbstractControl.prototype.setValue = function (value, options) { };
	        /**
	         * Patches the value of the control. Abstract method (implemented in sub-classes).
	         * @abstract
	         * @param {?} value
	         * @param {?=} options
	         * @return {?}
	         */
	        AbstractControl.prototype.patchValue = function (value, options) { };
	        /**
	         * Resets the control. Abstract method (implemented in sub-classes).
	         * @abstract
	         * @param {?=} value
	         * @param {?=} options
	         * @return {?}
	         */
	        AbstractControl.prototype.reset = function (value, options) { };
	        /**
	         * Re-calculates the value and validation status of the control.
	         *
	         * By default, it will also update the value and validity of its ancestors.
	         * @param {?=} __0
	         * @return {?}
	         */
	        AbstractControl.prototype.updateValueAndValidity = function (_a) {
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            this._setInitialStatus();
	            this._updateValue();
	            if (this.enabled) {
	                this._errors = this._runValidator();
	                this._status = this._calculateStatus();
	                if (this._status === VALID || this._status === PENDING) {
	                    this._runAsyncValidator(emitEvent);
	                }
	            }
	            if (emitEvent !== false) {
	                this._valueChanges.emit(this._value);
	                this._statusChanges.emit(this._status);
	            }
	            if (this._parent && !onlySelf) {
	                this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	            }
	        };
	        /**
	         * \@internal
	         * @param {?=} __0
	         * @return {?}
	         */
	        AbstractControl.prototype._updateTreeValidity = function (_a) {
	            var emitEvent = (_a === void 0 ? { emitEvent: true } : _a).emitEvent;
	            this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity({ emitEvent: emitEvent }); });
	            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });
	        };
	        /**
	         * @return {?}
	         */
	        AbstractControl.prototype._setInitialStatus = function () { this._status = this._allControlsDisabled() ? DISABLED : VALID; };
	        /**
	         * @return {?}
	         */
	        AbstractControl.prototype._runValidator = function () {
	            return this.validator ? this.validator(this) : null;
	        };
	        /**
	         * @param {?} emitEvent
	         * @return {?}
	         */
	        AbstractControl.prototype._runAsyncValidator = function (emitEvent) {
	            var _this = this;
	            if (this.asyncValidator) {
	                this._status = PENDING;
	                this._cancelExistingSubscription();
	                var /** @type {?} */ obs = toObservable(this.asyncValidator(this));
	                if (!(isObservable(obs))) {
	                    throw new Error("expected the following validator to return Promise or Observable: " + this.asyncValidator + ". If you are using FormBuilder; did you forget to brace your validators in an array?");
	                }
	                this._asyncValidationSubscription =
	                    obs.subscribe({ next: function (res) { return _this.setErrors(res, { emitEvent: emitEvent }); } });
	            }
	        };
	        /**
	         * @return {?}
	         */
	        AbstractControl.prototype._cancelExistingSubscription = function () {
	            if (this._asyncValidationSubscription) {
	                this._asyncValidationSubscription.unsubscribe();
	            }
	        };
	        /**
	         * Sets errors on a form control.
	         *
	         * This is used when validations are run manually by the user, rather than automatically.
	         *
	         * Calling `setErrors` will also update the validity of the parent control.
	         *
	         * ### Example
	         *
	         * ```
	         * const login = new FormControl("someLogin");
	         * login.setErrors({
	         *   "notUnique": true
	         * });
	         *
	         * expect(login.valid).toEqual(false);
	         * expect(login.errors).toEqual({"notUnique": true});
	         *
	         * login.setValue("someOtherLogin");
	         *
	         * expect(login.valid).toEqual(true);
	         * ```
	         * @param {?} errors
	         * @param {?=} __1
	         * @return {?}
	         */
	        AbstractControl.prototype.setErrors = function (errors, _a) {
	            var emitEvent = (_a === void 0 ? {} : _a).emitEvent;
	            this._errors = errors;
	            this._updateControlsErrors(emitEvent !== false);
	        };
	        /**
	         * Retrieves a child control given the control's name or path.
	         *
	         * Paths can be passed in as an array or a string delimited by a dot.
	         *
	         * To get a control nested within a `person` sub-group:
	         *
	         * * `this.form.get('person.name');`
	         *
	         * -OR-
	         *
	         * * `this.form.get(['person', 'name']);`
	         * @param {?} path
	         * @return {?}
	         */
	        AbstractControl.prototype.get = function (path) { return _find(this, path, '.'); };
	        /**
	         * Returns true if the control with the given path has the error specified. Otherwise
	         * returns null or undefined.
	         *
	         * If no path is given, it checks for the error on the present control.
	         * @param {?} errorCode
	         * @param {?=} path
	         * @return {?}
	         */
	        AbstractControl.prototype.getError = function (errorCode, path) {
	            if (path === void 0) { path = null; }
	            var /** @type {?} */ control = path ? this.get(path) : this;
	            return control && control._errors ? control._errors[errorCode] : null;
	        };
	        /**
	         * Returns true if the control with the given path has the error specified. Otherwise
	         * returns false.
	         *
	         * If no path is given, it checks for the error on the present control.
	         * @param {?} errorCode
	         * @param {?=} path
	         * @return {?}
	         */
	        AbstractControl.prototype.hasError = function (errorCode, path) {
	            if (path === void 0) { path = null; }
	            return !!this.getError(errorCode, path);
	        };
	        Object.defineProperty(AbstractControl.prototype, "root", {
	            /**
	             * Retrieves the top-level ancestor of this control.
	             * @return {?}
	             */
	            get: function () {
	                var /** @type {?} */ x = this;
	                while (x._parent) {
	                    x = x._parent;
	                }
	                return x;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * \@internal
	         * @param {?} emitEvent
	         * @return {?}
	         */
	        AbstractControl.prototype._updateControlsErrors = function (emitEvent) {
	            this._status = this._calculateStatus();
	            if (emitEvent) {
	                this._statusChanges.emit(this._status);
	            }
	            if (this._parent) {
	                this._parent._updateControlsErrors(emitEvent);
	            }
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        AbstractControl.prototype._initObservables = function () {
	            this._valueChanges = new EventEmitter();
	            this._statusChanges = new EventEmitter();
	        };
	        /**
	         * @return {?}
	         */
	        AbstractControl.prototype._calculateStatus = function () {
	            if (this._allControlsDisabled())
	                return DISABLED;
	            if (this._errors)
	                return INVALID;
	            if (this._anyControlsHaveStatus(PENDING))
	                return PENDING;
	            if (this._anyControlsHaveStatus(INVALID))
	                return INVALID;
	            return VALID;
	        };
	        /**
	         * \@internal
	         * @abstract
	         * @return {?}
	         */
	        AbstractControl.prototype._updateValue = function () { };
	        /**
	         * \@internal
	         * @abstract
	         * @param {?} cb
	         * @return {?}
	         */
	        AbstractControl.prototype._forEachChild = function (cb) { };
	        /**
	         * \@internal
	         * @abstract
	         * @param {?} condition
	         * @return {?}
	         */
	        AbstractControl.prototype._anyControls = function (condition) { };
	        /**
	         * \@internal
	         * @abstract
	         * @return {?}
	         */
	        AbstractControl.prototype._allControlsDisabled = function () { };
	        /**
	         * \@internal
	         * @param {?} status
	         * @return {?}
	         */
	        AbstractControl.prototype._anyControlsHaveStatus = function (status) {
	            return this._anyControls(function (control) { return control.status === status; });
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        AbstractControl.prototype._anyControlsDirty = function () {
	            return this._anyControls(function (control) { return control.dirty; });
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        AbstractControl.prototype._anyControlsTouched = function () {
	            return this._anyControls(function (control) { return control.touched; });
	        };
	        /**
	         * \@internal
	         * @param {?=} __0
	         * @return {?}
	         */
	        AbstractControl.prototype._updatePristine = function (_a) {
	            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	            this._pristine = !this._anyControlsDirty();
	            if (this._parent && !onlySelf) {
	                this._parent._updatePristine({ onlySelf: onlySelf });
	            }
	        };
	        /**
	         * \@internal
	         * @param {?=} __0
	         * @return {?}
	         */
	        AbstractControl.prototype._updateTouched = function (_a) {
	            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	            this._touched = this._anyControlsTouched();
	            if (this._parent && !onlySelf) {
	                this._parent._updateTouched({ onlySelf: onlySelf });
	            }
	        };
	        /**
	         * \@internal
	         * @param {?} formState
	         * @return {?}
	         */
	        AbstractControl.prototype._isBoxedValue = function (formState) {
	            return typeof formState === 'object' && formState !== null &&
	                Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;
	        };
	        /**
	         * \@internal
	         * @param {?} fn
	         * @return {?}
	         */
	        AbstractControl.prototype._registerOnCollectionChange = function (fn) { this._onCollectionChange = fn; };
	        return AbstractControl;
	    }());
	    /**
	     * \@whatItDoes Tracks the value and validation status of an individual form control.
	     *
	     * It is one of the three fundamental building blocks of Angular forms, along with
	     * {\@link FormGroup} and {\@link FormArray}.
	     *
	     * \@howToUse
	     *
	     * When instantiating a {\@link FormControl}, you can pass in an initial value as the
	     * first argument. Example:
	     *
	     * ```ts
	     * const ctrl = new FormControl('some value');
	     * console.log(ctrl.value);     // 'some value'
	     * ```
	     *
	     * You can also initialize the control with a form state object on instantiation,
	     * which includes both the value and whether or not the control is disabled.
	     * You can't use the value key without the disabled key; both are required
	     * to use this way of initialization.
	     *
	     * ```ts
	     * const ctrl = new FormControl({value: 'n/a', disabled: true});
	     * console.log(ctrl.value);     // 'n/a'
	     * console.log(ctrl.status);   // 'DISABLED'
	     * ```
	     *
	     * To include a sync validator (or an array of sync validators) with the control,
	     * pass it in as the second argument. Async validators are also supported, but
	     * have to be passed in separately as the third arg.
	     *
	     * ```ts
	     * const ctrl = new FormControl('', Validators.required);
	     * console.log(ctrl.value);     // ''
	     * console.log(ctrl.status);   // 'INVALID'
	     * ```
	     *
	     * See its superclass, {\@link AbstractControl}, for more properties and methods.
	     *
	     * * **npm package**: `\@angular/forms`
	     *
	     * \@stable
	     */
	    var FormControl = (function (_super) {
	        __extends$6(FormControl, _super);
	        /**
	         * @param {?=} formState
	         * @param {?=} validator
	         * @param {?=} asyncValidator
	         */
	        function FormControl(formState, validator, asyncValidator) {
	            if (formState === void 0) { formState = null; }
	            if (validator === void 0) { validator = null; }
	            if (asyncValidator === void 0) { asyncValidator = null; }
	            _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));
	            /** @internal */
	            this._onChange = [];
	            this._applyFormState(formState);
	            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
	            this._initObservables();
	        }
	        /**
	         * Set the value of the form control to `value`.
	         *
	         * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`
	         * and not its parent component. This defaults to false.
	         *
	         * If `emitEvent` is `true`, this
	         * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults
	         * to true (as it falls through to `updateValueAndValidity`).
	         *
	         * If `emitModelToViewChange` is `true`, the view will be notified about the new value
	         * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not
	         * specified.
	         *
	         * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the
	         * model.  This is the default behavior if `emitViewToModelChange` is not specified.
	         * @param {?} value
	         * @param {?=} __1
	         * @return {?}
	         */
	        FormControl.prototype.setValue = function (value, _a) {
	            var _this = this;
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange;
	            this._value = value;
	            if (this._onChange.length && emitModelToViewChange !== false) {
	                this._onChange.forEach(function (changeFn) { return changeFn(_this._value, emitViewToModelChange !== false); });
	            }
	            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	        };
	        /**
	         * Patches the value of a control.
	         *
	         * This function is functionally the same as {\@link FormControl.setValue} at this level.
	         * It exists for symmetry with {\@link FormGroup.patchValue} on `FormGroups` and `FormArrays`,
	         * where it does behave differently.
	         * @param {?} value
	         * @param {?=} options
	         * @return {?}
	         */
	        FormControl.prototype.patchValue = function (value, options) {
	            if (options === void 0) { options = {}; }
	            this.setValue(value, options);
	        };
	        /**
	         * Resets the form control. This means by default:
	         *
	         * * it is marked as `pristine`
	         * * it is marked as `untouched`
	         * * value is set to null
	         *
	         * You can also reset to a specific form state by passing through a standalone
	         * value or a form state object that contains both a value and a disabled state
	         * (these are the only two properties that cannot be calculated).
	         *
	         * Ex:
	         *
	         * ```ts
	         * this.control.reset('Nancy');
	         *
	         * console.log(this.control.value);  // 'Nancy'
	         * ```
	         *
	         * OR
	         *
	         * ```
	         * this.control.reset({value: 'Nancy', disabled: true});
	         *
	         * console.log(this.control.value);  // 'Nancy'
	         * console.log(this.control.status);  // 'DISABLED'
	         * ```
	         * @param {?=} formState
	         * @param {?=} __1
	         * @return {?}
	         */
	        FormControl.prototype.reset = function (formState, _a) {
	            if (formState === void 0) { formState = null; }
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            this._applyFormState(formState);
	            this.markAsPristine({ onlySelf: onlySelf });
	            this.markAsUntouched({ onlySelf: onlySelf });
	            this.setValue(this._value, { onlySelf: onlySelf, emitEvent: emitEvent });
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        FormControl.prototype._updateValue = function () { };
	        /**
	         * \@internal
	         * @param {?} condition
	         * @return {?}
	         */
	        FormControl.prototype._anyControls = function (condition) { return false; };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        FormControl.prototype._allControlsDisabled = function () { return this.disabled; };
	        /**
	         * Register a listener for change events.
	         * @param {?} fn
	         * @return {?}
	         */
	        FormControl.prototype.registerOnChange = function (fn) { this._onChange.push(fn); };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        FormControl.prototype._clearChangeFns = function () {
	            this._onChange = [];
	            this._onDisabledChange = [];
	            this._onCollectionChange = function () { };
	        };
	        /**
	         * Register a listener for disabled events.
	         * @param {?} fn
	         * @return {?}
	         */
	        FormControl.prototype.registerOnDisabledChange = function (fn) {
	            this._onDisabledChange.push(fn);
	        };
	        /**
	         * \@internal
	         * @param {?} cb
	         * @return {?}
	         */
	        FormControl.prototype._forEachChild = function (cb) { };
	        /**
	         * @param {?} formState
	         * @return {?}
	         */
	        FormControl.prototype._applyFormState = function (formState) {
	            if (this._isBoxedValue(formState)) {
	                this._value = formState.value;
	                formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :
	                    this.enable({ onlySelf: true, emitEvent: false });
	            }
	            else {
	                this._value = formState;
	            }
	        };
	        return FormControl;
	    }(AbstractControl));
	    /**
	     * \@whatItDoes Tracks the value and validity state of a group of {\@link FormControl}
	     * instances.
	     *
	     * A `FormGroup` aggregates the values of each child {\@link FormControl} into one object,
	     * with each control name as the key.  It calculates its status by reducing the statuses
	     * of its children. For example, if one of the controls in a group is invalid, the entire
	     * group becomes invalid.
	     *
	     * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,
	     * along with {\@link FormControl} and {\@link FormArray}.
	     *
	     * \@howToUse
	     *
	     * When instantiating a {\@link FormGroup}, pass in a collection of child controls as the first
	     * argument. The key for each child will be the name under which it is registered.
	     *
	     * ### Example
	     *
	     * ```
	     * const form = new FormGroup({
	     *   first: new FormControl('Nancy', Validators.minLength(2)),
	     *   last: new FormControl('Drew'),
	     * });
	     *
	     * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}
	     * console.log(form.status);  // 'VALID'
	     * ```
	     *
	     * You can also include group-level validators as the second arg, or group-level async
	     * validators as the third arg. These come in handy when you want to perform validation
	     * that considers the value of more than one child control.
	     *
	     * ### Example
	     *
	     * ```
	     * const form = new FormGroup({
	     *   password: new FormControl('', Validators.minLength(2)),
	     *   passwordConfirm: new FormControl('', Validators.minLength(2)),
	     * }, passwordMatchValidator);
	     *
	     *
	     * function passwordMatchValidator(g: FormGroup) {
	     *    return g.get('password').value === g.get('passwordConfirm').value
	     *       ? null : {'mismatch': true};
	     * }
	     * ```
	     *
	     * * **npm package**: `\@angular/forms`
	     *
	     * \@stable
	     */
	    var FormGroup = (function (_super) {
	        __extends$6(FormGroup, _super);
	        /**
	         * @param {?} controls
	         * @param {?=} validator
	         * @param {?=} asyncValidator
	         */
	        function FormGroup(controls, validator, asyncValidator) {
	            if (validator === void 0) { validator = null; }
	            if (asyncValidator === void 0) { asyncValidator = null; }
	            _super.call(this, validator, asyncValidator);
	            this.controls = controls;
	            this._initObservables();
	            this._setUpControls();
	            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
	        }
	        /**
	         * Registers a control with the group's list of controls.
	         *
	         * This method does not update value or validity of the control, so for
	         * most cases you'll want to use {\@link FormGroup.addControl} instead.
	         * @param {?} name
	         * @param {?} control
	         * @return {?}
	         */
	        FormGroup.prototype.registerControl = function (name, control) {
	            if (this.controls[name])
	                return this.controls[name];
	            this.controls[name] = control;
	            control.setParent(this);
	            control._registerOnCollectionChange(this._onCollectionChange);
	            return control;
	        };
	        /**
	         * Add a control to this group.
	         * @param {?} name
	         * @param {?} control
	         * @return {?}
	         */
	        FormGroup.prototype.addControl = function (name, control) {
	            this.registerControl(name, control);
	            this.updateValueAndValidity();
	            this._onCollectionChange();
	        };
	        /**
	         * Remove a control from this group.
	         * @param {?} name
	         * @return {?}
	         */
	        FormGroup.prototype.removeControl = function (name) {
	            if (this.controls[name])
	                this.controls[name]._registerOnCollectionChange(function () { });
	            delete (this.controls[name]);
	            this.updateValueAndValidity();
	            this._onCollectionChange();
	        };
	        /**
	         * Replace an existing control.
	         * @param {?} name
	         * @param {?} control
	         * @return {?}
	         */
	        FormGroup.prototype.setControl = function (name, control) {
	            if (this.controls[name])
	                this.controls[name]._registerOnCollectionChange(function () { });
	            delete (this.controls[name]);
	            if (control)
	                this.registerControl(name, control);
	            this.updateValueAndValidity();
	            this._onCollectionChange();
	        };
	        /**
	         * Check whether there is an enabled control with the given name in the group.
	         *
	         * It will return false for disabled controls. If you'd like to check for
	         * existence in the group only, use {\@link AbstractControl.get} instead.
	         * @param {?} controlName
	         * @return {?}
	         */
	        FormGroup.prototype.contains = function (controlName) {
	            return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;
	        };
	        /**
	         *  Sets the value of the {\@link FormGroup}. It accepts an object that matches
	         *  the structure of the group, with control names as keys.
	         *
	         * This method performs strict checks, so it will throw an error if you try
	         * to set the value of a control that doesn't exist or if you exclude the
	         * value of a control.
	         *
	         *  ### Example
	         *
	         *  ```
	         *  const form = new FormGroup({
	         *     first: new FormControl(),
	         *     last: new FormControl()
	         *  });
	         *  console.log(form.value);   // {first: null, last: null}
	         *
	         *  form.setValue({first: 'Nancy', last: 'Drew'});
	         *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}
	         *
	         *  ```
	         * @param {?} value
	         * @param {?=} __1
	         * @return {?}
	         */
	        FormGroup.prototype.setValue = function (value, _a) {
	            var _this = this;
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            this._checkAllValuesPresent(value);
	            Object.keys(value).forEach(function (name) {
	                _this._throwIfControlMissing(name);
	                _this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: emitEvent });
	            });
	            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	        };
	        /**
	         *  Patches the value of the {\@link FormGroup}. It accepts an object with control
	         *  names as keys, and will do its best to match the values to the correct controls
	         *  in the group.
	         *
	         *  It accepts both super-sets and sub-sets of the group without throwing an error.
	         *
	         *  ### Example
	         *
	         *  ```
	         *  const form = new FormGroup({
	         *     first: new FormControl(),
	         *     last: new FormControl()
	         *  });
	         *  console.log(form.value);   // {first: null, last: null}
	         *
	         *  form.patchValue({first: 'Nancy'});
	         *  console.log(form.value);   // {first: 'Nancy', last: null}
	         *
	         *  ```
	         * @param {?} value
	         * @param {?=} __1
	         * @return {?}
	         */
	        FormGroup.prototype.patchValue = function (value, _a) {
	            var _this = this;
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            Object.keys(value).forEach(function (name) {
	                if (_this.controls[name]) {
	                    _this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: emitEvent });
	                }
	            });
	            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	        };
	        /**
	         * Resets the {\@link FormGroup}. This means by default:
	         *
	         * * The group and all descendants are marked `pristine`
	         * * The group and all descendants are marked `untouched`
	         * * The value of all descendants will be null or null maps
	         *
	         * You can also reset to a specific form state by passing in a map of states
	         * that matches the structure of your form, with control names as keys. The state
	         * can be a standalone value or a form state object with both a value and a disabled
	         * status.
	         *
	         * ### Example
	         *
	         * ```ts
	         * this.form.reset({first: 'name', last: 'last name'});
	         *
	         * console.log(this.form.value);  // {first: 'name', last: 'last name'}
	         * ```
	         *
	         * - OR -
	         *
	         * ```
	         * this.form.reset({
	         *   first: {value: 'name', disabled: true},
	         *   last: 'last'
	         * });
	         *
	         * console.log(this.form.value);  // {first: 'name', last: 'last name'}
	         * console.log(this.form.get('first').status);  // 'DISABLED'
	         * ```
	         * @param {?=} value
	         * @param {?=} __1
	         * @return {?}
	         */
	        FormGroup.prototype.reset = function (value, _a) {
	            if (value === void 0) { value = {}; }
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            this._forEachChild(function (control, name) {
	                control.reset(value[name], { onlySelf: true, emitEvent: emitEvent });
	            });
	            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	            this._updatePristine({ onlySelf: onlySelf });
	            this._updateTouched({ onlySelf: onlySelf });
	        };
	        /**
	         * The aggregate value of the {\@link FormGroup}, including any disabled controls.
	         *
	         * If you'd like to include all values regardless of disabled status, use this method.
	         * Otherwise, the `value` property is the best way to get the value of the group.
	         * @return {?}
	         */
	        FormGroup.prototype.getRawValue = function () {
	            return this._reduceChildren({}, function (acc, control, name) {
	                acc[name] = control instanceof FormControl ? control.value : ((control)).getRawValue();
	                return acc;
	            });
	        };
	        /**
	         * \@internal
	         * @param {?} name
	         * @return {?}
	         */
	        FormGroup.prototype._throwIfControlMissing = function (name) {
	            if (!Object.keys(this.controls).length) {
	                throw new Error("\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
	            }
	            if (!this.controls[name]) {
	                throw new Error("Cannot find form control with name: " + name + ".");
	            }
	        };
	        /**
	         * \@internal
	         * @param {?} cb
	         * @return {?}
	         */
	        FormGroup.prototype._forEachChild = function (cb) {
	            var _this = this;
	            Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k); });
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        FormGroup.prototype._setUpControls = function () {
	            var _this = this;
	            this._forEachChild(function (control) {
	                control.setParent(_this);
	                control._registerOnCollectionChange(_this._onCollectionChange);
	            });
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        FormGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };
	        /**
	         * \@internal
	         * @param {?} condition
	         * @return {?}
	         */
	        FormGroup.prototype._anyControls = function (condition) {
	            var _this = this;
	            var /** @type {?} */ res = false;
	            this._forEachChild(function (control, name) {
	                res = res || (_this.contains(name) && condition(control));
	            });
	            return res;
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        FormGroup.prototype._reduceValue = function () {
	            var _this = this;
	            return this._reduceChildren({}, function (acc, control, name) {
	                if (control.enabled || _this.disabled) {
	                    acc[name] = control.value;
	                }
	                return acc;
	            });
	        };
	        /**
	         * \@internal
	         * @param {?} initValue
	         * @param {?} fn
	         * @return {?}
	         */
	        FormGroup.prototype._reduceChildren = function (initValue, fn) {
	            var /** @type {?} */ res = initValue;
	            this._forEachChild(function (control, name) { res = fn(res, control, name); });
	            return res;
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        FormGroup.prototype._allControlsDisabled = function () {
	            for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {
	                var controlName = _a[_i];
	                if (this.controls[controlName].enabled) {
	                    return false;
	                }
	            }
	            return Object.keys(this.controls).length > 0 || this.disabled;
	        };
	        /**
	         * \@internal
	         * @param {?} value
	         * @return {?}
	         */
	        FormGroup.prototype._checkAllValuesPresent = function (value) {
	            this._forEachChild(function (control, name) {
	                if (value[name] === undefined) {
	                    throw new Error("Must supply a value for form control with name: '" + name + "'.");
	                }
	            });
	        };
	        return FormGroup;
	    }(AbstractControl));
	    /**
	     * \@whatItDoes Tracks the value and validity state of an array of {\@link FormControl},
	     * {\@link FormGroup} or {\@link FormArray} instances.
	     *
	     * A `FormArray` aggregates the values of each child {\@link FormControl} into an array.
	     * It calculates its status by reducing the statuses of its children. For example, if one of
	     * the controls in a `FormArray` is invalid, the entire array becomes invalid.
	     *
	     * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,
	     * along with {\@link FormControl} and {\@link FormGroup}.
	     *
	     * \@howToUse
	     *
	     * When instantiating a {\@link FormArray}, pass in an array of child controls as the first
	     * argument.
	     *
	     * ### Example
	     *
	     * ```
	     * const arr = new FormArray([
	     *   new FormControl('Nancy', Validators.minLength(2)),
	     *   new FormControl('Drew'),
	     * ]);
	     *
	     * console.log(arr.value);   // ['Nancy', 'Drew']
	     * console.log(arr.status);  // 'VALID'
	     * ```
	     *
	     * You can also include array-level validators as the second arg, or array-level async
	     * validators as the third arg. These come in handy when you want to perform validation
	     * that considers the value of more than one child control.
	     *
	     * ### Adding or removing controls
	     *
	     * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods
	     * in `FormArray` itself. These methods ensure the controls are properly tracked in the
	     * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate
	     * the `FormArray` directly, as that will result in strange and unexpected behavior such
	     * as broken change detection.
	     *
	     * * **npm package**: `\@angular/forms`
	     *
	     * \@stable
	     */
	    var FormArray = (function (_super) {
	        __extends$6(FormArray, _super);
	        /**
	         * @param {?} controls
	         * @param {?=} validator
	         * @param {?=} asyncValidator
	         */
	        function FormArray(controls, validator, asyncValidator) {
	            if (validator === void 0) { validator = null; }
	            if (asyncValidator === void 0) { asyncValidator = null; }
	            _super.call(this, validator, asyncValidator);
	            this.controls = controls;
	            this._initObservables();
	            this._setUpControls();
	            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
	        }
	        /**
	         * Get the {\@link AbstractControl} at the given `index` in the array.
	         * @param {?} index
	         * @return {?}
	         */
	        FormArray.prototype.at = function (index) { return this.controls[index]; };
	        /**
	         * Insert a new {\@link AbstractControl} at the end of the array.
	         * @param {?} control
	         * @return {?}
	         */
	        FormArray.prototype.push = function (control) {
	            this.controls.push(control);
	            this._registerControl(control);
	            this.updateValueAndValidity();
	            this._onCollectionChange();
	        };
	        /**
	         * Insert a new {\@link AbstractControl} at the given `index` in the array.
	         * @param {?} index
	         * @param {?} control
	         * @return {?}
	         */
	        FormArray.prototype.insert = function (index, control) {
	            this.controls.splice(index, 0, control);
	            this._registerControl(control);
	            this.updateValueAndValidity();
	            this._onCollectionChange();
	        };
	        /**
	         * Remove the control at the given `index` in the array.
	         * @param {?} index
	         * @return {?}
	         */
	        FormArray.prototype.removeAt = function (index) {
	            if (this.controls[index])
	                this.controls[index]._registerOnCollectionChange(function () { });
	            this.controls.splice(index, 1);
	            this.updateValueAndValidity();
	            this._onCollectionChange();
	        };
	        /**
	         * Replace an existing control.
	         * @param {?} index
	         * @param {?} control
	         * @return {?}
	         */
	        FormArray.prototype.setControl = function (index, control) {
	            if (this.controls[index])
	                this.controls[index]._registerOnCollectionChange(function () { });
	            this.controls.splice(index, 1);
	            if (control) {
	                this.controls.splice(index, 0, control);
	                this._registerControl(control);
	            }
	            this.updateValueAndValidity();
	            this._onCollectionChange();
	        };
	        Object.defineProperty(FormArray.prototype, "length", {
	            /**
	             * Length of the control array.
	             * @return {?}
	             */
	            get: function () { return this.controls.length; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         *  Sets the value of the {\@link FormArray}. It accepts an array that matches
	         *  the structure of the control.
	         *
	         * This method performs strict checks, so it will throw an error if you try
	         * to set the value of a control that doesn't exist or if you exclude the
	         * value of a control.
	         *
	         *  ### Example
	         *
	         *  ```
	         *  const arr = new FormArray([
	         *     new FormControl(),
	         *     new FormControl()
	         *  ]);
	         *  console.log(arr.value);   // [null, null]
	         *
	         *  arr.setValue(['Nancy', 'Drew']);
	         *  console.log(arr.value);   // ['Nancy', 'Drew']
	         *  ```
	         * @param {?} value
	         * @param {?=} __1
	         * @return {?}
	         */
	        FormArray.prototype.setValue = function (value, _a) {
	            var _this = this;
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            this._checkAllValuesPresent(value);
	            value.forEach(function (newValue, index) {
	                _this._throwIfControlMissing(index);
	                _this.at(index).setValue(newValue, { onlySelf: true, emitEvent: emitEvent });
	            });
	            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	        };
	        /**
	         *  Patches the value of the {\@link FormArray}. It accepts an array that matches the
	         *  structure of the control, and will do its best to match the values to the correct
	         *  controls in the group.
	         *
	         *  It accepts both super-sets and sub-sets of the array without throwing an error.
	         *
	         *  ### Example
	         *
	         *  ```
	         *  const arr = new FormArray([
	         *     new FormControl(),
	         *     new FormControl()
	         *  ]);
	         *  console.log(arr.value);   // [null, null]
	         *
	         *  arr.patchValue(['Nancy']);
	         *  console.log(arr.value);   // ['Nancy', null]
	         *  ```
	         * @param {?} value
	         * @param {?=} __1
	         * @return {?}
	         */
	        FormArray.prototype.patchValue = function (value, _a) {
	            var _this = this;
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            value.forEach(function (newValue, index) {
	                if (_this.at(index)) {
	                    _this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: emitEvent });
	                }
	            });
	            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	        };
	        /**
	         * Resets the {\@link FormArray}. This means by default:
	         *
	         * * The array and all descendants are marked `pristine`
	         * * The array and all descendants are marked `untouched`
	         * * The value of all descendants will be null or null maps
	         *
	         * You can also reset to a specific form state by passing in an array of states
	         * that matches the structure of the control. The state can be a standalone value
	         * or a form state object with both a value and a disabled status.
	         *
	         * ### Example
	         *
	         * ```ts
	         * this.arr.reset(['name', 'last name']);
	         *
	         * console.log(this.arr.value);  // ['name', 'last name']
	         * ```
	         *
	         * - OR -
	         *
	         * ```
	         * this.arr.reset([
	         *   {value: 'name', disabled: true},
	         *   'last'
	         * ]);
	         *
	         * console.log(this.arr.value);  // ['name', 'last name']
	         * console.log(this.arr.get(0).status);  // 'DISABLED'
	         * ```
	         * @param {?=} value
	         * @param {?=} __1
	         * @return {?}
	         */
	        FormArray.prototype.reset = function (value, _a) {
	            if (value === void 0) { value = []; }
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            this._forEachChild(function (control, index) {
	                control.reset(value[index], { onlySelf: true, emitEvent: emitEvent });
	            });
	            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	            this._updatePristine({ onlySelf: onlySelf });
	            this._updateTouched({ onlySelf: onlySelf });
	        };
	        /**
	         * The aggregate value of the array, including any disabled controls.
	         *
	         * If you'd like to include all values regardless of disabled status, use this method.
	         * Otherwise, the `value` property is the best way to get the value of the array.
	         * @return {?}
	         */
	        FormArray.prototype.getRawValue = function () {
	            return this.controls.map(function (control) {
	                return control instanceof FormControl ? control.value : ((control)).getRawValue();
	            });
	        };
	        /**
	         * \@internal
	         * @param {?} index
	         * @return {?}
	         */
	        FormArray.prototype._throwIfControlMissing = function (index) {
	            if (!this.controls.length) {
	                throw new Error("\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
	            }
	            if (!this.at(index)) {
	                throw new Error("Cannot find form control at index " + index);
	            }
	        };
	        /**
	         * \@internal
	         * @param {?} cb
	         * @return {?}
	         */
	        FormArray.prototype._forEachChild = function (cb) {
	            this.controls.forEach(function (control, index) { cb(control, index); });
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        FormArray.prototype._updateValue = function () {
	            var _this = this;
	            this._value = this.controls.filter(function (control) { return control.enabled || _this.disabled; })
	                .map(function (control) { return control.value; });
	        };
	        /**
	         * \@internal
	         * @param {?} condition
	         * @return {?}
	         */
	        FormArray.prototype._anyControls = function (condition) {
	            return this.controls.some(function (control) { return control.enabled && condition(control); });
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        FormArray.prototype._setUpControls = function () {
	            var _this = this;
	            this._forEachChild(function (control) { return _this._registerControl(control); });
	        };
	        /**
	         * \@internal
	         * @param {?} value
	         * @return {?}
	         */
	        FormArray.prototype._checkAllValuesPresent = function (value) {
	            this._forEachChild(function (control, i) {
	                if (value[i] === undefined) {
	                    throw new Error("Must supply a value for form control at index: " + i + ".");
	                }
	            });
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        FormArray.prototype._allControlsDisabled = function () {
	            for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {
	                var control = _a[_i];
	                if (control.enabled)
	                    return false;
	            }
	            return this.controls.length > 0 || this.disabled;
	        };
	        /**
	         * @param {?} control
	         * @return {?}
	         */
	        FormArray.prototype._registerControl = function (control) {
	            control.setParent(this);
	            control._registerOnCollectionChange(this._onCollectionChange);
	        };
	        return FormArray;
	    }(AbstractControl));
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$4 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ formDirectiveProvider = {
	        provide: ControlContainer,
	        useExisting: _angular_core.forwardRef(function () { return NgForm; })
	    };
	    var /** @type {?} */ resolvedPromise = Promise.resolve(null);
	    /**
	     * \@whatItDoes Creates a top-level {\@link FormGroup} instance and binds it to a form
	     * to track aggregate form value and validation status.
	     *
	     * \@howToUse
	     *
	     * As soon as you import the `FormsModule`, this directive becomes active by default on
	     * all `<form>` tags.  You don't need to add a special selector.
	     *
	     * You can export the directive into a local template variable using `ngForm` as the key
	     * (ex: `#myForm="ngForm"`). This is optional, but useful.  Many properties from the underlying
	     * {\@link FormGroup} instance are duplicated on the directive itself, so a reference to it
	     * will give you access to the aggregate value and validity status of the form, as well as
	     * user interaction properties like `dirty` and `touched`.
	     *
	     * To register child controls with the form, you'll want to use {\@link NgModel} with a
	     * `name` attribute.  You can also use {\@link NgModelGroup} if you'd like to create
	     * sub-groups within the form.
	     *
	     * You can listen to the directive's `ngSubmit` event to be notified when the user has
	     * triggered a form submission. The `ngSubmit` event will be emitted with the original form
	     * submission event.
	     *
	     * {\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
	     *
	     * * **npm package**: `\@angular/forms`
	     *
	     * * **NgModule**: `FormsModule`
	     *
	     *  \@stable
	     */
	    var NgForm = (function (_super) {
	        __extends$4(NgForm, _super);
	        /**
	         * @param {?} validators
	         * @param {?} asyncValidators
	         */
	        function NgForm(validators, asyncValidators) {
	            _super.call(this);
	            this._submitted = false;
	            this.ngSubmit = new EventEmitter();
	            this.form =
	                new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));
	        }
	        Object.defineProperty(NgForm.prototype, "submitted", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._submitted; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForm.prototype, "formDirective", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForm.prototype, "control", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.form; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForm.prototype, "path", {
	            /**
	             * @return {?}
	             */
	            get: function () { return []; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForm.prototype, "controls", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.form.controls; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        NgForm.prototype.addControl = function (dir) {
	            var _this = this;
	            resolvedPromise.then(function () {
	                var /** @type {?} */ container = _this._findContainer(dir.path);
	                dir._control = (container.registerControl(dir.name, dir.control));
	                setUpControl(dir.control, dir);
	                dir.control.updateValueAndValidity({ emitEvent: false });
	            });
	        };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        NgForm.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        NgForm.prototype.removeControl = function (dir) {
	            var _this = this;
	            resolvedPromise.then(function () {
	                var /** @type {?} */ container = _this._findContainer(dir.path);
	                if (container) {
	                    container.removeControl(dir.name);
	                }
	            });
	        };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        NgForm.prototype.addFormGroup = function (dir) {
	            var _this = this;
	            resolvedPromise.then(function () {
	                var /** @type {?} */ container = _this._findContainer(dir.path);
	                var /** @type {?} */ group = new FormGroup({});
	                setUpFormContainer(group, dir);
	                container.registerControl(dir.name, group);
	                group.updateValueAndValidity({ emitEvent: false });
	            });
	        };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        NgForm.prototype.removeFormGroup = function (dir) {
	            var _this = this;
	            resolvedPromise.then(function () {
	                var /** @type {?} */ container = _this._findContainer(dir.path);
	                if (container) {
	                    container.removeControl(dir.name);
	                }
	            });
	        };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        NgForm.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };
	        /**
	         * @param {?} dir
	         * @param {?} value
	         * @return {?}
	         */
	        NgForm.prototype.updateModel = function (dir, value) {
	            var _this = this;
	            resolvedPromise.then(function () {
	                var /** @type {?} */ ctrl = (_this.form.get(dir.path));
	                ctrl.setValue(value);
	            });
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        NgForm.prototype.setValue = function (value) { this.control.setValue(value); };
	        /**
	         * @param {?} $event
	         * @return {?}
	         */
	        NgForm.prototype.onSubmit = function ($event) {
	            this._submitted = true;
	            this.ngSubmit.emit($event);
	            return false;
	        };
	        /**
	         * @return {?}
	         */
	        NgForm.prototype.onReset = function () { this.resetForm(); };
	        /**
	         * @param {?=} value
	         * @return {?}
	         */
	        NgForm.prototype.resetForm = function (value) {
	            if (value === void 0) { value = undefined; }
	            this.form.reset(value);
	            this._submitted = false;
	        };
	        /**
	         * \@internal
	         * @param {?} path
	         * @return {?}
	         */
	        NgForm.prototype._findContainer = function (path) {
	            path.pop();
	            return path.length ? (this.form.get(path)) : this.form;
	        };
	        NgForm.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',
	                        providers: [formDirectiveProvider],
	                        host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },
	                        outputs: ['ngSubmit'],
	                        exportAs: 'ngForm'
	                    },] },
	        ];
	        /** @nocollapse */
	        NgForm.ctorParameters = function () { return [
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
	        ]; };
	        return NgForm;
	    }(ControlContainer));
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var /** @type {?} */ Examples = {
	        formControlName: "\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });",
	        formGroupName: "\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });",
	        formArrayName: "\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; let i=index\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });",
	        ngModelGroup: "\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>",
	        ngModelWithFormGroup: "\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  "
	    };
	
	    var TemplateDrivenErrors = (function () {
	        function TemplateDrivenErrors() {
	        }
	        /**
	         * @return {?}
	         */
	        TemplateDrivenErrors.modelParentException = function () {
	            throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      " + Examples.formControlName + "\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      " + Examples.ngModelWithFormGroup);
	        };
	        /**
	         * @return {?}
	         */
	        TemplateDrivenErrors.formGroupNameException = function () {
	            throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      " + Examples.formGroupName + "\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      " + Examples.ngModelGroup);
	        };
	        /**
	         * @return {?}
	         */
	        TemplateDrivenErrors.missingNameException = function () {
	            throw new Error("If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">");
	        };
	        /**
	         * @return {?}
	         */
	        TemplateDrivenErrors.modelGroupParentException = function () {
	            throw new Error("\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      " + Examples.formGroupName + "\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      " + Examples.ngModelGroup);
	        };
	        return TemplateDrivenErrors;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$8 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ modelGroupProvider = {
	        provide: ControlContainer,
	        useExisting: _angular_core.forwardRef(function () { return NgModelGroup; })
	    };
	    /**
	     * \@whatItDoes Creates and binds a {\@link FormGroup} instance to a DOM element.
	     *
	     * \@howToUse
	     *
	     * This directive can only be used as a child of {\@link NgForm} (or in other words,
	     * within `<form>` tags).
	     *
	     * Use this directive if you'd like to create a sub-group within a form. This can
	     * come in handy if you want to validate a sub-group of your form separately from
	     * the rest of your form, or if some values in your domain model make more sense to
	     * consume together in a nested object.
	     *
	     * Pass in the name you'd like this sub-group to have and it will become the key
	     * for the sub-group in the form's full value. You can also export the directive into
	     * a local template variable using `ngModelGroup` (ex: `#myGroup="ngModelGroup"`).
	     *
	     * {\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}
	     *
	     * * **npm package**: `\@angular/forms`
	     *
	     * * **NgModule**: `FormsModule`
	     *
	     * \@stable
	     */
	    var NgModelGroup = (function (_super) {
	        __extends$8(NgModelGroup, _super);
	        /**
	         * @param {?} parent
	         * @param {?} validators
	         * @param {?} asyncValidators
	         */
	        function NgModelGroup(parent, validators, asyncValidators) {
	            _super.call(this);
	            this._parent = parent;
	            this._validators = validators;
	            this._asyncValidators = asyncValidators;
	        }
	        /**
	         * \@internal
	         * @return {?}
	         */
	        NgModelGroup.prototype._checkParentType = function () {
	            if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
	                TemplateDrivenErrors.modelGroupParentException();
	            }
	        };
	        NgModelGroup.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },
	        ];
	        /** @nocollapse */
	        NgModelGroup.ctorParameters = function () { return [
	            { type: ControlContainer, decorators: [{ type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
	        ]; };
	        NgModelGroup.propDecorators = {
	            'name': [{ type: _angular_core.Input, args: ['ngModelGroup',] },],
	        };
	        return NgModelGroup;
	    }(AbstractFormGroupDirective));
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$7 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ formControlBinding = {
	        provide: NgControl,
	        useExisting: _angular_core.forwardRef(function () { return NgModel; })
	    };
	    /**
	     * `ngModel` forces an additional change detection run when its inputs change:
	     * E.g.:
	     * ```
	     * <div>{{myModel.valid}}</div>
	     * <input [(ngModel)]="myValue" #myModel="ngModel">
	     * ```
	     * I.e. `ngModel` can export itself on the element and then be used in the template.
	     * Normally, this would result in expressions before the `input` that use the exported directive
	     * to have and old value as they have been
	     * dirty checked before. As this is a very common case for `ngModel`, we added this second change
	     * detection run.
	     *
	     * Notes:
	     * - this is just one extra run no matter how many `ngModel` have been changed.
	     * - this is a general problem when using `exportAs` for directives!
	     */
	    var /** @type {?} */ resolvedPromise$1 = Promise.resolve(null);
	    /**
	     * \@whatItDoes Creates a {\@link FormControl} instance from a domain model and binds it
	     * to a form control element.
	     *
	     * The {\@link FormControl} instance will track the value, user interaction, and
	     * validation status of the control and keep the view synced with the model. If used
	     * within a parent form, the directive will also register itself with the form as a child
	     * control.
	     *
	     * \@howToUse
	     *
	     * This directive can be used by itself or as part of a larger form. All you need is the
	     * `ngModel` selector to activate it.
	     *
	     * It accepts a domain model as an optional {\@link \@Input}. If you have a one-way binding
	     * to `ngModel` with `[]` syntax, changing the value of the domain model in the component
	     * class will set the value in the view. If you have a two-way binding with `[()]` syntax
	     * (also known as 'banana-box syntax'), the value in the UI will always be synced back to
	     * the domain model in your class as well.
	     *
	     * If you wish to inspect the properties of the associated {\@link FormControl} (like
	     * validity state), you can also export the directive into a local template variable using
	     * `ngModel` as the key (ex: `#myVar="ngModel"`). You can then access the control using the
	     * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)
	     * will fall through to the control anyway, so you can access them directly. You can see a
	     * full list of properties directly available in {\@link AbstractControlDirective}.
	     *
	     * The following is an example of a simple standalone control using `ngModel`:
	     *
	     * {\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}
	     *
	     * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute
	     * so that the control can be registered with the parent form under that name.
	     *
	     * It's worth noting that in the context of a parent form, you often can skip one-way or
	     * two-way binding because the parent form will sync the value for you. You can access
	     * its properties by exporting it into a local template variable using `ngForm` (ex:
	     * `#f="ngForm"`). Then you can pass it where it needs to go on submit.
	     *
	     * If you do need to populate initial values into your form, using a one-way binding for
	     * `ngModel` tends to be sufficient as long as you use the exported form's value rather
	     * than the domain model's value on submit.
	     *
	     * Take a look at an example of using `ngModel` within a form:
	     *
	     * {\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
	     *
	     * To see `ngModel` examples with different form control types, see:
	     *
	     * * Radio buttons: {\@link RadioControlValueAccessor}
	     * * Selects: {\@link SelectControlValueAccessor}
	     *
	     * **npm package**: `\@angular/forms`
	     *
	     * **NgModule**: `FormsModule`
	     *
	     *  \@stable
	     */
	    var NgModel = (function (_super) {
	        __extends$7(NgModel, _super);
	        /**
	         * @param {?} parent
	         * @param {?} validators
	         * @param {?} asyncValidators
	         * @param {?} valueAccessors
	         */
	        function NgModel(parent, validators, asyncValidators, valueAccessors) {
	            _super.call(this);
	            /** @internal */
	            this._control = new FormControl();
	            /** @internal */
	            this._registered = false;
	            this.update = new EventEmitter();
	            this._parent = parent;
	            this._rawValidators = validators || [];
	            this._rawAsyncValidators = asyncValidators || [];
	            this.valueAccessor = selectValueAccessor(this, valueAccessors);
	        }
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        NgModel.prototype.ngOnChanges = function (changes) {
	            this._checkForErrors();
	            if (!this._registered)
	                this._setUpControl();
	            if ('isDisabled' in changes) {
	                this._updateDisabled(changes);
	            }
	            if (isPropertyUpdated(changes, this.viewModel)) {
	                this._updateValue(this.model);
	                this.viewModel = this.model;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this); };
	        Object.defineProperty(NgModel.prototype, "control", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._control; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgModel.prototype, "path", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return this._parent ? controlPath(this.name, this._parent) : [this.name];
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgModel.prototype, "formDirective", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._parent ? this._parent.formDirective : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgModel.prototype, "validator", {
	            /**
	             * @return {?}
	             */
	            get: function () { return composeValidators(this._rawValidators); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgModel.prototype, "asyncValidator", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return composeAsyncValidators(this._rawAsyncValidators);
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} newValue
	         * @return {?}
	         */
	        NgModel.prototype.viewToModelUpdate = function (newValue) {
	            this.viewModel = newValue;
	            this.update.emit(newValue);
	        };
	        /**
	         * @return {?}
	         */
	        NgModel.prototype._setUpControl = function () {
	            this._isStandalone() ? this._setUpStandalone() :
	                this.formDirective.addControl(this);
	            this._registered = true;
	        };
	        /**
	         * @return {?}
	         */
	        NgModel.prototype._isStandalone = function () {
	            return !this._parent || (this.options && this.options.standalone);
	        };
	        /**
	         * @return {?}
	         */
	        NgModel.prototype._setUpStandalone = function () {
	            setUpControl(this._control, this);
	            this._control.updateValueAndValidity({ emitEvent: false });
	        };
	        /**
	         * @return {?}
	         */
	        NgModel.prototype._checkForErrors = function () {
	            if (!this._isStandalone()) {
	                this._checkParentType();
	            }
	            this._checkName();
	        };
	        /**
	         * @return {?}
	         */
	        NgModel.prototype._checkParentType = function () {
	            if (!(this._parent instanceof NgModelGroup) &&
	                this._parent instanceof AbstractFormGroupDirective) {
	                TemplateDrivenErrors.formGroupNameException();
	            }
	            else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
	                TemplateDrivenErrors.modelParentException();
	            }
	        };
	        /**
	         * @return {?}
	         */
	        NgModel.prototype._checkName = function () {
	            if (this.options && this.options.name)
	                this.name = this.options.name;
	            if (!this._isStandalone() && !this.name) {
	                TemplateDrivenErrors.missingNameException();
	            }
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        NgModel.prototype._updateValue = function (value) {
	            var _this = this;
	            resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });
	        };
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        NgModel.prototype._updateDisabled = function (changes) {
	            var _this = this;
	            var /** @type {?} */ disabledValue = changes['isDisabled'].currentValue;
	            var /** @type {?} */ isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');
	            resolvedPromise$1.then(function () {
	                if (isDisabled && !_this.control.disabled) {
	                    _this.control.disable();
	                }
	                else if (!isDisabled && _this.control.disabled) {
	                    _this.control.enable();
	                }
	            });
	        };
	        NgModel.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: '[ngModel]:not([formControlName]):not([formControl])',
	                        providers: [formControlBinding],
	                        exportAs: 'ngModel'
	                    },] },
	        ];
	        /** @nocollapse */
	        NgModel.ctorParameters = function () { return [
	            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },
	        ]; };
	        NgModel.propDecorators = {
	            'name': [{ type: _angular_core.Input },],
	            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],
	            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],
	            'options': [{ type: _angular_core.Input, args: ['ngModelOptions',] },],
	            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],
	        };
	        return NgModel;
	    }(NgControl));
	
	    var ReactiveErrors = (function () {
	        function ReactiveErrors() {
	        }
	        /**
	         * @return {?}
	         */
	        ReactiveErrors.controlParentException = function () {
	            throw new Error("formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + Examples.formControlName);
	        };
	        /**
	         * @return {?}
	         */
	        ReactiveErrors.ngModelGroupException = function () {
	            throw new Error("formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        " + Examples.formGroupName + "\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        " + Examples.ngModelGroup);
	        };
	        /**
	         * @return {?}
	         */
	        ReactiveErrors.missingFormException = function () {
	            throw new Error("formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       " + Examples.formControlName);
	        };
	        /**
	         * @return {?}
	         */
	        ReactiveErrors.groupParentException = function () {
	            throw new Error("formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + Examples.formGroupName);
	        };
	        /**
	         * @return {?}
	         */
	        ReactiveErrors.arrayParentException = function () {
	            throw new Error("formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        " + Examples.formArrayName);
	        };
	        /**
	         * @return {?}
	         */
	        ReactiveErrors.disabledAttrWarning = function () {
	            console.warn("\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    ");
	        };
	        return ReactiveErrors;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$9 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ formControlBinding$1 = {
	        provide: NgControl,
	        useExisting: _angular_core.forwardRef(function () { return FormControlDirective; })
	    };
	    /**
	     * \@whatItDoes Syncs a standalone {\@link FormControl} instance to a form control element.
	     *
	     * In other words, this directive ensures that any values written to the {\@link FormControl}
	     * instance programmatically will be written to the DOM element (model -> view). Conversely,
	     * any values written to the DOM element through user input will be reflected in the
	     * {\@link FormControl} instance (view -> model).
	     *
	     * \@howToUse
	     *
	     * Use this directive if you'd like to create and manage a {\@link FormControl} instance directly.
	     * Simply create a {\@link FormControl}, save it to your component class, and pass it into the
	     * {\@link FormControlDirective}.
	     *
	     * This directive is designed to be used as a standalone control.  Unlike {\@link FormControlName},
	     * it does not require that your {\@link FormControl} instance be part of any parent
	     * {\@link FormGroup}, and it won't be registered to any {\@link FormGroupDirective} that
	     * exists above it.
	     *
	     * **Get the value**: the `value` property is always synced and available on the
	     * {\@link FormControl} instance. See a full list of available properties in
	     * {\@link AbstractControl}.
	     *
	     * **Set the value**: You can pass in an initial value when instantiating the {\@link FormControl},
	     * or you can set it programmatically later using {\@link AbstractControl.setValue} or
	     * {\@link AbstractControl.patchValue}.
	     *
	     * **Listen to value**: If you want to listen to changes in the value of the control, you can
	     * subscribe to the {\@link AbstractControl.valueChanges} event.  You can also listen to
	     * {\@link AbstractControl.statusChanges} to be notified when the validation status is
	     * re-calculated.
	     *
	     * ### Example
	     *
	     * {\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}
	     *
	     * * **npm package**: `\@angular/forms`
	     *
	     * * **NgModule**: `ReactiveFormsModule`
	     *
	     *  \@stable
	     */
	    var FormControlDirective = (function (_super) {
	        __extends$9(FormControlDirective, _super);
	        /**
	         * @param {?} validators
	         * @param {?} asyncValidators
	         * @param {?} valueAccessors
	         */
	        function FormControlDirective(validators, asyncValidators, valueAccessors) {
	            _super.call(this);
	            this.update = new EventEmitter();
	            this._rawValidators = validators || [];
	            this._rawAsyncValidators = asyncValidators || [];
	            this.valueAccessor = selectValueAccessor(this, valueAccessors);
	        }
	        Object.defineProperty(FormControlDirective.prototype, "isDisabled", {
	            /**
	             * @param {?} isDisabled
	             * @return {?}
	             */
	            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        FormControlDirective.prototype.ngOnChanges = function (changes) {
	            if (this._isControlChanged(changes)) {
	                setUpControl(this.form, this);
	                if (this.control.disabled && this.valueAccessor.setDisabledState) {
	                    this.valueAccessor.setDisabledState(true);
	                }
	                this.form.updateValueAndValidity({ emitEvent: false });
	            }
	            if (isPropertyUpdated(changes, this.viewModel)) {
	                this.form.setValue(this.model);
	                this.viewModel = this.model;
	            }
	        };
	        Object.defineProperty(FormControlDirective.prototype, "path", {
	            /**
	             * @return {?}
	             */
	            get: function () { return []; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormControlDirective.prototype, "validator", {
	            /**
	             * @return {?}
	             */
	            get: function () { return composeValidators(this._rawValidators); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormControlDirective.prototype, "asyncValidator", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return composeAsyncValidators(this._rawAsyncValidators);
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormControlDirective.prototype, "control", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.form; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} newValue
	         * @return {?}
	         */
	        FormControlDirective.prototype.viewToModelUpdate = function (newValue) {
	            this.viewModel = newValue;
	            this.update.emit(newValue);
	        };
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        FormControlDirective.prototype._isControlChanged = function (changes) {
	            return changes.hasOwnProperty('form');
	        };
	        FormControlDirective.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },
	        ];
	        /** @nocollapse */
	        FormControlDirective.ctorParameters = function () { return [
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },
	        ]; };
	        FormControlDirective.propDecorators = {
	            'form': [{ type: _angular_core.Input, args: ['formControl',] },],
	            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],
	            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],
	            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],
	        };
	        return FormControlDirective;
	    }(NgControl));
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$11 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ formDirectiveProvider$1 = {
	        provide: ControlContainer,
	        useExisting: _angular_core.forwardRef(function () { return FormGroupDirective; })
	    };
	    /**
	     * \@whatItDoes Binds an existing {\@link FormGroup} to a DOM element.
	     *
	     * \@howToUse
	     *
	     * This directive accepts an existing {\@link FormGroup} instance. It will then use this
	     * {\@link FormGroup} instance to match any child {\@link FormControl}, {\@link FormGroup},
	     * and {\@link FormArray} instances to child {\@link FormControlName}, {\@link FormGroupName},
	     * and {\@link FormArrayName} directives.
	     *
	     * **Set value**: You can set the form's initial value when instantiating the
	     * {\@link FormGroup}, or you can set it programmatically later using the {\@link FormGroup}'s
	     * {\@link AbstractControl.setValue} or {\@link AbstractControl.patchValue} methods.
	     *
	     * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe
	     * to the {\@link FormGroup}'s {\@link AbstractControl.valueChanges} event.  You can also listen to
	     * its {\@link AbstractControl.statusChanges} event to be notified when the validation status is
	     * re-calculated.
	     *
	     * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has
	     * triggered a form submission. The `ngSubmit` event will be emitted with the original form
	     * submission event.
	     *
	     * ### Example
	     *
	     * In this example, we create form controls for first name and last name.
	     *
	     * {\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
	     *
	     * **npm package**: `\@angular/forms`
	     *
	     * **NgModule**: {\@link ReactiveFormsModule}
	     *
	     *  \@stable
	     */
	    var FormGroupDirective = (function (_super) {
	        __extends$11(FormGroupDirective, _super);
	        /**
	         * @param {?} _validators
	         * @param {?} _asyncValidators
	         */
	        function FormGroupDirective(_validators, _asyncValidators) {
	            _super.call(this);
	            this._validators = _validators;
	            this._asyncValidators = _asyncValidators;
	            this._submitted = false;
	            this.directives = [];
	            this.form = null;
	            this.ngSubmit = new EventEmitter();
	        }
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        FormGroupDirective.prototype.ngOnChanges = function (changes) {
	            this._checkFormPresent();
	            if (changes.hasOwnProperty('form')) {
	                this._updateValidators();
	                this._updateDomValue();
	                this._updateRegistrations();
	            }
	        };
	        Object.defineProperty(FormGroupDirective.prototype, "submitted", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._submitted; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormGroupDirective.prototype, "formDirective", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormGroupDirective.prototype, "control", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.form; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormGroupDirective.prototype, "path", {
	            /**
	             * @return {?}
	             */
	            get: function () { return []; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        FormGroupDirective.prototype.addControl = function (dir) {
	            var /** @type {?} */ ctrl = this.form.get(dir.path);
	            setUpControl(ctrl, dir);
	            ctrl.updateValueAndValidity({ emitEvent: false });
	            this.directives.push(dir);
	            return ctrl;
	        };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        FormGroupDirective.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        FormGroupDirective.prototype.removeControl = function (dir) { ListWrapper.remove(this.directives, dir); };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        FormGroupDirective.prototype.addFormGroup = function (dir) {
	            var /** @type {?} */ ctrl = this.form.get(dir.path);
	            setUpFormContainer(ctrl, dir);
	            ctrl.updateValueAndValidity({ emitEvent: false });
	        };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        FormGroupDirective.prototype.removeFormGroup = function (dir) { };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        FormGroupDirective.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        FormGroupDirective.prototype.addFormArray = function (dir) {
	            var /** @type {?} */ ctrl = this.form.get(dir.path);
	            setUpFormContainer(ctrl, dir);
	            ctrl.updateValueAndValidity({ emitEvent: false });
	        };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        FormGroupDirective.prototype.removeFormArray = function (dir) { };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        FormGroupDirective.prototype.getFormArray = function (dir) { return (this.form.get(dir.path)); };
	        /**
	         * @param {?} dir
	         * @param {?} value
	         * @return {?}
	         */
	        FormGroupDirective.prototype.updateModel = function (dir, value) {
	            var /** @type {?} */ ctrl = (this.form.get(dir.path));
	            ctrl.setValue(value);
	        };
	        /**
	         * @param {?} $event
	         * @return {?}
	         */
	        FormGroupDirective.prototype.onSubmit = function ($event) {
	            this._submitted = true;
	            this.ngSubmit.emit($event);
	            return false;
	        };
	        /**
	         * @return {?}
	         */
	        FormGroupDirective.prototype.onReset = function () { this.resetForm(); };
	        /**
	         * @param {?=} value
	         * @return {?}
	         */
	        FormGroupDirective.prototype.resetForm = function (value) {
	            if (value === void 0) { value = undefined; }
	            this.form.reset(value);
	            this._submitted = false;
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        FormGroupDirective.prototype._updateDomValue = function () {
	            var _this = this;
	            this.directives.forEach(function (dir) {
	                var /** @type {?} */ newCtrl = _this.form.get(dir.path);
	                if (dir._control !== newCtrl) {
	                    cleanUpControl(dir._control, dir);
	                    if (newCtrl)
	                        setUpControl(newCtrl, dir);
	                    dir._control = newCtrl;
	                }
	            });
	            this.form._updateTreeValidity({ emitEvent: false });
	        };
	        /**
	         * @return {?}
	         */
	        FormGroupDirective.prototype._updateRegistrations = function () {
	            var _this = this;
	            this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });
	            if (this._oldForm)
	                this._oldForm._registerOnCollectionChange(function () { });
	            this._oldForm = this.form;
	        };
	        /**
	         * @return {?}
	         */
	        FormGroupDirective.prototype._updateValidators = function () {
	            var /** @type {?} */ sync = composeValidators(this._validators);
	            this.form.validator = Validators.compose([this.form.validator, sync]);
	            var /** @type {?} */ async = composeAsyncValidators(this._asyncValidators);
	            this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);
	        };
	        /**
	         * @return {?}
	         */
	        FormGroupDirective.prototype._checkFormPresent = function () {
	            if (!this.form) {
	                ReactiveErrors.missingFormException();
	            }
	        };
	        FormGroupDirective.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: '[formGroup]',
	                        providers: [formDirectiveProvider$1],
	                        host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },
	                        exportAs: 'ngForm'
	                    },] },
	        ];
	        /** @nocollapse */
	        FormGroupDirective.ctorParameters = function () { return [
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
	        ]; };
	        FormGroupDirective.propDecorators = {
	            'form': [{ type: _angular_core.Input, args: ['formGroup',] },],
	            'ngSubmit': [{ type: _angular_core.Output },],
	        };
	        return FormGroupDirective;
	    }(ControlContainer));
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$12 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ formGroupNameProvider = {
	        provide: ControlContainer,
	        useExisting: _angular_core.forwardRef(function () { return FormGroupName; })
	    };
	    /**
	     * \@whatItDoes Syncs a nested {\@link FormGroup} to a DOM element.
	     *
	     * \@howToUse
	     *
	     * This directive can only be used with a parent {\@link FormGroupDirective} (selector:
	     * `[formGroup]`).
	     *
	     * It accepts the string name of the nested {\@link FormGroup} you want to link, and
	     * will look for a {\@link FormGroup} registered with that name in the parent
	     * {\@link FormGroup} instance you passed into {\@link FormGroupDirective}.
	     *
	     * Nested form groups can come in handy when you want to validate a sub-group of a
	     * form separately from the rest or when you'd like to group the values of certain
	     * controls into their own nested object.
	     *
	     * **Access the group**: You can access the associated {\@link FormGroup} using the
	     * {\@link AbstractControl.get} method. Ex: `this.form.get('name')`.
	     *
	     * You can also access individual controls within the group using dot syntax.
	     * Ex: `this.form.get('name.first')`
	     *
	     * **Get the value**: the `value` property is always synced and available on the
	     * {\@link FormGroup}. See a full list of available properties in {\@link AbstractControl}.
	     *
	     * **Set the value**: You can set an initial value for each child control when instantiating
	     * the {\@link FormGroup}, or you can set it programmatically later using
	     * {\@link AbstractControl.setValue} or {\@link AbstractControl.patchValue}.
	     *
	     * **Listen to value**: If you want to listen to changes in the value of the group, you can
	     * subscribe to the {\@link AbstractControl.valueChanges} event.  You can also listen to
	     * {\@link AbstractControl.statusChanges} to be notified when the validation status is
	     * re-calculated.
	     *
	     * ### Example
	     *
	     * {\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}
	     *
	     * * **npm package**: `\@angular/forms`
	     *
	     * * **NgModule**: `ReactiveFormsModule`
	     *
	     * \@stable
	     */
	    var FormGroupName = (function (_super) {
	        __extends$12(FormGroupName, _super);
	        /**
	         * @param {?} parent
	         * @param {?} validators
	         * @param {?} asyncValidators
	         */
	        function FormGroupName(parent, validators, asyncValidators) {
	            _super.call(this);
	            this._parent = parent;
	            this._validators = validators;
	            this._asyncValidators = asyncValidators;
	        }
	        /**
	         * \@internal
	         * @return {?}
	         */
	        FormGroupName.prototype._checkParentType = function () {
	            if (_hasInvalidParent(this._parent)) {
	                ReactiveErrors.groupParentException();
	            }
	        };
	        FormGroupName.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },
	        ];
	        /** @nocollapse */
	        FormGroupName.ctorParameters = function () { return [
	            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
	        ]; };
	        FormGroupName.propDecorators = {
	            'name': [{ type: _angular_core.Input, args: ['formGroupName',] },],
	        };
	        return FormGroupName;
	    }(AbstractFormGroupDirective));
	    var /** @type {?} */ formArrayNameProvider = {
	        provide: ControlContainer,
	        useExisting: _angular_core.forwardRef(function () { return FormArrayName; })
	    };
	    /**
	     * \@whatItDoes Syncs a nested {\@link FormArray} to a DOM element.
	     *
	     * \@howToUse
	     *
	     * This directive is designed to be used with a parent {\@link FormGroupDirective} (selector:
	     * `[formGroup]`).
	     *
	     * It accepts the string name of the nested {\@link FormArray} you want to link, and
	     * will look for a {\@link FormArray} registered with that name in the parent
	     * {\@link FormGroup} instance you passed into {\@link FormGroupDirective}.
	     *
	     * Nested form arrays can come in handy when you have a group of form controls but
	     * you're not sure how many there will be. Form arrays allow you to create new
	     * form controls dynamically.
	     *
	     * **Access the array**: You can access the associated {\@link FormArray} using the
	     * {\@link AbstractControl.get} method on the parent {\@link FormGroup}.
	     * Ex: `this.form.get('cities')`.
	     *
	     * **Get the value**: the `value` property is always synced and available on the
	     * {\@link FormArray}. See a full list of available properties in {\@link AbstractControl}.
	     *
	     * **Set the value**: You can set an initial value for each child control when instantiating
	     * the {\@link FormArray}, or you can set the value programmatically later using the
	     * {\@link FormArray}'s {\@link AbstractControl.setValue} or {\@link AbstractControl.patchValue}
	     * methods.
	     *
	     * **Listen to value**: If you want to listen to changes in the value of the array, you can
	     * subscribe to the {\@link FormArray}'s {\@link AbstractControl.valueChanges} event.  You can also
	     * listen to its {\@link AbstractControl.statusChanges} event to be notified when the validation
	     * status is re-calculated.
	     *
	     * **Add new controls**: You can add new controls to the {\@link FormArray} dynamically by
	     * calling its {\@link FormArray.push} method.
	     *  Ex: `this.form.get('cities').push(new FormControl());`
	     *
	     * ### Example
	     *
	     * {\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}
	     *
	     * * **npm package**: `\@angular/forms`
	     *
	     * * **NgModule**: `ReactiveFormsModule`
	     *
	     * \@stable
	     */
	    var FormArrayName = (function (_super) {
	        __extends$12(FormArrayName, _super);
	        /**
	         * @param {?} parent
	         * @param {?} validators
	         * @param {?} asyncValidators
	         */
	        function FormArrayName(parent, validators, asyncValidators) {
	            _super.call(this);
	            this._parent = parent;
	            this._validators = validators;
	            this._asyncValidators = asyncValidators;
	        }
	        /**
	         * @return {?}
	         */
	        FormArrayName.prototype.ngOnInit = function () {
	            this._checkParentType();
	            this.formDirective.addFormArray(this);
	        };
	        /**
	         * @return {?}
	         */
	        FormArrayName.prototype.ngOnDestroy = function () {
	            if (this.formDirective) {
	                this.formDirective.removeFormArray(this);
	            }
	        };
	        Object.defineProperty(FormArrayName.prototype, "control", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.formDirective.getFormArray(this); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormArrayName.prototype, "formDirective", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return this._parent ? (this._parent.formDirective) : null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormArrayName.prototype, "path", {
	            /**
	             * @return {?}
	             */
	            get: function () { return controlPath(this.name, this._parent); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormArrayName.prototype, "validator", {
	            /**
	             * @return {?}
	             */
	            get: function () { return composeValidators(this._validators); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormArrayName.prototype, "asyncValidator", {
	            /**
	             * @return {?}
	             */
	            get: function () { return composeAsyncValidators(this._asyncValidators); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        FormArrayName.prototype._checkParentType = function () {
	            if (_hasInvalidParent(this._parent)) {
	                ReactiveErrors.arrayParentException();
	            }
	        };
	        FormArrayName.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },
	        ];
	        /** @nocollapse */
	        FormArrayName.ctorParameters = function () { return [
	            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
	        ]; };
	        FormArrayName.propDecorators = {
	            'name': [{ type: _angular_core.Input, args: ['formArrayName',] },],
	        };
	        return FormArrayName;
	    }(ControlContainer));
	    /**
	     * @param {?} parent
	     * @return {?}
	     */
	    function _hasInvalidParent(parent) {
	        return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&
	            !(parent instanceof FormArrayName);
	    }
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$10 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ controlNameBinding = {
	        provide: NgControl,
	        useExisting: _angular_core.forwardRef(function () { return FormControlName; })
	    };
	    /**
	     * \@whatItDoes Syncs a {\@link FormControl} in an existing {\@link FormGroup} to a form control
	     * element by name.
	     *
	     * In other words, this directive ensures that any values written to the {\@link FormControl}
	     * instance programmatically will be written to the DOM element (model -> view). Conversely,
	     * any values written to the DOM element through user input will be reflected in the
	     * {\@link FormControl} instance (view -> model).
	     *
	     * \@howToUse
	     *
	     * This directive is designed to be used with a parent {\@link FormGroupDirective} (selector:
	     * `[formGroup]`).
	     *
	     * It accepts the string name of the {\@link FormControl} instance you want to
	     * link, and will look for a {\@link FormControl} registered with that name in the
	     * closest {\@link FormGroup} or {\@link FormArray} above it.
	     *
	     * **Access the control**: You can access the {\@link FormControl} associated with
	     * this directive by using the {\@link AbstractControl.get} method.
	     * Ex: `this.form.get('first');`
	     *
	     * **Get value**: the `value` property is always synced and available on the {\@link FormControl}.
	     * See a full list of available properties in {\@link AbstractControl}.
	     *
	     *  **Set value**: You can set an initial value for the control when instantiating the
	     *  {\@link FormControl}, or you can set it programmatically later using
	     *  {\@link AbstractControl.setValue} or {\@link AbstractControl.patchValue}.
	     *
	     * **Listen to value**: If you want to listen to changes in the value of the control, you can
	     * subscribe to the {\@link AbstractControl.valueChanges} event.  You can also listen to
	     * {\@link AbstractControl.statusChanges} to be notified when the validation status is
	     * re-calculated.
	     *
	     * ### Example
	     *
	     * In this example, we create form controls for first name and last name.
	     *
	     * {\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
	     *
	     * To see `formControlName` examples with different form control types, see:
	     *
	     * * Radio buttons: {\@link RadioControlValueAccessor}
	     * * Selects: {\@link SelectControlValueAccessor}
	     *
	     * **npm package**: `\@angular/forms`
	     *
	     * **NgModule**: {\@link ReactiveFormsModule}
	     *
	     *  \@stable
	     */
	    var FormControlName = (function (_super) {
	        __extends$10(FormControlName, _super);
	        /**
	         * @param {?} parent
	         * @param {?} validators
	         * @param {?} asyncValidators
	         * @param {?} valueAccessors
	         */
	        function FormControlName(parent, validators, asyncValidators, valueAccessors) {
	            _super.call(this);
	            this._added = false;
	            this.update = new EventEmitter();
	            this._parent = parent;
	            this._rawValidators = validators || [];
	            this._rawAsyncValidators = asyncValidators || [];
	            this.valueAccessor = selectValueAccessor(this, valueAccessors);
	        }
	        Object.defineProperty(FormControlName.prototype, "isDisabled", {
	            /**
	             * @param {?} isDisabled
	             * @return {?}
	             */
	            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        FormControlName.prototype.ngOnChanges = function (changes) {
	            if (!this._added)
	                this._setUpControl();
	            if (isPropertyUpdated(changes, this.viewModel)) {
	                this.viewModel = this.model;
	                this.formDirective.updateModel(this, this.model);
	            }
	        };
	        /**
	         * @return {?}
	         */
	        FormControlName.prototype.ngOnDestroy = function () {
	            if (this.formDirective) {
	                this.formDirective.removeControl(this);
	            }
	        };
	        /**
	         * @param {?} newValue
	         * @return {?}
	         */
	        FormControlName.prototype.viewToModelUpdate = function (newValue) {
	            this.viewModel = newValue;
	            this.update.emit(newValue);
	        };
	        Object.defineProperty(FormControlName.prototype, "path", {
	            /**
	             * @return {?}
	             */
	            get: function () { return controlPath(this.name, this._parent); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormControlName.prototype, "formDirective", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._parent ? this._parent.formDirective : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormControlName.prototype, "validator", {
	            /**
	             * @return {?}
	             */
	            get: function () { return composeValidators(this._rawValidators); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormControlName.prototype, "asyncValidator", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return composeAsyncValidators(this._rawAsyncValidators);
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormControlName.prototype, "control", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._control; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        FormControlName.prototype._checkParentType = function () {
	            if (!(this._parent instanceof FormGroupName) &&
	                this._parent instanceof AbstractFormGroupDirective) {
	                ReactiveErrors.ngModelGroupException();
	            }
	            else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&
	                !(this._parent instanceof FormArrayName)) {
	                ReactiveErrors.controlParentException();
	            }
	        };
	        /**
	         * @return {?}
	         */
	        FormControlName.prototype._setUpControl = function () {
	            this._checkParentType();
	            this._control = this.formDirective.addControl(this);
	            if (this.control.disabled && this.valueAccessor.setDisabledState) {
	                this.valueAccessor.setDisabledState(true);
	            }
	            this._added = true;
	        };
	        FormControlName.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },
	        ];
	        /** @nocollapse */
	        FormControlName.ctorParameters = function () { return [
	            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },
	        ]; };
	        FormControlName.propDecorators = {
	            'name': [{ type: _angular_core.Input, args: ['formControlName',] },],
	            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],
	            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],
	            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],
	        };
	        return FormControlName;
	    }(NgControl));
	
	    var __extends$13 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ REQUIRED_VALIDATOR = {
	        provide: NG_VALIDATORS,
	        useExisting: _angular_core.forwardRef(function () { return RequiredValidator; }),
	        multi: true
	    };
	    var /** @type {?} */ CHECKBOX_REQUIRED_VALIDATOR = {
	        provide: NG_VALIDATORS,
	        useExisting: _angular_core.forwardRef(function () { return CheckboxRequiredValidator; }),
	        multi: true
	    };
	    /**
	     * A Directive that adds the `required` validator to any controls marked with the
	     * `required` attribute, via the {\@link NG_VALIDATORS} binding.
	     *
	     * ### Example
	     *
	     * ```
	     * <input name="fullName" ngModel required>
	     * ```
	     *
	     * \@stable
	     */
	    var RequiredValidator = (function () {
	        function RequiredValidator() {
	        }
	        Object.defineProperty(RequiredValidator.prototype, "required", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._required; },
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) {
	                this._required = value != null && value !== false && "" + value !== 'false';
	                if (this._onChange)
	                    this._onChange();
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} c
	         * @return {?}
	         */
	        RequiredValidator.prototype.validate = function (c) {
	            return this.required ? Validators.required(c) : null;
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        RequiredValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
	        RequiredValidator.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',
	                        providers: [REQUIRED_VALIDATOR],
	                        host: { '[attr.required]': 'required ? "" : null' }
	                    },] },
	        ];
	        /** @nocollapse */
	        RequiredValidator.ctorParameters = function () { return []; };
	        RequiredValidator.propDecorators = {
	            'required': [{ type: _angular_core.Input },],
	        };
	        return RequiredValidator;
	    }());
	    /**
	     * A Directive that adds the `required` validator to checkbox controls marked with the
	     * `required` attribute, via the {\@link NG_VALIDATORS} binding.
	     *
	     * ### Example
	     *
	     * ```
	     * <input type="checkbox" name="active" ngModel required>
	     * ```
	     *
	     * \@experimental
	     */
	    var CheckboxRequiredValidator = (function (_super) {
	        __extends$13(CheckboxRequiredValidator, _super);
	        function CheckboxRequiredValidator() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @param {?} c
	         * @return {?}
	         */
	        CheckboxRequiredValidator.prototype.validate = function (c) {
	            return this.required ? Validators.requiredTrue(c) : null;
	        };
	        CheckboxRequiredValidator.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',
	                        providers: [CHECKBOX_REQUIRED_VALIDATOR],
	                        host: { '[attr.required]': 'required ? "" : null' }
	                    },] },
	        ];
	        /** @nocollapse */
	        CheckboxRequiredValidator.ctorParameters = function () { return []; };
	        return CheckboxRequiredValidator;
	    }(RequiredValidator));
	    /**
	     * Provider which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.
	     *
	     * ## Example:
	     *
	     * {@example common/forms/ts/validators/validators.ts region='min'}
	     */
	    var /** @type {?} */ MIN_LENGTH_VALIDATOR = {
	        provide: NG_VALIDATORS,
	        useExisting: _angular_core.forwardRef(function () { return MinLengthValidator; }),
	        multi: true
	    };
	    /**
	     * A directive which installs the {\@link MinLengthValidator} for any `formControlName`,
	     * `formControl`, or control with `ngModel` that also has a `minlength` attribute.
	     *
	     * \@stable
	     */
	    var MinLengthValidator = (function () {
	        function MinLengthValidator() {
	        }
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        MinLengthValidator.prototype.ngOnChanges = function (changes) {
	            if ('minlength' in changes) {
	                this._createValidator();
	                if (this._onChange)
	                    this._onChange();
	            }
	        };
	        /**
	         * @param {?} c
	         * @return {?}
	         */
	        MinLengthValidator.prototype.validate = function (c) {
	            return this.minlength == null ? null : this._validator(c);
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        MinLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
	        /**
	         * @return {?}
	         */
	        MinLengthValidator.prototype._createValidator = function () {
	            this._validator = Validators.minLength(parseInt(this.minlength, 10));
	        };
	        MinLengthValidator.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',
	                        providers: [MIN_LENGTH_VALIDATOR],
	                        host: { '[attr.minlength]': 'minlength ? minlength : null' }
	                    },] },
	        ];
	        /** @nocollapse */
	        MinLengthValidator.ctorParameters = function () { return []; };
	        MinLengthValidator.propDecorators = {
	            'minlength': [{ type: _angular_core.Input },],
	        };
	        return MinLengthValidator;
	    }());
	    /**
	     * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.
	     *
	     * ## Example:
	     *
	     * {@example common/forms/ts/validators/validators.ts region='max'}
	     */
	    var /** @type {?} */ MAX_LENGTH_VALIDATOR = {
	        provide: NG_VALIDATORS,
	        useExisting: _angular_core.forwardRef(function () { return MaxLengthValidator; }),
	        multi: true
	    };
	    /**
	     * A directive which installs the {\@link MaxLengthValidator} for any `formControlName,
	     * `formControl`,
	     * or control with `ngModel` that also has a `maxlength` attribute.
	     *
	     * \@stable
	     */
	    var MaxLengthValidator = (function () {
	        function MaxLengthValidator() {
	        }
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        MaxLengthValidator.prototype.ngOnChanges = function (changes) {
	            if ('maxlength' in changes) {
	                this._createValidator();
	                if (this._onChange)
	                    this._onChange();
	            }
	        };
	        /**
	         * @param {?} c
	         * @return {?}
	         */
	        MaxLengthValidator.prototype.validate = function (c) {
	            return this.maxlength != null ? this._validator(c) : null;
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
	        /**
	         * @return {?}
	         */
	        MaxLengthValidator.prototype._createValidator = function () {
	            this._validator = Validators.maxLength(parseInt(this.maxlength, 10));
	        };
	        MaxLengthValidator.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',
	                        providers: [MAX_LENGTH_VALIDATOR],
	                        host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }
	                    },] },
	        ];
	        /** @nocollapse */
	        MaxLengthValidator.ctorParameters = function () { return []; };
	        MaxLengthValidator.propDecorators = {
	            'maxlength': [{ type: _angular_core.Input },],
	        };
	        return MaxLengthValidator;
	    }());
	    var /** @type {?} */ PATTERN_VALIDATOR = {
	        provide: NG_VALIDATORS,
	        useExisting: _angular_core.forwardRef(function () { return PatternValidator; }),
	        multi: true
	    };
	    /**
	     * A Directive that adds the `pattern` validator to any controls marked with the
	     * `pattern` attribute, via the {\@link NG_VALIDATORS} binding. Uses attribute value
	     * as the regex to validate Control value against.  Follows pattern attribute
	     * semantics; i.e. regex must match entire Control value.
	     *
	     * ### Example
	     *
	     * ```
	     * <input [name]="fullName" pattern="[a-zA-Z ]*" ngModel>
	     * ```
	     * \@stable
	     */
	    var PatternValidator = (function () {
	        function PatternValidator() {
	        }
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        PatternValidator.prototype.ngOnChanges = function (changes) {
	            if ('pattern' in changes) {
	                this._createValidator();
	                if (this._onChange)
	                    this._onChange();
	            }
	        };
	        /**
	         * @param {?} c
	         * @return {?}
	         */
	        PatternValidator.prototype.validate = function (c) { return this._validator(c); };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        PatternValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
	        /**
	         * @return {?}
	         */
	        PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern); };
	        PatternValidator.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',
	                        providers: [PATTERN_VALIDATOR],
	                        host: { '[attr.pattern]': 'pattern ? pattern : null' }
	                    },] },
	        ];
	        /** @nocollapse */
	        PatternValidator.ctorParameters = function () { return []; };
	        PatternValidator.propDecorators = {
	            'pattern': [{ type: _angular_core.Input },],
	        };
	        return PatternValidator;
	    }());
	
	    /**
	     * \@whatItDoes Creates an {\@link AbstractControl} from a user-specified configuration.
	     *
	     * It is essentially syntactic sugar that shortens the `new FormGroup()`,
	     * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger
	     * forms.
	     *
	     * \@howToUse
	     *
	     * To use, inject `FormBuilder` into your component class. You can then call its methods
	     * directly.
	     *
	     * {\@example forms/ts/formBuilder/form_builder_example.ts region='Component'}
	     *
	     *  * **npm package**: `\@angular/forms`
	     *
	     *  * **NgModule**: {\@link ReactiveFormsModule}
	     *
	     * \@stable
	     */
	    var FormBuilder = (function () {
	        function FormBuilder() {
	        }
	        /**
	         * Construct a new {\@link FormGroup} with the given map of configuration.
	         * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.
	         *
	         * See the {\@link FormGroup} constructor for more details.
	         * @param {?} controlsConfig
	         * @param {?=} extra
	         * @return {?}
	         */
	        FormBuilder.prototype.group = function (controlsConfig, extra) {
	            if (extra === void 0) { extra = null; }
	            var /** @type {?} */ controls = this._reduceControls(controlsConfig);
	            var /** @type {?} */ validator = isPresent(extra) ? extra['validator'] : null;
	            var /** @type {?} */ asyncValidator = isPresent(extra) ? extra['asyncValidator'] : null;
	            return new FormGroup(controls, validator, asyncValidator);
	        };
	        /**
	         * Construct a new {\@link FormControl} with the given `formState`,`validator`, and
	         * `asyncValidator`.
	         *
	         * `formState` can either be a standalone value for the form control or an object
	         * that contains both a value and a disabled status.
	         *
	         * @param {?} formState
	         * @param {?=} validator
	         * @param {?=} asyncValidator
	         * @return {?}
	         */
	        FormBuilder.prototype.control = function (formState, validator, asyncValidator) {
	            if (validator === void 0) { validator = null; }
	            if (asyncValidator === void 0) { asyncValidator = null; }
	            return new FormControl(formState, validator, asyncValidator);
	        };
	        /**
	         * Construct a {\@link FormArray} from the given `controlsConfig` array of
	         * configuration, with the given optional `validator` and `asyncValidator`.
	         * @param {?} controlsConfig
	         * @param {?=} validator
	         * @param {?=} asyncValidator
	         * @return {?}
	         */
	        FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {
	            var _this = this;
	            if (validator === void 0) { validator = null; }
	            if (asyncValidator === void 0) { asyncValidator = null; }
	            var /** @type {?} */ controls = controlsConfig.map(function (c) { return _this._createControl(c); });
	            return new FormArray(controls, validator, asyncValidator);
	        };
	        /**
	         * \@internal
	         * @param {?} controlsConfig
	         * @return {?}
	         */
	        FormBuilder.prototype._reduceControls = function (controlsConfig) {
	            var _this = this;
	            var /** @type {?} */ controls = {};
	            Object.keys(controlsConfig).forEach(function (controlName) {
	                controls[controlName] = _this._createControl(controlsConfig[controlName]);
	            });
	            return controls;
	        };
	        /**
	         * \@internal
	         * @param {?} controlConfig
	         * @return {?}
	         */
	        FormBuilder.prototype._createControl = function (controlConfig) {
	            if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||
	                controlConfig instanceof FormArray) {
	                return controlConfig;
	            }
	            else if (Array.isArray(controlConfig)) {
	                var /** @type {?} */ value = controlConfig[0];
	                var /** @type {?} */ validator = controlConfig.length > 1 ? controlConfig[1] : null;
	                var /** @type {?} */ asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
	                return this.control(value, validator, asyncValidator);
	            }
	            else {
	                return this.control(controlConfig);
	            }
	        };
	        FormBuilder.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        FormBuilder.ctorParameters = function () { return []; };
	        return FormBuilder;
	    }());
	
	    /**
	     * @stable
	     */
	    var /** @type {?} */ VERSION = new _angular_core.Version('2.4.8');
	
	    var /** @type {?} */ SHARED_FORM_DIRECTIVES = [
	        NgSelectOption,
	        NgSelectMultipleOption,
	        DefaultValueAccessor,
	        NumberValueAccessor,
	        RangeValueAccessor,
	        CheckboxControlValueAccessor,
	        SelectControlValueAccessor,
	        SelectMultipleControlValueAccessor,
	        RadioControlValueAccessor,
	        NgControlStatus,
	        NgControlStatusGroup,
	        RequiredValidator,
	        MinLengthValidator,
	        MaxLengthValidator,
	        PatternValidator,
	        CheckboxRequiredValidator,
	    ];
	    var /** @type {?} */ TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];
	    var /** @type {?} */ REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];
	    /**
	     * Internal module used for sharing directives between FormsModule and ReactiveFormsModule
	     */
	    var InternalFormsSharedModule = (function () {
	        function InternalFormsSharedModule() {
	        }
	        InternalFormsSharedModule.decorators = [
	            { type: _angular_core.NgModule, args: [{
	                        declarations: SHARED_FORM_DIRECTIVES,
	                        exports: SHARED_FORM_DIRECTIVES,
	                    },] },
	        ];
	        /** @nocollapse */
	        InternalFormsSharedModule.ctorParameters = function () { return []; };
	        return InternalFormsSharedModule;
	    }());
	
	    /**
	     * The ng module for forms.
	     * \@stable
	     */
	    var FormsModule = (function () {
	        function FormsModule() {
	        }
	        FormsModule.decorators = [
	            { type: _angular_core.NgModule, args: [{
	                        declarations: TEMPLATE_DRIVEN_DIRECTIVES,
	                        providers: [RadioControlRegistry],
	                        exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]
	                    },] },
	        ];
	        /** @nocollapse */
	        FormsModule.ctorParameters = function () { return []; };
	        return FormsModule;
	    }());
	    /**
	     * The ng module for reactive forms.
	     * \@stable
	     */
	    var ReactiveFormsModule = (function () {
	        function ReactiveFormsModule() {
	        }
	        ReactiveFormsModule.decorators = [
	            { type: _angular_core.NgModule, args: [{
	                        declarations: [REACTIVE_DRIVEN_DIRECTIVES],
	                        providers: [FormBuilder, RadioControlRegistry],
	                        exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]
	                    },] },
	        ];
	        /** @nocollapse */
	        ReactiveFormsModule.ctorParameters = function () { return []; };
	        return ReactiveFormsModule;
	    }());
	
	    exports.AbstractControlDirective = AbstractControlDirective;
	    exports.AbstractFormGroupDirective = AbstractFormGroupDirective;
	    exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;
	    exports.ControlContainer = ControlContainer;
	    exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR;
	    exports.DefaultValueAccessor = DefaultValueAccessor;
	    exports.NgControl = NgControl;
	    exports.NgControlStatus = NgControlStatus;
	    exports.NgControlStatusGroup = NgControlStatusGroup;
	    exports.NgForm = NgForm;
	    exports.NgModel = NgModel;
	    exports.NgModelGroup = NgModelGroup;
	    exports.RadioControlValueAccessor = RadioControlValueAccessor;
	    exports.FormControlDirective = FormControlDirective;
	    exports.FormControlName = FormControlName;
	    exports.FormGroupDirective = FormGroupDirective;
	    exports.FormArrayName = FormArrayName;
	    exports.FormGroupName = FormGroupName;
	    exports.NgSelectOption = NgSelectOption;
	    exports.SelectControlValueAccessor = SelectControlValueAccessor;
	    exports.SelectMultipleControlValueAccessor = SelectMultipleControlValueAccessor;
	    exports.CheckboxRequiredValidator = CheckboxRequiredValidator;
	    exports.MaxLengthValidator = MaxLengthValidator;
	    exports.MinLengthValidator = MinLengthValidator;
	    exports.PatternValidator = PatternValidator;
	    exports.RequiredValidator = RequiredValidator;
	    exports.FormBuilder = FormBuilder;
	    exports.AbstractControl = AbstractControl;
	    exports.FormArray = FormArray;
	    exports.FormControl = FormControl;
	    exports.FormGroup = FormGroup;
	    exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS;
	    exports.NG_VALIDATORS = NG_VALIDATORS;
	    exports.Validators = Validators;
	    exports.VERSION = VERSION;
	    exports.FormsModule = FormsModule;
	    exports.ReactiveFormsModule = ReactiveFormsModule;
	
	}));

/***/ },

/***/ 29:
/***/ function(module, exports, __webpack_require__) {

	/**
	  * @license Angular Material v2.0.0-beta.2
	  * Copyright (c) 2017 Google, Inc. https://material.angular.io/
	  * License: MIT
	  */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(3), __webpack_require__(22), __webpack_require__(6), __webpack_require__(7), __webpack_require__(30), __webpack_require__(33), __webpack_require__(21), __webpack_require__(24), __webpack_require__(40), __webpack_require__(54), __webpack_require__(28), __webpack_require__(57), __webpack_require__(60), __webpack_require__(62), __webpack_require__(64), __webpack_require__(66), __webpack_require__(68), __webpack_require__(72), __webpack_require__(74), __webpack_require__(76), __webpack_require__(79)) :
	    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', 'rxjs/Subject', 'rxjs/Observable', 'rxjs/add/observable/fromEvent', 'rxjs/add/operator/auditTime', '@angular/platform-browser', '@angular/forms', 'rxjs/add/operator/startWith', 'rxjs/add/operator/first', '@angular/http', 'rxjs/add/observable/forkJoin', 'rxjs/add/observable/of', 'rxjs/add/operator/map', 'rxjs/add/operator/filter', 'rxjs/add/operator/do', 'rxjs/add/operator/share', 'rxjs/add/operator/finally', 'rxjs/add/operator/catch', 'rxjs/add/observable/merge', 'rxjs/add/operator/switchMap'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}),global.ng.core,global.ng.common,global.Rx,global.Rx,global.Rx.Observable,global.Rx.Observable.prototype,global.ng.platformBrowser,global.ng.forms,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.ng.http,global.Rx.Observable,global.Rx.Observable,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable,global.Rx.Observable.prototype));
	}(this, (function (exports,_angular_core,_angular_common,rxjs_Subject,rxjs_Observable,rxjs_add_observable_fromEvent,rxjs_add_operator_auditTime,_angular_platformBrowser,_angular_forms,rxjs_add_operator_startWith,rxjs_add_operator_first,_angular_http,rxjs_add_observable_forkJoin,rxjs_add_observable_of,rxjs_add_operator_map,rxjs_add_operator_filter,rxjs_add_operator_do,rxjs_add_operator_share,rxjs_add_operator_finally,rxjs_add_operator_catch,rxjs_add_observable_merge,rxjs_add_operator_switchMap) { 'use strict';
	
	var __decorate$2 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$2 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var MATERIAL_COMPATIBILITY_MODE = new _angular_core.OpaqueToken('md-compatibility-mode');
	/** Selector that matches all elements that may have style collisions with AngularJS Material. */
	var MAT_ELEMENTS_SELECTOR = "\n  [mat-button],\n  [mat-dialog-actions],\n  [mat-dialog-close],\n  [mat-dialog-content],\n  [mat-dialog-title],\n  [mat-fab],\n  [mat-icon-button],\n  [mat-menu-trigger-for],\n  [mat-mini-fab],\n  [mat-raised-button],\n  [mat-tab-label],\n  [mat-tab-link],\n  [mat-tab-nav-bar],\n  [matTooltip],\n  mat-autocomplete,\n  mat-button-toggle,\n  mat-button-toggle-group,\n  mat-button-toggle,\n  mat-card,\n  mat-card-actions,\n  mat-card-content,\n  mat-card-footer,\n  mat-card-header,\n  mat-card-subtitle,\n  mat-card-title,\n  mat-card-title-group,\n  mat-checkbox,\n  mat-chip,\n  mat-dialog-actions,\n  mat-dialog-container,\n  mat-dialog-content,\n  mat-divider,\n  mat-grid-list,\n  mat-grid-tile,\n  mat-grid-tile-footer,\n  mat-grid-tile-header,\n  mat-hint,\n  mat-icon,\n  mat-ink-bar,\n  mat-list,\n  mat-list-item,\n  mat-menu,\n  mat-nav-list,\n  mat-option,\n  mat-placeholder,\n  mat-progress-bar,\n  mat-progress-circle,\n  mat-pseudo-checkbox,\n  mat-radio-button,\n  mat-radio-group,\n  mat-select,\n  mat-sidenav,\n  mat-sidenav-container,\n  mat-slider,\n  mat-spinner,\n  mat-tab,\n  mat-tab-body,\n  mat-tab-header,\n  mat-tab-group,\n  mat-toolbar";
	/** Selector that matches all elements that may have style collisions with AngularJS Material. */
	var MD_ELEMENTS_SELECTOR = "  \n  [md-button],\n  [md-dialog-actions],\n  [md-dialog-close],\n  [md-dialog-content],\n  [md-dialog-title],\n  [md-fab],\n  [md-icon-button],\n  [md-menu-trigger-for],\n  [md-mini-fab],\n  [md-raised-button],\n  [md-tab-label],\n  [md-tab-link],\n  [md-tab-nav-bar],\n  [mdTooltip],\n  md-autocomplete,\n  md-button-toggle,\n  md-button-toggle-group,\n  md-button-toggle,\n  md-card,\n  md-card-actions,\n  md-card-content,\n  md-card-footer,\n  md-card-header,\n  md-card-subtitle,\n  md-card-title,\n  md-card-title-group,\n  md-checkbox,\n  md-chip,\n  md-dialog-actions,\n  md-dialog-container,\n  md-dialog-content,\n  md-divider,\n  md-grid-list,\n  md-grid-tile,\n  md-grid-tile-footer,\n  md-grid-tile-header,\n  md-hint,\n  md-icon,\n  md-ink-bar,\n  md-list,\n  md-list-item,\n  md-menu,\n  md-nav-list,\n  md-option,\n  md-placeholder,\n  md-progress-bar,\n  md-progress-circle,\n  md-pseudo-checkbox,\n  md-radio-button,\n  md-radio-group,\n  md-select,\n  md-sidenav,\n  md-sidenav-container,\n  md-slider,\n  md-spinner,\n  md-tab,\n  md-tab-body,\n  md-tab-header,\n  md-tab-group,\n  md-toolbar";
	/** Directive that enforces that the `mat-` prefix cannot be used. */
	var MatPrefixRejector = (function () {
	    function MatPrefixRejector(isCompatibilityMode) {
	        if (!isCompatibilityMode) {
	            throw Error('The "mat-" prefix cannot be used out of ng-material v1 compatibility mode.');
	        }
	    }
	    MatPrefixRejector = __decorate$2([
	        _angular_core.Directive({ selector: MAT_ELEMENTS_SELECTOR }),
	        __param(0, _angular_core.Optional()),
	        __param(0, _angular_core.Inject(MATERIAL_COMPATIBILITY_MODE)), 
	        __metadata$2('design:paramtypes', [Boolean])
	    ], MatPrefixRejector);
	    return MatPrefixRejector;
	}());
	/** Directive that enforces that the `md-` prefix cannot be used. */
	var MdPrefixRejector = (function () {
	    function MdPrefixRejector(isCompatibilityMode) {
	        if (isCompatibilityMode) {
	            throw Error('The "md-" prefix cannot be used in ng-material v1 compatibility mode.');
	        }
	    }
	    MdPrefixRejector = __decorate$2([
	        _angular_core.Directive({ selector: MD_ELEMENTS_SELECTOR }),
	        __param(0, _angular_core.Optional()),
	        __param(0, _angular_core.Inject(MATERIAL_COMPATIBILITY_MODE)), 
	        __metadata$2('design:paramtypes', [Boolean])
	    ], MdPrefixRejector);
	    return MdPrefixRejector;
	}());
	/**
	 * Module that enforces the default compatibility mode settings. When this module is loaded
	 * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if
	 * there are any uses of the `mat-` prefix.
	 */
	var CompatibilityModule = (function () {
	    function CompatibilityModule() {
	    }
	    CompatibilityModule.forRoot = function () {
	        return {
	            ngModule: CompatibilityModule,
	            providers: [],
	        };
	    };
	    CompatibilityModule = __decorate$2([
	        _angular_core.NgModule({
	            declarations: [MatPrefixRejector, MdPrefixRejector],
	            exports: [MatPrefixRejector, MdPrefixRejector],
	        }), 
	        __metadata$2('design:paramtypes', [])
	    ], CompatibilityModule);
	    return CompatibilityModule;
	}());
	/**
	 * Module that enforces "no-conflict" compatibility mode settings. When this module is loaded,
	 * it will throw an error if there are any uses of the `md-` prefix.
	 */
	var NoConflictStyleCompatibilityMode = (function () {
	    function NoConflictStyleCompatibilityMode() {
	    }
	    NoConflictStyleCompatibilityMode = __decorate$2([
	        _angular_core.NgModule({
	            providers: [{
	                    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,
	                }],
	        }), 
	        __metadata$2('design:paramtypes', [])
	    ], NoConflictStyleCompatibilityMode);
	    return NoConflictStyleCompatibilityMode;
	}());
	
	var __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$1 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Shared directive to count lines inside a text area, such as a list item.
	 * Line elements can be extracted with a @ContentChildren(MdLine) query, then
	 * counted by checking the query list's length.
	 */
	var MdLine = (function () {
	    function MdLine() {
	    }
	    MdLine = __decorate$1([
	        _angular_core.Directive({
	            selector: '[md-line], [mat-line]',
	            host: {
	                '[class.mat-line]': 'true'
	            }
	        }), 
	        __metadata$1('design:paramtypes', [])
	    ], MdLine);
	    return MdLine;
	}());
	/**
	 * Helper that takes a query list of lines and sets the correct class on the host.
	 * @docs-private
	 */
	var MdLineSetter = (function () {
	    function MdLineSetter(_lines, _renderer, _element) {
	        var _this = this;
	        this._lines = _lines;
	        this._renderer = _renderer;
	        this._element = _element;
	        this._setLineClass(this._lines.length);
	        this._lines.changes.subscribe(function () {
	            _this._setLineClass(_this._lines.length);
	        });
	    }
	    MdLineSetter.prototype._setLineClass = function (count) {
	        this._resetClasses();
	        if (count === 2 || count === 3) {
	            this._setClass("mat-" + count + "-line", true);
	        }
	        else if (count > 3) {
	            this._setClass("mat-multi-line", true);
	        }
	    };
	    MdLineSetter.prototype._resetClasses = function () {
	        this._setClass('mat-2-line', false);
	        this._setClass('mat-3-line', false);
	        this._setClass('mat-multi-line', false);
	    };
	    MdLineSetter.prototype._setClass = function (className, bool) {
	        this._renderer.setElementClass(this._element.nativeElement, className, bool);
	    };
	    return MdLineSetter;
	}());
	var MdLineModule = (function () {
	    function MdLineModule() {
	    }
	    MdLineModule = __decorate$1([
	        _angular_core.NgModule({
	            imports: [CompatibilityModule],
	            exports: [MdLine, CompatibilityModule],
	            declarations: [MdLine],
	        }), 
	        __metadata$1('design:paramtypes', [])
	    ], MdLineModule);
	    return MdLineModule;
	}());
	
	var __decorate$3 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$3 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Directive to listen for changes of direction of part of the DOM.
	 *
	 * Applications should use this directive instead of the native attribute so that Material
	 * components can listen on changes of direction.
	 */
	var Dir = (function () {
	    function Dir() {
	        /** Layout direction of the element. */
	        this._dir = 'ltr';
	        /** Event emitted when the direction changes. */
	        this.dirChange = new _angular_core.EventEmitter();
	    }
	    Object.defineProperty(Dir.prototype, "dir", {
	        /** @docs-private */
	        get: function () {
	            return this._dir;
	        },
	        set: function (v) {
	            var old = this._dir;
	            this._dir = v;
	            if (old != this._dir) {
	                this.dirChange.emit();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Dir.prototype, "value", {
	        /** Current layout direction of the element. */
	        get: function () { return this.dir; },
	        set: function (v) { this.dir = v; },
	        enumerable: true,
	        configurable: true
	    });
	    __decorate$3([
	        _angular_core.Input('dir'), 
	        __metadata$3('design:type', String)
	    ], Dir.prototype, "_dir", void 0);
	    __decorate$3([
	        _angular_core.Output(), 
	        __metadata$3('design:type', Object)
	    ], Dir.prototype, "dirChange", void 0);
	    __decorate$3([
	        _angular_core.HostBinding('attr.dir'), 
	        __metadata$3('design:type', String)
	    ], Dir.prototype, "dir", null);
	    Dir = __decorate$3([
	        _angular_core.Directive({
	            selector: '[dir]',
	            // TODO(hansl): maybe `$implicit` isn't the best option here, but for now that's the best we got.
	            exportAs: '$implicit'
	        }), 
	        __metadata$3('design:paramtypes', [])
	    ], Dir);
	    return Dir;
	}());
	var RtlModule = (function () {
	    function RtlModule() {
	    }
	    /** @deprecated */
	    RtlModule.forRoot = function () {
	        return {
	            ngModule: RtlModule,
	            providers: []
	        };
	    };
	    RtlModule = __decorate$3([
	        _angular_core.NgModule({
	            exports: [Dir],
	            declarations: [Dir]
	        }), 
	        __metadata$3('design:paramtypes', [])
	    ], RtlModule);
	    return RtlModule;
	}());
	
	var __decorate$4 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$4 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Directive that triggers a callback whenever the content of
	 * its associated element has changed.
	 */
	var ObserveContent = (function () {
	    function ObserveContent(_elementRef) {
	        this._elementRef = _elementRef;
	        /** Event emitted for each change in the element's content. */
	        this.event = new _angular_core.EventEmitter();
	    }
	    ObserveContent.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        this._observer = new MutationObserver(function (mutations) { return mutations.forEach(function () { return _this.event.emit(); }); });
	        this._observer.observe(this._elementRef.nativeElement, {
	            characterData: true,
	            childList: true,
	            subtree: true
	        });
	    };
	    ObserveContent.prototype.ngOnDestroy = function () {
	        if (this._observer) {
	            this._observer.disconnect();
	        }
	    };
	    __decorate$4([
	        _angular_core.Output('cdkObserveContent'), 
	        __metadata$4('design:type', Object)
	    ], ObserveContent.prototype, "event", void 0);
	    ObserveContent = __decorate$4([
	        _angular_core.Directive({
	            selector: '[cdkObserveContent]'
	        }), 
	        __metadata$4('design:paramtypes', [_angular_core.ElementRef])
	    ], ObserveContent);
	    return ObserveContent;
	}());
	var ObserveContentModule = (function () {
	    function ObserveContentModule() {
	    }
	    /** @deprecated */
	    ObserveContentModule.forRoot = function () {
	        return {
	            ngModule: ObserveContentModule,
	            providers: []
	        };
	    };
	    ObserveContentModule = __decorate$4([
	        _angular_core.NgModule({
	            exports: [ObserveContent],
	            declarations: [ObserveContent]
	        }), 
	        __metadata$4('design:paramtypes', [])
	    ], ObserveContentModule);
	    return ObserveContentModule;
	}());
	
	// Due to a bug in the ChromeDriver, Angular keyboard events are not triggered by `sendKeys`
	// during E2E tests when using dot notation such as `(keydown.rightArrow)`. To get around this,
	// we are temporarily using a single (keydown) handler.
	// See: https://github.com/angular/angular/issues/9419
	var UP_ARROW = 38;
	var DOWN_ARROW = 40;
	var RIGHT_ARROW = 39;
	var LEFT_ARROW = 37;
	var PAGE_UP = 33;
	var PAGE_DOWN = 34;
	var HOME = 36;
	var END = 35;
	var ENTER = 13;
	var SPACE = 32;
	var TAB = 9;
	var ESCAPE = 27;
	var BACKSPACE = 8;
	var DELETE = 46;
	
	/** Coerces a data-bound value (typically a string) to a boolean. */
	function coerceBooleanProperty(value) {
	    return value != null && "" + value !== 'false';
	}
	
	/** Fade-in speed in pixels per second. Can be modified with the speedFactor option. */
	var RIPPLE_SPEED_PX_PER_SECOND = 170;
	/** Fade-out speed for the ripples in milliseconds. This can't be modified by the speedFactor. */
	var RIPPLE_FADE_OUT_DURATION = 600;
	/**
	 * Returns the distance from the point (x, y) to the furthest corner of a rectangle.
	 */
	var distanceToFurthestCorner = function (x, y, rect) {
	    var distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));
	    var distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));
	    return Math.sqrt(distX * distX + distY * distY);
	};
	/**
	 * Helper service that performs DOM manipulations. Not intended to be used outside this module.
	 * The constructor takes a reference to the ripple directive's host element and a map of DOM
	 * event handlers to be installed on the element that triggers ripple animations.
	 * This will eventually become a custom renderer once Angular support exists.
	 * @docs-private
	 */
	var RippleRenderer = (function () {
	    function RippleRenderer(_elementRef, _ngZone, _ruler) {
	        this._ngZone = _ngZone;
	        this._ruler = _ruler;
	        /** Whether the mouse is currently down or not. */
	        this._isMousedown = false;
	        /** Currently active ripples that will be closed on mouseup. */
	        this._activeRipples = [];
	        /** Events to be registered on the trigger element. */
	        this._triggerEvents = new Map();
	        /** Ripple config for all ripples created by events. */
	        this.rippleConfig = {};
	        /** Whether mouse ripples should be created or not. */
	        this.rippleDisabled = false;
	        this._containerElement = _elementRef.nativeElement;
	        // Specify events which need to be registered on the trigger.
	        this._triggerEvents.set('mousedown', this.onMousedown.bind(this));
	        this._triggerEvents.set('mouseup', this.onMouseup.bind(this));
	        this._triggerEvents.set('mouseleave', this.onMouseLeave.bind(this));
	        // By default use the host element as trigger element.
	        this.setTriggerElement(this._containerElement);
	    }
	    /** Fades in a ripple at the given coordinates. */
	    RippleRenderer.prototype.fadeInRipple = function (pageX, pageY, config) {
	        var _this = this;
	        if (config === void 0) { config = {}; }
	        var containerRect = this._containerElement.getBoundingClientRect();
	        if (config.centered) {
	            pageX = containerRect.left + containerRect.width / 2;
	            pageY = containerRect.top + containerRect.height / 2;
	        }
	        else {
	            // Subtract scroll values from the coordinates because calculations below
	            // are always relative to the viewport rectangle.
	            var scrollPosition = this._ruler.getViewportScrollPosition();
	            pageX -= scrollPosition.left;
	            pageY -= scrollPosition.top;
	        }
	        var radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);
	        var duration = 1 / (config.speedFactor || 1) * (radius / RIPPLE_SPEED_PX_PER_SECOND);
	        var offsetX = pageX - containerRect.left;
	        var offsetY = pageY - containerRect.top;
	        var ripple = document.createElement('div');
	        ripple.classList.add('mat-ripple-element');
	        ripple.style.left = (offsetX - radius) + "px";
	        ripple.style.top = (offsetY - radius) + "px";
	        ripple.style.height = radius * 2 + "px";
	        ripple.style.width = radius * 2 + "px";
	        // If the color is not set, the default CSS color will be used.
	        ripple.style.backgroundColor = config.color;
	        ripple.style.transitionDuration = duration + "s";
	        this._containerElement.appendChild(ripple);
	        // By default the browser does not recalculate the styles of dynamically created
	        // ripple elements. This is critical because then the `scale` would not animate properly.
	        this._enforceStyleRecalculation(ripple);
	        ripple.style.transform = 'scale(1)';
	        // Wait for the ripple to be faded in. Once it's faded in, the ripple can be hidden immediately
	        // if the mouse is released.
	        this.runTimeoutOutsideZone(function () {
	            _this._isMousedown ? _this._activeRipples.push(ripple) : _this.fadeOutRipple(ripple);
	        }, duration * 1000);
	    };
	    /** Fades out a ripple element. */
	    RippleRenderer.prototype.fadeOutRipple = function (ripple) {
	        ripple.style.transitionDuration = RIPPLE_FADE_OUT_DURATION + "ms";
	        ripple.style.opacity = '0';
	        // Once the ripple faded out, the ripple can be safely removed from the DOM.
	        this.runTimeoutOutsideZone(function () {
	            ripple.parentNode.removeChild(ripple);
	        }, RIPPLE_FADE_OUT_DURATION);
	    };
	    /** Sets the trigger element and registers the mouse events. */
	    RippleRenderer.prototype.setTriggerElement = function (element) {
	        var _this = this;
	        // Remove all previously register event listeners from the trigger element.
	        if (this._triggerElement) {
	            this._triggerEvents.forEach(function (fn, type) { return _this._triggerElement.removeEventListener(type, fn); });
	        }
	        if (element) {
	            // If the element is not null, register all event listeners on the trigger element.
	            this._triggerEvents.forEach(function (fn, type) { return element.addEventListener(type, fn); });
	        }
	        this._triggerElement = element;
	    };
	    /** Listener being called on mousedown event. */
	    RippleRenderer.prototype.onMousedown = function (event) {
	        if (this.rippleDisabled) {
	            return;
	        }
	        this._isMousedown = true;
	        this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);
	    };
	    /** Listener being called on mouseup event. */
	    RippleRenderer.prototype.onMouseup = function () {
	        var _this = this;
	        this._isMousedown = false;
	        this._activeRipples.forEach(function (ripple) { return _this.fadeOutRipple(ripple); });
	        this._activeRipples = [];
	    };
	    /** Listener being called on mouseleave event. */
	    RippleRenderer.prototype.onMouseLeave = function () {
	        if (this._isMousedown) {
	            this.onMouseup();
	        }
	    };
	    /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */
	    RippleRenderer.prototype.runTimeoutOutsideZone = function (fn, delay) {
	        if (delay === void 0) { delay = 0; }
	        this._ngZone.runOutsideAngular(function () { return setTimeout(fn, delay); });
	    };
	    /** Enforces a style recalculation of a DOM element by computing its styles. */
	    // TODO(devversion): Move into global utility function.
	    RippleRenderer.prototype._enforceStyleRecalculation = function (element) {
	        // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.
	        // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.
	        // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a
	        window.getComputedStyle(element).getPropertyValue('opacity');
	    };
	    return RippleRenderer;
	}());
	
	var __decorate$8 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$8 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/** Time in ms to throttle the scrolling events by default. */
	var DEFAULT_SCROLL_TIME = 20;
	/**
	 * Service contained all registered Scrollable references and emits an event when any one of the
	 * Scrollable references emit a scrolled event.
	 */
	var ScrollDispatcher = (function () {
	    function ScrollDispatcher() {
	        var _this = this;
	        /** Subject for notifying that a registered scrollable reference element has been scrolled. */
	        this._scrolled = new rxjs_Subject.Subject();
	        /**
	         * Map of all the scrollable references that are registered with the service and their
	         * scroll event subscriptions.
	         */
	        this.scrollableReferences = new Map();
	        // By default, notify a scroll event when the document is scrolled or the window is resized.
	        rxjs_Observable.Observable.fromEvent(window.document, 'scroll').subscribe(function () { return _this._notify(); });
	        rxjs_Observable.Observable.fromEvent(window, 'resize').subscribe(function () { return _this._notify(); });
	    }
	    /**
	     * Registers a Scrollable with the service and listens for its scrolled events. When the
	     * scrollable is scrolled, the service emits the event in its scrolled observable.
	     *
	     * @param scrollable Scrollable instance to be registered.
	     */
	    ScrollDispatcher.prototype.register = function (scrollable) {
	        var _this = this;
	        var scrollSubscription = scrollable.elementScrolled().subscribe(function () { return _this._notify(); });
	        this.scrollableReferences.set(scrollable, scrollSubscription);
	    };
	    /**
	     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.
	     *
	     * @param scrollable Scrollable instance to be deregistered.
	     */
	    ScrollDispatcher.prototype.deregister = function (scrollable) {
	        this.scrollableReferences.get(scrollable).unsubscribe();
	        this.scrollableReferences.delete(scrollable);
	    };
	    /**
	     * Returns an observable that emits an event whenever any of the registered Scrollable
	     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms
	     * to override the default "throttle" time.
	     */
	    ScrollDispatcher.prototype.scrolled = function (auditTimeInMs) {
	        if (auditTimeInMs === void 0) { auditTimeInMs = DEFAULT_SCROLL_TIME; }
	        // In the case of a 0ms delay, return the observable without auditTime since it does add
	        // a perceptible delay in processing overhead.
	        if (auditTimeInMs == 0) {
	            return this._scrolled.asObservable();
	        }
	        return this._scrolled.asObservable().auditTime(auditTimeInMs);
	    };
	    /** Returns all registered Scrollables that contain the provided element. */
	    ScrollDispatcher.prototype.getScrollContainers = function (elementRef) {
	        var _this = this;
	        var scrollingContainers = [];
	        this.scrollableReferences.forEach(function (subscription, scrollable) {
	            if (_this.scrollableContainsElement(scrollable, elementRef)) {
	                scrollingContainers.push(scrollable);
	            }
	        });
	        return scrollingContainers;
	    };
	    /** Returns true if the element is contained within the provided Scrollable. */
	    ScrollDispatcher.prototype.scrollableContainsElement = function (scrollable, elementRef) {
	        var element = elementRef.nativeElement;
	        var scrollableElement = scrollable.getElementRef().nativeElement;
	        // Traverse through the element parents until we reach null, checking if any of the elements
	        // are the scrollable's element.
	        do {
	            if (element == scrollableElement) {
	                return true;
	            }
	        } while (element = element.parentElement);
	    };
	    /** Sends a notification that a scroll event has been fired. */
	    ScrollDispatcher.prototype._notify = function () {
	        this._scrolled.next();
	    };
	    ScrollDispatcher = __decorate$8([
	        _angular_core.Injectable(), 
	        __metadata$8('design:paramtypes', [])
	    ], ScrollDispatcher);
	    return ScrollDispatcher;
	}());
	function SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher) {
	    return parentDispatcher || new ScrollDispatcher();
	}
	var SCROLL_DISPATCHER_PROVIDER = {
	    // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.
	    provide: ScrollDispatcher,
	    deps: [[new _angular_core.Optional(), new _angular_core.SkipSelf(), ScrollDispatcher]],
	    useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY
	};
	
	var __decorate$7 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$7 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Simple utility for getting the bounds of the browser viewport.
	 * @docs-private
	 */
	var ViewportRuler = (function () {
	    function ViewportRuler(scrollDispatcher) {
	        var _this = this;
	        // Initially cache the document rectangle.
	        this._cacheViewportGeometry();
	        // Subscribe to scroll and resize events and update the document rectangle on changes.
	        scrollDispatcher.scrolled().subscribe(function () { return _this._cacheViewportGeometry(); });
	    }
	    /** Gets a ClientRect for the viewport's bounds. */
	    ViewportRuler.prototype.getViewportRect = function (documentRect) {
	        if (documentRect === void 0) { documentRect = this._documentRect; }
	        // Use the document element's bounding rect rather than the window scroll properties
	        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll
	        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different
	        // conceptual viewports. Under most circumstances these viewports are equivalent, but they
	        // can disagree when the page is pinch-zoomed (on devices that support touch).
	        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4
	        // We use the documentElement instead of the body because, by default (without a css reset)
	        // browsers typically give the document body an 8px margin, which is not included in
	        // getBoundingClientRect().
	        var scrollPosition = this.getViewportScrollPosition(documentRect);
	        var height = window.innerHeight;
	        var width = window.innerWidth;
	        return {
	            top: scrollPosition.top,
	            left: scrollPosition.left,
	            bottom: scrollPosition.top + height,
	            right: scrollPosition.left + width,
	            height: height,
	            width: width,
	        };
	    };
	    /**
	     * Gets the (top, left) scroll position of the viewport.
	     * @param documentRect
	     */
	    ViewportRuler.prototype.getViewportScrollPosition = function (documentRect) {
	        if (documentRect === void 0) { documentRect = this._documentRect; }
	        // The top-left-corner of the viewport is determined by the scroll position of the document
	        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about
	        // whether `document.body` or `document.documentElement` is the scrolled element, so reading
	        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of
	        // `document.documentElement` works consistently, where the `top` and `left` values will
	        // equal negative the scroll position.
	        var top = -documentRect.top || document.body.scrollTop || window.scrollY || 0;
	        var left = -documentRect.left || document.body.scrollLeft || window.scrollX || 0;
	        return { top: top, left: left };
	    };
	    /** Caches the latest client rectangle of the document element. */
	    ViewportRuler.prototype._cacheViewportGeometry = function () {
	        this._documentRect = document.documentElement.getBoundingClientRect();
	    };
	    ViewportRuler = __decorate$7([
	        _angular_core.Injectable(), 
	        __metadata$7('design:paramtypes', [ScrollDispatcher])
	    ], ViewportRuler);
	    return ViewportRuler;
	}());
	function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, scrollDispatcher) {
	    return parentRuler || new ViewportRuler(scrollDispatcher);
	}
	var VIEWPORT_RULER_PROVIDER = {
	    // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.
	    provide: ViewportRuler,
	    deps: [[new _angular_core.Optional(), new _angular_core.SkipSelf(), ViewportRuler], ScrollDispatcher],
	    useFactory: VIEWPORT_RULER_PROVIDER_FACTORY
	};
	
	var __decorate$6 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$6 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MdRipple = (function () {
	    function MdRipple(elementRef, ngZone, ruler) {
	        /**
	         * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius
	         * will be the distance from the center of the ripple to the furthest corner of the host element's
	         * bounding rectangle.
	         */
	        this.radius = 0;
	        /**
	         * If set, the normal duration of ripple animations is divided by this value. For example,
	         * setting it to 0.5 will cause the animations to take twice as long.
	         * A changed speedFactor will not modify the fade-out duration of the ripples.
	         */
	        this.speedFactor = 1;
	        this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler);
	    }
	    MdRipple.prototype.ngOnChanges = function (changes) {
	        if (changes['trigger'] && this.trigger) {
	            this._rippleRenderer.setTriggerElement(this.trigger);
	        }
	        this._rippleRenderer.rippleDisabled = this.disabled;
	        this._updateRippleConfig();
	    };
	    MdRipple.prototype.ngOnDestroy = function () {
	        // Set the trigger element to null to cleanup all listeners.
	        this._rippleRenderer.setTriggerElement(null);
	    };
	    /** Launches a manual ripple at the specified position. */
	    MdRipple.prototype.launch = function (pageX, pageY, config) {
	        this._rippleRenderer.fadeInRipple(pageX, pageY, config);
	    };
	    /** Updates the ripple configuration with the input values. */
	    MdRipple.prototype._updateRippleConfig = function () {
	        this._rippleRenderer.rippleConfig = {
	            centered: this.centered,
	            speedFactor: this.speedFactor,
	            radius: this.radius,
	            color: this.color
	        };
	    };
	    __decorate$6([
	        _angular_core.Input('mdRippleTrigger'), 
	        __metadata$6('design:type', Object)
	    ], MdRipple.prototype, "trigger", void 0);
	    __decorate$6([
	        _angular_core.Input('mdRippleCentered'), 
	        __metadata$6('design:type', Boolean)
	    ], MdRipple.prototype, "centered", void 0);
	    __decorate$6([
	        _angular_core.Input('mdRippleDisabled'), 
	        __metadata$6('design:type', Boolean)
	    ], MdRipple.prototype, "disabled", void 0);
	    __decorate$6([
	        _angular_core.Input('mdRippleRadius'), 
	        __metadata$6('design:type', Number)
	    ], MdRipple.prototype, "radius", void 0);
	    __decorate$6([
	        _angular_core.Input('mdRippleSpeedFactor'), 
	        __metadata$6('design:type', Number)
	    ], MdRipple.prototype, "speedFactor", void 0);
	    __decorate$6([
	        _angular_core.Input('mdRippleColor'), 
	        __metadata$6('design:type', String)
	    ], MdRipple.prototype, "color", void 0);
	    __decorate$6([
	        _angular_core.Input('mdRippleUnbounded'), 
	        __metadata$6('design:type', Boolean)
	    ], MdRipple.prototype, "unbounded", void 0);
	    MdRipple = __decorate$6([
	        _angular_core.Directive({
	            selector: '[md-ripple], [mat-ripple]',
	            host: {
	                '[class.mat-ripple]': 'true',
	                '[class.mat-ripple-unbounded]': 'unbounded'
	            }
	        }), 
	        __metadata$6('design:paramtypes', [_angular_core.ElementRef, _angular_core.NgZone, ViewportRuler])
	    ], MdRipple);
	    return MdRipple;
	}());
	var MdRippleModule = (function () {
	    function MdRippleModule() {
	    }
	    /** @deprecated */
	    MdRippleModule.forRoot = function () {
	        return {
	            ngModule: MdRippleModule,
	            providers: []
	        };
	    };
	    MdRippleModule = __decorate$6([
	        _angular_core.NgModule({
	            imports: [CompatibilityModule],
	            exports: [MdRipple, CompatibilityModule],
	            declarations: [MdRipple],
	            providers: [VIEWPORT_RULER_PROVIDER, SCROLL_DISPATCHER_PROVIDER],
	        }), 
	        __metadata$6('design:paramtypes', [])
	    ], MdRippleModule);
	    return MdRippleModule;
	}());
	
	var __decorate$5 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$5 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Option IDs need to be unique across components, so this counter exists outside of
	 * the component definition.
	 */
	var _uniqueIdCounter = 0;
	/** Event object emitted by MdOption when selected. */
	var MdOptionSelectEvent = (function () {
	    function MdOptionSelectEvent(source, isUserInput) {
	        if (isUserInput === void 0) { isUserInput = false; }
	        this.source = source;
	        this.isUserInput = isUserInput;
	    }
	    return MdOptionSelectEvent;
	}());
	/**
	 * Single option inside of a `<md-select>` element.
	 */
	var MdOption = (function () {
	    function MdOption(_element, _renderer) {
	        this._element = _element;
	        this._renderer = _renderer;
	        this._selected = false;
	        this._active = false;
	        /** Whether the option is disabled.  */
	        this._disabled = false;
	        this._id = "md-option-" + _uniqueIdCounter++;
	        /** Event emitted when the option is selected. */
	        this.onSelect = new _angular_core.EventEmitter();
	    }
	    Object.defineProperty(MdOption.prototype, "id", {
	        /** The unique ID of the option. */
	        get: function () { return this._id; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdOption.prototype, "disabled", {
	        /** Whether the option is disabled. */
	        get: function () { return this._disabled; },
	        set: function (value) { this._disabled = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdOption.prototype, "selected", {
	        /** Whether or not the option is currently selected. */
	        get: function () {
	            return this._selected;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdOption.prototype, "active", {
	        /**
	         * Whether or not the option is currently active and ready to be selected.
	         * An active option displays styles as if it is focused, but the
	         * focus is actually retained somewhere else. This comes in handy
	         * for components like autocomplete where focus must remain on the input.
	         */
	        get: function () {
	            return this._active;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdOption.prototype, "viewValue", {
	        /**
	         * The displayed value of the option. It is necessary to show the selected option in the
	         * select's trigger.
	         */
	        get: function () {
	            // TODO(kara): Add input property alternative for node envs.
	            return this._getHostElement().textContent.trim();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Selects the option. */
	    MdOption.prototype.select = function () {
	        this._selected = true;
	        this.onSelect.emit(new MdOptionSelectEvent(this, false));
	    };
	    /** Deselects the option. */
	    MdOption.prototype.deselect = function () {
	        this._selected = false;
	    };
	    /** Sets focus onto this option. */
	    MdOption.prototype.focus = function () {
	        this._renderer.invokeElementMethod(this._getHostElement(), 'focus');
	    };
	    /**
	     * This method sets display styles on the option to make it appear
	     * active. This is used by the ActiveDescendantKeyManager so key
	     * events will display the proper options as active on arrow key events.
	     */
	    MdOption.prototype.setActiveStyles = function () {
	        var _this = this;
	        Promise.resolve(null).then(function () { return _this._active = true; });
	    };
	    /**
	     * This method removes display styles on the option that made it appear
	     * active. This is used by the ActiveDescendantKeyManager so key
	     * events will display the proper options as active on arrow key events.
	     */
	    MdOption.prototype.setInactiveStyles = function () {
	        var _this = this;
	        Promise.resolve(null).then(function () { return _this._active = false; });
	    };
	    /** Ensures the option is selected when activated from the keyboard. */
	    MdOption.prototype._handleKeydown = function (event) {
	        if (event.keyCode === ENTER || event.keyCode === SPACE) {
	            this._selectViaInteraction();
	        }
	    };
	    /**
	     * Selects the option while indicating the selection came from the user. Used to
	     * determine if the select's view -> model callback should be invoked.
	     */
	    MdOption.prototype._selectViaInteraction = function () {
	        if (!this.disabled) {
	            this._selected = true;
	            this.onSelect.emit(new MdOptionSelectEvent(this, true));
	        }
	    };
	    /** Returns the correct tabindex for the option depending on disabled state. */
	    MdOption.prototype._getTabIndex = function () {
	        return this.disabled ? '-1' : '0';
	    };
	    MdOption.prototype._getHostElement = function () {
	        return this._element.nativeElement;
	    };
	    __decorate$5([
	        _angular_core.Input(), 
	        __metadata$5('design:type', Object)
	    ], MdOption.prototype, "value", void 0);
	    __decorate$5([
	        _angular_core.Input(), 
	        __metadata$5('design:type', Object)
	    ], MdOption.prototype, "disabled", null);
	    __decorate$5([
	        _angular_core.Output(), 
	        __metadata$5('design:type', Object)
	    ], MdOption.prototype, "onSelect", void 0);
	    MdOption = __decorate$5([
	        _angular_core.Component({selector: 'md-option, mat-option',
	            host: {
	                'role': 'option',
	                '[attr.tabindex]': '_getTabIndex()',
	                '[class.mat-selected]': 'selected',
	                '[class.mat-active]': 'active',
	                '[id]': 'id',
	                '[attr.aria-selected]': 'selected.toString()',
	                '[attr.aria-disabled]': 'disabled.toString()',
	                '[class.mat-option-disabled]': 'disabled',
	                '(click)': '_selectViaInteraction()',
	                '(keydown)': '_handleKeydown($event)',
	                '[class.mat-option]': 'true',
	            },
	            template: "<ng-content></ng-content><div class=\"mat-option-ripple\" *ngIf=\"!disabled\" md-ripple [mdRippleTrigger]=\"_getHostElement()\"></div>",
	            encapsulation: _angular_core.ViewEncapsulation.None
	        }), 
	        __metadata$5('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer])
	    ], MdOption);
	    return MdOption;
	}());
	var MdOptionModule = (function () {
	    function MdOptionModule() {
	    }
	    MdOptionModule.forRoot = function () {
	        return {
	            ngModule: MdOptionModule,
	            providers: []
	        };
	    };
	    MdOptionModule = __decorate$5([
	        _angular_core.NgModule({
	            imports: [MdRippleModule, _angular_common.CommonModule],
	            exports: [MdOption],
	            declarations: [MdOption]
	        }), 
	        __metadata$5('design:paramtypes', [])
	    ], MdOptionModule);
	    return MdOptionModule;
	}());
	
	// TODO(kara): Revisit why error messages are not being properly set.
	var __extends$3 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * Wrapper around Error that sets the error message.
	 * @docs-private
	 */
	var MdError = (function (_super) {
	    __extends$3(MdError, _super);
	    function MdError(value) {
	        _super.call(this);
	        this.message = value;
	    }
	    return MdError;
	}(Error));
	
	var __extends$2 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * Exception thrown when attempting to attach a null portal to a host.
	 * @docs-private
	 */
	var NullPortalError = (function (_super) {
	    __extends$2(NullPortalError, _super);
	    function NullPortalError() {
	        _super.call(this, 'Must provide a portal to attach');
	    }
	    return NullPortalError;
	}(MdError));
	/**
	 * Exception thrown when attempting to attach a portal to a host that is already attached.
	 * @docs-private
	 */
	var PortalAlreadyAttachedError = (function (_super) {
	    __extends$2(PortalAlreadyAttachedError, _super);
	    function PortalAlreadyAttachedError() {
	        _super.call(this, 'Host already has a portal attached');
	    }
	    return PortalAlreadyAttachedError;
	}(MdError));
	/**
	 * Exception thrown when attempting to attach a portal to an already-disposed host.
	 * @docs-private
	 */
	var PortalHostAlreadyDisposedError = (function (_super) {
	    __extends$2(PortalHostAlreadyDisposedError, _super);
	    function PortalHostAlreadyDisposedError() {
	        _super.call(this, 'This PortalHost has already been disposed');
	    }
	    return PortalHostAlreadyDisposedError;
	}(MdError));
	/**
	 * Exception thrown when attempting to attach an unknown portal type.
	 * @docs-private
	 */
	var UnknownPortalTypeError = (function (_super) {
	    __extends$2(UnknownPortalTypeError, _super);
	    function UnknownPortalTypeError() {
	        _super.call(this, 'Attempting to attach an unknown Portal type. ' +
	            'BasePortalHost accepts either a ComponentPortal or a TemplatePortal.');
	    }
	    return UnknownPortalTypeError;
	}(MdError));
	/**
	 * Exception thrown when attempting to attach a portal to a null host.
	 * @docs-private
	 */
	var NullPortalHostError = (function (_super) {
	    __extends$2(NullPortalHostError, _super);
	    function NullPortalHostError() {
	        _super.call(this, 'Attempting to attach a portal to a null PortalHost');
	    }
	    return NullPortalHostError;
	}(MdError));
	/**
	 * Exception thrown when attempting to detach a portal that is not attached.
	 * @docs-private
	 */
	var NoPortalAttachedError = (function (_super) {
	    __extends$2(NoPortalAttachedError, _super);
	    function NoPortalAttachedError() {
	        _super.call(this, 'Attempting to detach a portal that is not attached to a host');
	    }
	    return NoPortalAttachedError;
	}(MdError));
	
	var __extends$1 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * A `Portal` is something that you want to render somewhere else.
	 * It can be attach to / detached from a `PortalHost`.
	 */
	var Portal = (function () {
	    function Portal() {
	    }
	    /** Attach this portal to a host. */
	    Portal.prototype.attach = function (host) {
	        if (host == null) {
	            throw new NullPortalHostError();
	        }
	        if (host.hasAttached()) {
	            throw new PortalAlreadyAttachedError();
	        }
	        this._attachedHost = host;
	        return host.attach(this);
	    };
	    /** Detach this portal from its host */
	    Portal.prototype.detach = function () {
	        var host = this._attachedHost;
	        if (host == null) {
	            throw new NoPortalAttachedError();
	        }
	        this._attachedHost = null;
	        return host.detach();
	    };
	    Object.defineProperty(Portal.prototype, "isAttached", {
	        /** Whether this portal is attached to a host. */
	        get: function () {
	            return this._attachedHost != null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Sets the PortalHost reference without performing `attach()`. This is used directly by
	     * the PortalHost when it is performing an `attach()` or `detach()`.
	     */
	    Portal.prototype.setAttachedHost = function (host) {
	        this._attachedHost = host;
	    };
	    return Portal;
	}());
	/**
	 * A `ComponentPortal` is a portal that instantiates some Component upon attachment.
	 */
	var ComponentPortal = (function (_super) {
	    __extends$1(ComponentPortal, _super);
	    function ComponentPortal(component, viewContainerRef, injector) {
	        if (viewContainerRef === void 0) { viewContainerRef = null; }
	        if (injector === void 0) { injector = null; }
	        _super.call(this);
	        this.component = component;
	        this.viewContainerRef = viewContainerRef;
	        this.injector = injector;
	    }
	    return ComponentPortal;
	}(Portal));
	/**
	 * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).
	 */
	var TemplatePortal = (function (_super) {
	    __extends$1(TemplatePortal, _super);
	    function TemplatePortal(template, viewContainerRef) {
	        _super.call(this);
	        /**
	         * Additional locals for the instantiated embedded view.
	         * These locals can be seen as "exports" for the template, such as how ngFor has
	         * index / event / odd.
	         * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html
	         */
	        this.locals = new Map();
	        this.templateRef = template;
	        this.viewContainerRef = viewContainerRef;
	    }
	    Object.defineProperty(TemplatePortal.prototype, "origin", {
	        get: function () {
	            return this.templateRef.elementRef;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TemplatePortal.prototype.attach = function (host, locals) {
	        this.locals = locals == null ? new Map() : locals;
	        return _super.prototype.attach.call(this, host);
	    };
	    TemplatePortal.prototype.detach = function () {
	        this.locals = new Map();
	        return _super.prototype.detach.call(this);
	    };
	    return TemplatePortal;
	}(Portal));
	/**
	 * Partial implementation of PortalHost that only deals with attaching either a
	 * ComponentPortal or a TemplatePortal.
	 */
	var BasePortalHost = (function () {
	    function BasePortalHost() {
	        /** Whether this host has already been permanently disposed. */
	        this._isDisposed = false;
	    }
	    /** Whether this host has an attached portal. */
	    BasePortalHost.prototype.hasAttached = function () {
	        return this._attachedPortal != null;
	    };
	    BasePortalHost.prototype.attach = function (portal) {
	        if (portal == null) {
	            throw new NullPortalError();
	        }
	        if (this.hasAttached()) {
	            throw new PortalAlreadyAttachedError();
	        }
	        if (this._isDisposed) {
	            throw new PortalHostAlreadyDisposedError();
	        }
	        if (portal instanceof ComponentPortal) {
	            this._attachedPortal = portal;
	            return this.attachComponentPortal(portal);
	        }
	        else if (portal instanceof TemplatePortal) {
	            this._attachedPortal = portal;
	            return this.attachTemplatePortal(portal);
	        }
	        throw new UnknownPortalTypeError();
	    };
	    BasePortalHost.prototype.detach = function () {
	        if (this._attachedPortal) {
	            this._attachedPortal.setAttachedHost(null);
	        }
	        this._attachedPortal = null;
	        if (this._disposeFn != null) {
	            this._disposeFn();
	            this._disposeFn = null;
	        }
	    };
	    BasePortalHost.prototype.dispose = function () {
	        if (this.hasAttached()) {
	            this.detach();
	        }
	        this._isDisposed = true;
	    };
	    BasePortalHost.prototype.setDisposeFn = function (fn) {
	        this._disposeFn = fn;
	    };
	    return BasePortalHost;
	}());
	
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate$9 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$9 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,
	 * the directive instance itself can be attached to a host, enabling declarative use of portals.
	 *
	 * Usage:
	 * <template portal #greeting>
	 *   <p> Hello {{name}} </p>
	 * </template>
	 */
	var TemplatePortalDirective = (function (_super) {
	    __extends(TemplatePortalDirective, _super);
	    function TemplatePortalDirective(templateRef, viewContainerRef) {
	        _super.call(this, templateRef, viewContainerRef);
	    }
	    TemplatePortalDirective = __decorate$9([
	        _angular_core.Directive({
	            selector: '[cdk-portal], [portal]',
	            exportAs: 'cdkPortal',
	        }), 
	        __metadata$9('design:paramtypes', [_angular_core.TemplateRef, _angular_core.ViewContainerRef])
	    ], TemplatePortalDirective);
	    return TemplatePortalDirective;
	}(TemplatePortal));
	/**
	 * Directive version of a PortalHost. Because the directive *is* a PortalHost, portals can be
	 * directly attached to it, enabling declarative use.
	 *
	 * Usage:
	 * <template [cdkPortalHost]="greeting"></template>
	 */
	var PortalHostDirective = (function (_super) {
	    __extends(PortalHostDirective, _super);
	    function PortalHostDirective(_componentFactoryResolver, _viewContainerRef) {
	        _super.call(this);
	        this._componentFactoryResolver = _componentFactoryResolver;
	        this._viewContainerRef = _viewContainerRef;
	    }
	    Object.defineProperty(PortalHostDirective.prototype, "_deprecatedPortal", {
	        /** @deprecated */
	        get: function () { return this.portal; },
	        set: function (v) { this.portal = v; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PortalHostDirective.prototype, "portal", {
	        /** Portal associated with the Portal host. */
	        get: function () {
	            return this._portal;
	        },
	        set: function (p) {
	            if (p) {
	                this._replaceAttachedPortal(p);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    PortalHostDirective.prototype.ngOnDestroy = function () {
	        this.dispose();
	    };
	    /**
	     * Attach the given ComponentPortal to this PortalHost using the ComponentFactoryResolver.
	     *
	     * @param portal Portal to be attached to the portal host.
	     */
	    PortalHostDirective.prototype.attachComponentPortal = function (portal) {
	        portal.setAttachedHost(this);
	        // If the portal specifies an origin, use that as the logical location of the component
	        // in the application tree. Otherwise use the location of this PortalHost.
	        var viewContainerRef = portal.viewContainerRef != null ?
	            portal.viewContainerRef :
	            this._viewContainerRef;
	        var componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);
	        var ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.parentInjector);
	        this.setDisposeFn(function () { return ref.destroy(); });
	        return ref;
	    };
	    /**
	     * Attach the given TemplatePortal to this PortlHost as an embedded View.
	     * @param portal Portal to be attached.
	     */
	    PortalHostDirective.prototype.attachTemplatePortal = function (portal) {
	        var _this = this;
	        portal.setAttachedHost(this);
	        this._viewContainerRef.createEmbeddedView(portal.templateRef);
	        this.setDisposeFn(function () { return _this._viewContainerRef.clear(); });
	        // TODO(jelbourn): return locals from view
	        return new Map();
	    };
	    /** Detaches the currently attached Portal (if there is one) and attaches the given Portal. */
	    PortalHostDirective.prototype._replaceAttachedPortal = function (p) {
	        if (this.hasAttached()) {
	            this.detach();
	        }
	        if (p) {
	            this.attach(p);
	            this._portal = p;
	        }
	    };
	    __decorate$9([
	        _angular_core.Input('portalHost'), 
	        __metadata$9('design:type', Object)
	    ], PortalHostDirective.prototype, "_deprecatedPortal", null);
	    PortalHostDirective = __decorate$9([
	        _angular_core.Directive({
	            selector: '[cdkPortalHost], [portalHost]',
	            inputs: ['portal: cdkPortalHost']
	        }), 
	        __metadata$9('design:paramtypes', [_angular_core.ComponentFactoryResolver, _angular_core.ViewContainerRef])
	    ], PortalHostDirective);
	    return PortalHostDirective;
	}(BasePortalHost));
	var PortalModule = (function () {
	    function PortalModule() {
	    }
	    /** @deprecated */
	    PortalModule.forRoot = function () {
	        return {
	            ngModule: PortalModule,
	            providers: []
	        };
	    };
	    PortalModule = __decorate$9([
	        _angular_core.NgModule({
	            exports: [TemplatePortalDirective, PortalHostDirective],
	            declarations: [TemplatePortalDirective, PortalHostDirective],
	        }), 
	        __metadata$9('design:paramtypes', [])
	    ], PortalModule);
	    return PortalModule;
	}());
	
	/**
	 * OverlayState is a bag of values for either the initial configuration or current state of an
	 * overlay.
	 */
	var OverlayState = (function () {
	    function OverlayState() {
	        /** Whether the overlay has a backdrop. */
	        this.hasBackdrop = false;
	        /** Custom class to add to the backdrop **/
	        this.backdropClass = 'cdk-overlay-dark-backdrop';
	        /** The direction of the text in the overlay panel. */
	        this.direction = 'ltr';
	    }
	    return OverlayState;
	}());
	
	var __extends$4 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular
	 * application context.
	 *
	 * This is the only part of the portal core that directly touches the DOM.
	 */
	var DomPortalHost = (function (_super) {
	    __extends$4(DomPortalHost, _super);
	    function DomPortalHost(_hostDomElement, _componentFactoryResolver, _appRef, _defaultInjector) {
	        _super.call(this);
	        this._hostDomElement = _hostDomElement;
	        this._componentFactoryResolver = _componentFactoryResolver;
	        this._appRef = _appRef;
	        this._defaultInjector = _defaultInjector;
	    }
	    /**
	     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.
	     * @param portal Portal to be attached
	     */
	    DomPortalHost.prototype.attachComponentPortal = function (portal) {
	        var _this = this;
	        var componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);
	        var componentRef;
	        // If the portal specifies a ViewContainerRef, we will use that as the attachment point
	        // for the component (in terms of Angular's component tree, not rendering).
	        // When the ViewContainerRef is missing, we use the factory to create the component directly
	        // and then manually attach the view to the application.
	        if (portal.viewContainerRef) {
	            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.parentInjector);
	            this.setDisposeFn(function () { return componentRef.destroy(); });
	        }
	        else {
	            componentRef = componentFactory.create(portal.injector || this._defaultInjector);
	            this._appRef.attachView(componentRef.hostView);
	            this.setDisposeFn(function () {
	                _this._appRef.detachView(componentRef.hostView);
	                componentRef.destroy();
	            });
	        }
	        // At this point the component has been instantiated, so we move it to the location in the DOM
	        // where we want it to be rendered.
	        this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));
	        return componentRef;
	    };
	    /**
	     * Attaches a template portal to the DOM as an embedded view.
	     * @param portal Portal to be attached.
	     */
	    DomPortalHost.prototype.attachTemplatePortal = function (portal) {
	        var _this = this;
	        var viewContainer = portal.viewContainerRef;
	        var viewRef = viewContainer.createEmbeddedView(portal.templateRef);
	        // The method `createEmbeddedView` will add the view as a child of the viewContainer.
	        // But for the DomPortalHost the view can be added everywhere in the DOM (e.g Overlay Container)
	        // To move the view to the specified host element. We just re-append the existing root nodes.
	        viewRef.rootNodes.forEach(function (rootNode) { return _this._hostDomElement.appendChild(rootNode); });
	        this.setDisposeFn((function () {
	            var index = viewContainer.indexOf(viewRef);
	            if (index !== -1) {
	                viewContainer.remove(index);
	            }
	        }));
	        // TODO(jelbourn): Return locals from view.
	        return new Map();
	    };
	    /**
	     * Clears out a portal from the DOM.
	     */
	    DomPortalHost.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	        if (this._hostDomElement.parentNode != null) {
	            this._hostDomElement.parentNode.removeChild(this._hostDomElement);
	        }
	    };
	    /** Gets the root HTMLElement for an instantiated component. */
	    DomPortalHost.prototype._getComponentRootNode = function (componentRef) {
	        return componentRef.hostView.rootNodes[0];
	    };
	    return DomPortalHost;
	}(BasePortalHost));
	
	/**
	 * Reference to an overlay that has been created with the Overlay service.
	 * Used to manipulate or dispose of said overlay.
	 */
	var OverlayRef = (function () {
	    function OverlayRef(_portalHost, _pane, _state, _ngZone) {
	        this._portalHost = _portalHost;
	        this._pane = _pane;
	        this._state = _state;
	        this._ngZone = _ngZone;
	        this._backdropElement = null;
	        this._backdropClick = new rxjs_Subject.Subject();
	    }
	    Object.defineProperty(OverlayRef.prototype, "overlayElement", {
	        /** The overlay's HTML element */
	        get: function () {
	            return this._pane;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Attaches the overlay to a portal instance and adds the backdrop.
	     * @param portal Portal instance to which to attach the overlay.
	     * @returns The portal attachment result.
	     */
	    OverlayRef.prototype.attach = function (portal) {
	        if (this._state.hasBackdrop) {
	            this._attachBackdrop();
	        }
	        var attachResult = this._portalHost.attach(portal);
	        // Update the pane element with the given state configuration.
	        this.updateSize();
	        this.updateDirection();
	        this.updatePosition();
	        // Enable pointer events for the overlay pane element.
	        this._togglePointerEvents(true);
	        return attachResult;
	    };
	    /**
	     * Detaches an overlay from a portal.
	     * @returns Resolves when the overlay has been detached.
	     */
	    OverlayRef.prototype.detach = function () {
	        this._detachBackdrop();
	        // When the overlay is detached, the pane element should disable pointer events.
	        // This is necessary because otherwise the pane element will cover the page and disable
	        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.
	        this._togglePointerEvents(false);
	        return this._portalHost.detach();
	    };
	    /**
	     * Cleans up the overlay from the DOM.
	     */
	    OverlayRef.prototype.dispose = function () {
	        if (this._state.positionStrategy) {
	            this._state.positionStrategy.dispose();
	        }
	        this._detachBackdrop();
	        this._portalHost.dispose();
	    };
	    /**
	     * Checks whether the overlay has been attached.
	     */
	    OverlayRef.prototype.hasAttached = function () {
	        return this._portalHost.hasAttached();
	    };
	    /**
	     * Returns an observable that emits when the backdrop has been clicked.
	     */
	    OverlayRef.prototype.backdropClick = function () {
	        return this._backdropClick.asObservable();
	    };
	    /**
	     * Gets the current state config of the overlay.
	     */
	    OverlayRef.prototype.getState = function () {
	        return this._state;
	    };
	    /** Updates the position of the overlay based on the position strategy. */
	    OverlayRef.prototype.updatePosition = function () {
	        if (this._state.positionStrategy) {
	            this._state.positionStrategy.apply(this._pane);
	        }
	    };
	    /** Updates the text direction of the overlay panel. **/
	    OverlayRef.prototype.updateDirection = function () {
	        this._pane.setAttribute('dir', this._state.direction);
	    };
	    /** Updates the size of the overlay based on the overlay config. */
	    OverlayRef.prototype.updateSize = function () {
	        if (this._state.width || this._state.width === 0) {
	            this._pane.style.width = formatCssUnit(this._state.width);
	        }
	        if (this._state.height || this._state.height === 0) {
	            this._pane.style.height = formatCssUnit(this._state.height);
	        }
	        if (this._state.minWidth || this._state.minWidth === 0) {
	            this._pane.style.minWidth = formatCssUnit(this._state.minWidth);
	        }
	        if (this._state.minHeight || this._state.minHeight === 0) {
	            this._pane.style.minHeight = formatCssUnit(this._state.minHeight);
	        }
	    };
	    /** Toggles the pointer events for the overlay pane element. */
	    OverlayRef.prototype._togglePointerEvents = function (enablePointer) {
	        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';
	    };
	    /** Attaches a backdrop for this overlay. */
	    OverlayRef.prototype._attachBackdrop = function () {
	        var _this = this;
	        this._backdropElement = document.createElement('div');
	        this._backdropElement.classList.add('cdk-overlay-backdrop');
	        this._backdropElement.classList.add(this._state.backdropClass);
	        // Insert the backdrop before the pane in the DOM order,
	        // in order to handle stacked overlays properly.
	        this._pane.parentElement.insertBefore(this._backdropElement, this._pane);
	        // Forward backdrop clicks such that the consumer of the overlay can perform whatever
	        // action desired when such a click occurs (usually closing the overlay).
	        this._backdropElement.addEventListener('click', function () { return _this._backdropClick.next(null); });
	        // Add class to fade-in the backdrop after one frame.
	        requestAnimationFrame(function () {
	            if (_this._backdropElement) {
	                _this._backdropElement.classList.add('cdk-overlay-backdrop-showing');
	            }
	        });
	    };
	    /** Detaches the backdrop (if any) associated with the overlay. */
	    OverlayRef.prototype._detachBackdrop = function () {
	        var _this = this;
	        var backdropToDetach = this._backdropElement;
	        if (backdropToDetach) {
	            var finishDetach_1 = function () {
	                // It may not be attached to anything in certain cases (e.g. unit tests).
	                if (backdropToDetach && backdropToDetach.parentNode) {
	                    backdropToDetach.parentNode.removeChild(backdropToDetach);
	                }
	                // It is possible that a new portal has been attached to this overlay since we started
	                // removing the backdrop. If that is the case, only clear the backdrop reference if it
	                // is still the same instance that we started to remove.
	                if (_this._backdropElement == backdropToDetach) {
	                    _this._backdropElement = null;
	                }
	            };
	            backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');
	            backdropToDetach.classList.remove(this._state.backdropClass);
	            backdropToDetach.addEventListener('transitionend', finishDetach_1);
	            // If the backdrop doesn't have a transition, the `transitionend` event won't fire.
	            // In this case we make it unclickable and we try to remove it after a delay.
	            backdropToDetach.style.pointerEvents = 'none';
	            // Run this outside the Angular zone because there's nothing that Angular cares about.
	            // If it were to run inside the Angular zone, every test that used Overlay would have to be
	            // either async or fakeAsync.
	            this._ngZone.runOutsideAngular(function () {
	                setTimeout(finishDetach_1, 500);
	            });
	        }
	    };
	    return OverlayRef;
	}());
	function formatCssUnit(value) {
	    return typeof value === 'string' ? value : value + "px";
	}
	
	var __decorate$13 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$13 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$2 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	/** The points of the origin element and the overlay element to connect. */
	var ConnectionPositionPair = (function () {
	    function ConnectionPositionPair(origin, overlay) {
	        this.originX = origin.originX;
	        this.originY = origin.originY;
	        this.overlayX = overlay.overlayX;
	        this.overlayY = overlay.overlayY;
	    }
	    return ConnectionPositionPair;
	}());
	/**
	 * Set of properties regarding the position of the origin and overlay relative to the viewport
	 * with respect to the containing Scrollable elements.
	 *
	 * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the
	 * bounds of any one of the strategy's Scrollable's bounding client rectangle.
	 *
	 * The overlay and origin are outside view if there is no overlap between their bounding client
	 * rectangle and any one of the strategy's Scrollable's bounding client rectangle.
	 *
	 *       -----------                    -----------
	 *       | outside |                    | clipped |
	 *       |  view   |              --------------------------
	 *       |         |              |     |         |        |
	 *       ----------               |     -----------        |
	 *  --------------------------    |                        |
	 *  |                        |    |      Scrollable        |
	 *  |                        |    |                        |
	 *  |                        |     --------------------------
	 *  |      Scrollable        |
	 *  |                        |
	 *  --------------------------
	 */
	var ScrollableViewProperties = (function () {
	    function ScrollableViewProperties() {
	    }
	    return ScrollableViewProperties;
	}());
	/** The change event emitted by the strategy when a fallback position is used. */
	var ConnectedOverlayPositionChange = (function () {
	    function ConnectedOverlayPositionChange(connectionPair, scrollableViewProperties) {
	        this.connectionPair = connectionPair;
	        this.scrollableViewProperties = scrollableViewProperties;
	    }
	    ConnectedOverlayPositionChange = __decorate$13([
	        __param$2(1, _angular_core.Optional()), 
	        __metadata$13('design:paramtypes', [ConnectionPositionPair, ScrollableViewProperties])
	    ], ConnectedOverlayPositionChange);
	    return ConnectedOverlayPositionChange;
	}());
	
	/**
	 * A strategy for positioning overlays. Using this strategy, an overlay is given an
	 * implicit position relative some origin element. The relative position is defined in terms of
	 * a point on the origin element that is connected to a point on the overlay element. For example,
	 * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner
	 * of the overlay.
	 */
	var ConnectedPositionStrategy = (function () {
	    function ConnectedPositionStrategy(_connectedTo, _originPos, _overlayPos, _viewportRuler) {
	        this._connectedTo = _connectedTo;
	        this._originPos = _originPos;
	        this._overlayPos = _overlayPos;
	        this._viewportRuler = _viewportRuler;
	        this._dir = 'ltr';
	        /** The offset in pixels for the overlay connection point on the x-axis */
	        this._offsetX = 0;
	        /** The offset in pixels for the overlay connection point on the y-axis */
	        this._offsetY = 0;
	        /** The Scrollable containers used to check scrollable view properties on position change. */
	        this.scrollables = [];
	        /** Ordered list of preferred positions, from most to least desirable. */
	        this._preferredPositions = [];
	        this._onPositionChange = new rxjs_Subject.Subject();
	        this._origin = this._connectedTo.nativeElement;
	        this.withFallbackPosition(_originPos, _overlayPos);
	    }
	    Object.defineProperty(ConnectedPositionStrategy.prototype, "_isRtl", {
	        /** Whether the we're dealing with an RTL context */
	        get: function () {
	            return this._dir === 'rtl';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ConnectedPositionStrategy.prototype, "onPositionChange", {
	        /** Emits an event when the connection point changes. */
	        get: function () {
	            return this._onPositionChange.asObservable();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ConnectedPositionStrategy.prototype, "positions", {
	        /** Ordered list of preferred positions, from most to least desirable. */
	        get: function () {
	            return this._preferredPositions;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * To be used to for any cleanup after the element gets destroyed.
	     */
	    ConnectedPositionStrategy.prototype.dispose = function () { };
	    /**
	     * Updates the position of the overlay element, using whichever preferred position relative
	     * to the origin fits on-screen.
	     * @docs-private
	     *
	     * @param element Element to which to apply the CSS styles.
	     * @returns Resolves when the styles have been applied.
	     */
	    ConnectedPositionStrategy.prototype.apply = function (element) {
	        // Cache the overlay pane element in case re-calculating position is necessary
	        this._pane = element;
	        // We need the bounding rects for the origin and the overlay to determine how to position
	        // the overlay relative to the origin.
	        var originRect = this._origin.getBoundingClientRect();
	        var overlayRect = element.getBoundingClientRect();
	        // We use the viewport rect to determine whether a position would go off-screen.
	        var viewportRect = this._viewportRuler.getViewportRect();
	        // Fallback point if none of the fallbacks fit into the viewport.
	        var fallbackPoint = null;
	        // We want to place the overlay in the first of the preferred positions such that the
	        // overlay fits on-screen.
	        for (var _i = 0, _a = this._preferredPositions; _i < _a.length; _i++) {
	            var pos = _a[_i];
	            // Get the (x, y) point of connection on the origin, and then use that to get the
	            // (top, left) coordinate for the overlay at `pos`.
	            var originPoint = this._getOriginConnectionPoint(originRect, pos);
	            var overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, pos);
	            // If the overlay in the calculated position fits on-screen, put it there and we're done.
	            if (overlayPoint.fitsInViewport) {
	                this._setElementPosition(element, overlayPoint);
	                // Save the last connected position in case the position needs to be re-calculated.
	                this._lastConnectedPosition = pos;
	                // Notify that the position has been changed along with its change properties.
	                var scrollableViewProperties = this.getScrollableViewProperties(element);
	                var positionChange = new ConnectedOverlayPositionChange(pos, scrollableViewProperties);
	                this._onPositionChange.next(positionChange);
	                return Promise.resolve(null);
	            }
	            else if (!fallbackPoint || fallbackPoint.visibleArea < overlayPoint.visibleArea) {
	                fallbackPoint = overlayPoint;
	            }
	        }
	        // If none of the preferred positions were in the viewport, take the one
	        // with the largest visible area.
	        this._setElementPosition(element, fallbackPoint);
	        return Promise.resolve(null);
	    };
	    /**
	     * This re-aligns the overlay element with the trigger in its last calculated position,
	     * even if a position higher in the "preferred positions" list would now fit. This
	     * allows one to re-align the panel without changing the orientation of the panel.
	     */
	    ConnectedPositionStrategy.prototype.recalculateLastPosition = function () {
	        var originRect = this._origin.getBoundingClientRect();
	        var overlayRect = this._pane.getBoundingClientRect();
	        var viewportRect = this._viewportRuler.getViewportRect();
	        var originPoint = this._getOriginConnectionPoint(originRect, this._lastConnectedPosition);
	        var overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, this._lastConnectedPosition);
	        this._setElementPosition(this._pane, overlayPoint);
	    };
	    /**
	     * Sets the list of Scrollable containers that host the origin element so that
	     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every
	     * Scrollable must be an ancestor element of the strategy's origin element.
	     */
	    ConnectedPositionStrategy.prototype.withScrollableContainers = function (scrollables) {
	        this.scrollables = scrollables;
	    };
	    /**
	     * Adds a new preferred fallback position.
	     * @param originPos
	     * @param overlayPos
	     */
	    ConnectedPositionStrategy.prototype.withFallbackPosition = function (originPos, overlayPos) {
	        this._preferredPositions.push(new ConnectionPositionPair(originPos, overlayPos));
	        return this;
	    };
	    /**
	     * Sets the layout direction so the overlay's position can be adjusted to match.
	     * @param dir New layout direction.
	     */
	    ConnectedPositionStrategy.prototype.withDirection = function (dir) {
	        this._dir = dir;
	        return this;
	    };
	    /**
	     * Sets an offset for the overlay's connection point on the x-axis
	     * @param offset New offset in the X axis.
	     */
	    ConnectedPositionStrategy.prototype.withOffsetX = function (offset) {
	        this._offsetX = offset;
	        return this;
	    };
	    /**
	     * Sets an offset for the overlay's connection point on the y-axis
	     * @param  offset New offset in the Y axis.
	     */
	    ConnectedPositionStrategy.prototype.withOffsetY = function (offset) {
	        this._offsetY = offset;
	        return this;
	    };
	    /**
	     * Gets the horizontal (x) "start" dimension based on whether the overlay is in an RTL context.
	     * @param rect
	     */
	    ConnectedPositionStrategy.prototype._getStartX = function (rect) {
	        return this._isRtl ? rect.right : rect.left;
	    };
	    /**
	     * Gets the horizontal (x) "end" dimension based on whether the overlay is in an RTL context.
	     * @param rect
	     */
	    ConnectedPositionStrategy.prototype._getEndX = function (rect) {
	        return this._isRtl ? rect.left : rect.right;
	    };
	    /**
	     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.
	     * @param originRect
	     * @param pos
	     */
	    ConnectedPositionStrategy.prototype._getOriginConnectionPoint = function (originRect, pos) {
	        var originStartX = this._getStartX(originRect);
	        var originEndX = this._getEndX(originRect);
	        var x;
	        if (pos.originX == 'center') {
	            x = originStartX + (originRect.width / 2);
	        }
	        else {
	            x = pos.originX == 'start' ? originStartX : originEndX;
	        }
	        var y;
	        if (pos.originY == 'center') {
	            y = originRect.top + (originRect.height / 2);
	        }
	        else {
	            y = pos.originY == 'top' ? originRect.top : originRect.bottom;
	        }
	        return { x: x, y: y };
	    };
	    /**
	     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and
	     * origin point to which the overlay should be connected, as well as how much of the element
	     * would be inside the viewport at that position.
	     */
	    ConnectedPositionStrategy.prototype._getOverlayPoint = function (originPoint, overlayRect, viewportRect, pos) {
	        // Calculate the (overlayStartX, overlayStartY), the start of the potential overlay position
	        // relative to the origin point.
	        var overlayStartX;
	        if (pos.overlayX == 'center') {
	            overlayStartX = -overlayRect.width / 2;
	        }
	        else if (pos.overlayX === 'start') {
	            overlayStartX = this._isRtl ? -overlayRect.width : 0;
	        }
	        else {
	            overlayStartX = this._isRtl ? 0 : -overlayRect.width;
	        }
	        var overlayStartY;
	        if (pos.overlayY == 'center') {
	            overlayStartY = -overlayRect.height / 2;
	        }
	        else {
	            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;
	        }
	        // The (x, y) coordinates of the overlay.
	        var x = originPoint.x + overlayStartX + this._offsetX;
	        var y = originPoint.y + overlayStartY + this._offsetY;
	        // How much the overlay would overflow at this position, on each side.
	        var leftOverflow = 0 - x;
	        var rightOverflow = (x + overlayRect.width) - viewportRect.width;
	        var topOverflow = 0 - y;
	        var bottomOverflow = (y + overlayRect.height) - viewportRect.height;
	        // Visible parts of the element on each axis.
	        var visibleWidth = this._subtractOverflows(overlayRect.width, leftOverflow, rightOverflow);
	        var visibleHeight = this._subtractOverflows(overlayRect.height, topOverflow, bottomOverflow);
	        // The area of the element that's within the viewport.
	        var visibleArea = visibleWidth * visibleHeight;
	        var fitsInViewport = (overlayRect.width * overlayRect.height) === visibleArea;
	        return { x: x, y: y, fitsInViewport: fitsInViewport, visibleArea: visibleArea };
	    };
	    /**
	     * Gets the view properties of the trigger and overlay, including whether they are clipped
	     * or completely outside the view of any of the strategy's scrollables.
	     */
	    ConnectedPositionStrategy.prototype.getScrollableViewProperties = function (overlay) {
	        var _this = this;
	        var originBounds = this._getElementBounds(this._origin);
	        var overlayBounds = this._getElementBounds(overlay);
	        var scrollContainerBounds = this.scrollables.map(function (scrollable) {
	            return _this._getElementBounds(scrollable.getElementRef().nativeElement);
	        });
	        return {
	            isOriginClipped: this.isElementClipped(originBounds, scrollContainerBounds),
	            isOriginOutsideView: this.isElementOutsideView(originBounds, scrollContainerBounds),
	            isOverlayClipped: this.isElementClipped(overlayBounds, scrollContainerBounds),
	            isOverlayOutsideView: this.isElementOutsideView(overlayBounds, scrollContainerBounds),
	        };
	    };
	    /** Whether the element is completely out of the view of any of the containers. */
	    ConnectedPositionStrategy.prototype.isElementOutsideView = function (elementBounds, containersBounds) {
	        return containersBounds.some(function (containerBounds) {
	            var outsideAbove = elementBounds.bottom < containerBounds.top;
	            var outsideBelow = elementBounds.top > containerBounds.bottom;
	            var outsideLeft = elementBounds.right < containerBounds.left;
	            var outsideRight = elementBounds.left > containerBounds.right;
	            return outsideAbove || outsideBelow || outsideLeft || outsideRight;
	        });
	    };
	    /** Whether the element is clipped by any of the containers. */
	    ConnectedPositionStrategy.prototype.isElementClipped = function (elementBounds, containersBounds) {
	        return containersBounds.some(function (containerBounds) {
	            var clippedAbove = elementBounds.top < containerBounds.top;
	            var clippedBelow = elementBounds.bottom > containerBounds.bottom;
	            var clippedLeft = elementBounds.left < containerBounds.left;
	            var clippedRight = elementBounds.right > containerBounds.right;
	            return clippedAbove || clippedBelow || clippedLeft || clippedRight;
	        });
	    };
	    /**
	     * Physically positions the overlay element to the given coordinate.
	     * @param element
	     * @param overlayPoint
	     */
	    ConnectedPositionStrategy.prototype._setElementPosition = function (element, overlayPoint) {
	        element.style.left = overlayPoint.x + 'px';
	        element.style.top = overlayPoint.y + 'px';
	    };
	    /** Returns the bounding positions of the provided element with respect to the viewport. */
	    ConnectedPositionStrategy.prototype._getElementBounds = function (element) {
	        var boundingClientRect = element.getBoundingClientRect();
	        return {
	            top: boundingClientRect.top,
	            right: boundingClientRect.left + boundingClientRect.width,
	            bottom: boundingClientRect.top + boundingClientRect.height,
	            left: boundingClientRect.left
	        };
	    };
	    /**
	     * Subtracts the amount that an element is overflowing on an axis from it's length.
	     */
	    ConnectedPositionStrategy.prototype._subtractOverflows = function (length) {
	        var overflows = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            overflows[_i - 1] = arguments[_i];
	        }
	        return overflows.reduce(function (currentValue, currentOverflow) {
	            return currentValue - Math.max(currentOverflow, 0);
	        }, length);
	    };
	    return ConnectedPositionStrategy;
	}());
	
	/**
	 * A strategy for positioning overlays. Using this strategy, an overlay is given an
	 * explicit position relative to the browser's viewport. We use flexbox, instead of
	 * transforms, in order to avoid issues with subpixel rendering which can cause the
	 * element to become blurry.
	 */
	var GlobalPositionStrategy = (function () {
	    function GlobalPositionStrategy() {
	        this._cssPosition = 'static';
	        this._topOffset = '';
	        this._bottomOffset = '';
	        this._leftOffset = '';
	        this._rightOffset = '';
	        this._alignItems = '';
	        this._justifyContent = '';
	        this._width = '';
	        this._height = '';
	    }
	    /**
	     * Sets the top position of the overlay. Clears any previously set vertical position.
	     * @param value New top offset.
	     */
	    GlobalPositionStrategy.prototype.top = function (value) {
	        this._bottomOffset = '';
	        this._topOffset = value;
	        this._alignItems = 'flex-start';
	        return this;
	    };
	    /**
	     * Sets the left position of the overlay. Clears any previously set horizontal position.
	     * @param value New left offset.
	     */
	    GlobalPositionStrategy.prototype.left = function (value) {
	        this._rightOffset = '';
	        this._leftOffset = value;
	        this._justifyContent = 'flex-start';
	        return this;
	    };
	    /**
	     * Sets the bottom position of the overlay. Clears any previously set vertical position.
	     * @param value New bottom offset.
	     */
	    GlobalPositionStrategy.prototype.bottom = function (value) {
	        this._topOffset = '';
	        this._bottomOffset = value;
	        this._alignItems = 'flex-end';
	        return this;
	    };
	    /**
	     * Sets the right position of the overlay. Clears any previously set horizontal position.
	     * @param value New right offset.
	     */
	    GlobalPositionStrategy.prototype.right = function (value) {
	        this._leftOffset = '';
	        this._rightOffset = value;
	        this._justifyContent = 'flex-end';
	        return this;
	    };
	    /**
	     * Sets the overlay width and clears any previously set width.
	     * @param value New width for the overlay
	     */
	    GlobalPositionStrategy.prototype.width = function (value) {
	        this._width = value;
	        // When the width is 100%, we should reset the `left` and the offset,
	        // in order to ensure that the element is flush against the viewport edge.
	        if (value === '100%') {
	            this.left('0px');
	        }
	        return this;
	    };
	    /**
	     * Sets the overlay height and clears any previously set height.
	     * @param value New height for the overlay
	     */
	    GlobalPositionStrategy.prototype.height = function (value) {
	        this._height = value;
	        // When the height is 100%, we should reset the `top` and the offset,
	        // in order to ensure that the element is flush against the viewport edge.
	        if (value === '100%') {
	            this.top('0px');
	        }
	        return this;
	    };
	    /**
	     * Centers the overlay horizontally with an optional offset.
	     * Clears any previously set horizontal position.
	     *
	     * @param offset Overlay offset from the horizontal center.
	     */
	    GlobalPositionStrategy.prototype.centerHorizontally = function (offset) {
	        if (offset === void 0) { offset = ''; }
	        this.left(offset);
	        this._justifyContent = 'center';
	        return this;
	    };
	    /**
	     * Centers the overlay vertically with an optional offset.
	     * Clears any previously set vertical position.
	     *
	     * @param offset Overlay offset from the vertical center.
	     */
	    GlobalPositionStrategy.prototype.centerVertically = function (offset) {
	        if (offset === void 0) { offset = ''; }
	        this.top(offset);
	        this._alignItems = 'center';
	        return this;
	    };
	    /**
	     * Apply the position to the element.
	     * @docs-private
	     *
	     * @param element Element to which to apply the CSS.
	     * @returns Resolved when the styles have been applied.
	     */
	    GlobalPositionStrategy.prototype.apply = function (element) {
	        if (!this._wrapper) {
	            this._wrapper = document.createElement('div');
	            this._wrapper.classList.add('cdk-global-overlay-wrapper');
	            element.parentNode.insertBefore(this._wrapper, element);
	            this._wrapper.appendChild(element);
	        }
	        var styles = element.style;
	        var parentStyles = element.parentNode.style;
	        styles.position = this._cssPosition;
	        styles.marginTop = this._topOffset;
	        styles.marginLeft = this._leftOffset;
	        styles.marginBottom = this._bottomOffset;
	        styles.marginRight = this._rightOffset;
	        styles.width = this._width;
	        styles.height = this._height;
	        parentStyles.justifyContent = this._justifyContent;
	        parentStyles.alignItems = this._alignItems;
	        return Promise.resolve(null);
	    };
	    /**
	     * Removes the wrapper element from the DOM.
	     */
	    GlobalPositionStrategy.prototype.dispose = function () {
	        if (this._wrapper && this._wrapper.parentNode) {
	            this._wrapper.parentNode.removeChild(this._wrapper);
	            this._wrapper = null;
	        }
	    };
	    return GlobalPositionStrategy;
	}());
	
	var __decorate$12 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$12 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/** Builder for overlay position strategy. */
	var OverlayPositionBuilder = (function () {
	    function OverlayPositionBuilder(_viewportRuler) {
	        this._viewportRuler = _viewportRuler;
	    }
	    /**
	     * Creates a global position strategy.
	     */
	    OverlayPositionBuilder.prototype.global = function () {
	        return new GlobalPositionStrategy();
	    };
	    /**
	     * Creates a relative position strategy.
	     * @param elementRef
	     * @param originPos
	     * @param overlayPos
	     */
	    OverlayPositionBuilder.prototype.connectedTo = function (elementRef, originPos, overlayPos) {
	        return new ConnectedPositionStrategy(elementRef, originPos, overlayPos, this._viewportRuler);
	    };
	    OverlayPositionBuilder = __decorate$12([
	        _angular_core.Injectable(), 
	        __metadata$12('design:paramtypes', [ViewportRuler])
	    ], OverlayPositionBuilder);
	    return OverlayPositionBuilder;
	}());
	
	var __decorate$14 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$14 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * The OverlayContainer is the container in which all overlays will load.
	 * It should be provided in the root component to ensure it is properly shared.
	 */
	var OverlayContainer = (function () {
	    function OverlayContainer() {
	    }
	    /**
	     * This method returns the overlay container element.  It will lazily
	     * create the element the first time  it is called to facilitate using
	     * the container in non-browser environments.
	     * @returns the container element
	     */
	    OverlayContainer.prototype.getContainerElement = function () {
	        if (!this._containerElement) {
	            this._createContainer();
	        }
	        return this._containerElement;
	    };
	    /**
	     * Create the overlay container element, which is simply a div
	     * with the 'cdk-overlay-container' class on the document body.
	     */
	    OverlayContainer.prototype._createContainer = function () {
	        var container = document.createElement('div');
	        container.classList.add('cdk-overlay-container');
	        document.body.appendChild(container);
	        this._containerElement = container;
	    };
	    OverlayContainer = __decorate$14([
	        _angular_core.Injectable(), 
	        __metadata$14('design:paramtypes', [])
	    ], OverlayContainer);
	    return OverlayContainer;
	}());
	function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer) {
	    return parentContainer || new OverlayContainer();
	}
	
	var OVERLAY_CONTAINER_PROVIDER = {
	    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.
	    provide: OverlayContainer,
	    deps: [[new _angular_core.Optional(), new _angular_core.SkipSelf(), OverlayContainer]],
	    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY
	};
	
	var __decorate$11 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$11 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/** Next overlay unique ID. */
	var nextUniqueId = 0;
	/** The default state for newly created overlays. */
	var defaultState = new OverlayState();
	/**
	 * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be
	 * used as a low-level building building block for other components. Dialogs, tooltips, menus,
	 * selects, etc. can all be built using overlays. The service should primarily be used by authors
	 * of re-usable components rather than developers building end-user applications.
	 *
	 * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.
	 */
	var Overlay = (function () {
	    function Overlay(_overlayContainer, _componentFactoryResolver, _positionBuilder, _appRef, _injector, _ngZone) {
	        this._overlayContainer = _overlayContainer;
	        this._componentFactoryResolver = _componentFactoryResolver;
	        this._positionBuilder = _positionBuilder;
	        this._appRef = _appRef;
	        this._injector = _injector;
	        this._ngZone = _ngZone;
	    }
	    /**
	     * Creates an overlay.
	     * @param state State to apply to the overlay.
	     * @returns Reference to the created overlay.
	     */
	    Overlay.prototype.create = function (state$$1) {
	        if (state$$1 === void 0) { state$$1 = defaultState; }
	        return this._createOverlayRef(this._createPaneElement(), state$$1);
	    };
	    /**
	     * Returns a position builder that can be used, via fluent API,
	     * to construct and configure a position strategy.
	     */
	    Overlay.prototype.position = function () {
	        return this._positionBuilder;
	    };
	    /**
	     * Creates the DOM element for an overlay and appends it to the overlay container.
	     * @returns Newly-created pane element
	     */
	    Overlay.prototype._createPaneElement = function () {
	        var pane = document.createElement('div');
	        pane.id = "cdk-overlay-" + nextUniqueId++;
	        pane.classList.add('cdk-overlay-pane');
	        this._overlayContainer.getContainerElement().appendChild(pane);
	        return pane;
	    };
	    /**
	     * Create a DomPortalHost into which the overlay content can be loaded.
	     * @param pane The DOM element to turn into a portal host.
	     * @returns A portal host for the given DOM element.
	     */
	    Overlay.prototype._createPortalHost = function (pane) {
	        return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef, this._injector);
	    };
	    /**
	     * Creates an OverlayRef for an overlay in the given DOM element.
	     * @param pane DOM element for the overlay
	     * @param state
	     */
	    Overlay.prototype._createOverlayRef = function (pane, state$$1) {
	        return new OverlayRef(this._createPortalHost(pane), pane, state$$1, this._ngZone);
	    };
	    Overlay = __decorate$11([
	        _angular_core.Injectable(), 
	        __metadata$11('design:paramtypes', [OverlayContainer, _angular_core.ComponentFactoryResolver, OverlayPositionBuilder, _angular_core.ApplicationRef, _angular_core.Injector, _angular_core.NgZone])
	    ], Overlay);
	    return Overlay;
	}());
	/** Providers for Overlay and its related injectables. */
	var OVERLAY_PROVIDERS = [
	    Overlay,
	    OverlayPositionBuilder,
	    VIEWPORT_RULER_PROVIDER,
	    SCROLL_DISPATCHER_PROVIDER,
	    OVERLAY_CONTAINER_PROVIDER,
	];
	
	var __decorate$15 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$15 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Sends an event when the directive's element is scrolled. Registers itself with the
	 * ScrollDispatcher service to include itself as part of its collection of scrolling events that it
	 * can be listened to through the service.
	 */
	var Scrollable = (function () {
	    function Scrollable(_elementRef, _scroll) {
	        this._elementRef = _elementRef;
	        this._scroll = _scroll;
	    }
	    Scrollable.prototype.ngOnInit = function () {
	        this._scroll.register(this);
	    };
	    Scrollable.prototype.ngOnDestroy = function () {
	        this._scroll.deregister(this);
	    };
	    /**
	     * Returns observable that emits when a scroll event is fired on the host element.
	     */
	    Scrollable.prototype.elementScrolled = function () {
	        return rxjs_Observable.Observable.fromEvent(this._elementRef.nativeElement, 'scroll');
	    };
	    Scrollable.prototype.getElementRef = function () {
	        return this._elementRef;
	    };
	    Scrollable = __decorate$15([
	        _angular_core.Directive({
	            selector: '[cdk-scrollable]'
	        }), 
	        __metadata$15('design:paramtypes', [_angular_core.ElementRef, ScrollDispatcher])
	    ], Scrollable);
	    return Scrollable;
	}());
	
	var __decorate$10 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$10 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$1 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	/** Default set of positions for the overlay. Follows the behavior of a dropdown. */
	var defaultPositionList = [
	    new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),
	    new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),
	];
	/**
	 * Directive applied to an element to make it usable as an origin for an Overlay using a
	 * ConnectedPositionStrategy.
	 */
	var OverlayOrigin = (function () {
	    function OverlayOrigin(elementRef) {
	        this.elementRef = elementRef;
	    }
	    OverlayOrigin = __decorate$10([
	        _angular_core.Directive({
	            selector: '[cdk-overlay-origin], [overlay-origin]',
	            exportAs: 'cdkOverlayOrigin',
	        }), 
	        __metadata$10('design:paramtypes', [_angular_core.ElementRef])
	    ], OverlayOrigin);
	    return OverlayOrigin;
	}());
	/**
	 * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.
	 */
	var ConnectedOverlayDirective = (function () {
	    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.
	    function ConnectedOverlayDirective(_overlay, templateRef, viewContainerRef, _dir) {
	        this._overlay = _overlay;
	        this._dir = _dir;
	        this._open = false;
	        this._hasBackdrop = false;
	        this._offsetX = 0;
	        this._offsetY = 0;
	        /** Event emitted when the backdrop is clicked. */
	        this.backdropClick = new _angular_core.EventEmitter();
	        /** Event emitted when the position has changed. */
	        this.positionChange = new _angular_core.EventEmitter();
	        /** Event emitted when the overlay has been attached. */
	        this.attach = new _angular_core.EventEmitter();
	        /** Event emitted when the overlay has been detached. */
	        this.detach = new _angular_core.EventEmitter();
	        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);
	    }
	    Object.defineProperty(ConnectedOverlayDirective.prototype, "offsetX", {
	        /** The offset in pixels for the overlay connection point on the x-axis */
	        get: function () {
	            return this._offsetX;
	        },
	        set: function (offsetX) {
	            this._offsetX = offsetX;
	            if (this._position) {
	                this._position.withOffsetX(offsetX);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ConnectedOverlayDirective.prototype, "offsetY", {
	        /** The offset in pixels for the overlay connection point on the y-axis */
	        get: function () {
	            return this._offsetY;
	        },
	        set: function (offsetY) {
	            this._offsetY = offsetY;
	            if (this._position) {
	                this._position.withOffsetY(offsetY);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ConnectedOverlayDirective.prototype, "hasBackdrop", {
	        /** Whether or not the overlay should attach a backdrop. */
	        get: function () {
	            return this._hasBackdrop;
	        },
	        set: function (value) {
	            this._hasBackdrop = coerceBooleanProperty(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ConnectedOverlayDirective.prototype, "open", {
	        get: function () {
	            return this._open;
	        },
	        set: function (value) {
	            value ? this._attachOverlay() : this._detachOverlay();
	            this._open = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ConnectedOverlayDirective.prototype, "overlayRef", {
	        /** The associated overlay reference. */
	        get: function () {
	            return this._overlayRef;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ConnectedOverlayDirective.prototype, "dir", {
	        /** The element's layout direction. */
	        get: function () {
	            return this._dir ? this._dir.value : 'ltr';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ConnectedOverlayDirective.prototype.ngOnDestroy = function () {
	        this._destroyOverlay();
	    };
	    /** Creates an overlay */
	    ConnectedOverlayDirective.prototype._createOverlay = function () {
	        if (!this.positions || !this.positions.length) {
	            this.positions = defaultPositionList;
	        }
	        this._overlayRef = this._overlay.create(this._buildConfig());
	    };
	    /** Builds the overlay config based on the directive's inputs */
	    ConnectedOverlayDirective.prototype._buildConfig = function () {
	        var overlayConfig = new OverlayState();
	        if (this.width || this.width === 0) {
	            overlayConfig.width = this.width;
	        }
	        if (this.height || this.height === 0) {
	            overlayConfig.height = this.height;
	        }
	        if (this.minWidth || this.minWidth === 0) {
	            overlayConfig.minWidth = this.minWidth;
	        }
	        if (this.minHeight || this.minHeight === 0) {
	            overlayConfig.minHeight = this.minHeight;
	        }
	        overlayConfig.hasBackdrop = this.hasBackdrop;
	        if (this.backdropClass) {
	            overlayConfig.backdropClass = this.backdropClass;
	        }
	        this._position = this._createPositionStrategy();
	        overlayConfig.positionStrategy = this._position;
	        overlayConfig.direction = this.dir;
	        return overlayConfig;
	    };
	    /** Returns the position strategy of the overlay to be set on the overlay config */
	    ConnectedOverlayDirective.prototype._createPositionStrategy = function () {
	        var pos = this.positions[0];
	        var originPoint = { originX: pos.originX, originY: pos.originY };
	        var overlayPoint = { overlayX: pos.overlayX, overlayY: pos.overlayY };
	        var strategy = this._overlay.position()
	            .connectedTo(this.origin.elementRef, originPoint, overlayPoint)
	            .withDirection(this.dir)
	            .withOffsetX(this.offsetX)
	            .withOffsetY(this.offsetY);
	        this._handlePositionChanges(strategy);
	        return strategy;
	    };
	    ConnectedOverlayDirective.prototype._handlePositionChanges = function (strategy) {
	        var _this = this;
	        for (var i = 1; i < this.positions.length; i++) {
	            strategy.withFallbackPosition({ originX: this.positions[i].originX, originY: this.positions[i].originY }, { overlayX: this.positions[i].overlayX, overlayY: this.positions[i].overlayY });
	        }
	        this._positionSubscription =
	            strategy.onPositionChange.subscribe(function (pos) { return _this.positionChange.emit(pos); });
	    };
	    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */
	    ConnectedOverlayDirective.prototype._attachOverlay = function () {
	        var _this = this;
	        if (!this._overlayRef) {
	            this._createOverlay();
	        }
	        if (!this._overlayRef.hasAttached()) {
	            this._overlayRef.attach(this._templatePortal);
	            this.attach.emit();
	        }
	        if (this.hasBackdrop) {
	            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function () {
	                _this.backdropClick.emit();
	            });
	        }
	    };
	    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */
	    ConnectedOverlayDirective.prototype._detachOverlay = function () {
	        if (this._overlayRef) {
	            this._overlayRef.detach();
	            this.detach.emit();
	        }
	        if (this._backdropSubscription) {
	            this._backdropSubscription.unsubscribe();
	            this._backdropSubscription = null;
	        }
	    };
	    /** Destroys the overlay created by this directive. */
	    ConnectedOverlayDirective.prototype._destroyOverlay = function () {
	        if (this._overlayRef) {
	            this._overlayRef.dispose();
	        }
	        if (this._backdropSubscription) {
	            this._backdropSubscription.unsubscribe();
	        }
	        if (this._positionSubscription) {
	            this._positionSubscription.unsubscribe();
	        }
	    };
	    __decorate$10([
	        _angular_core.Input(), 
	        __metadata$10('design:type', OverlayOrigin)
	    ], ConnectedOverlayDirective.prototype, "origin", void 0);
	    __decorate$10([
	        _angular_core.Input(), 
	        __metadata$10('design:type', Array)
	    ], ConnectedOverlayDirective.prototype, "positions", void 0);
	    __decorate$10([
	        _angular_core.Input(), 
	        __metadata$10('design:type', Number)
	    ], ConnectedOverlayDirective.prototype, "offsetX", null);
	    __decorate$10([
	        _angular_core.Input(), 
	        __metadata$10('design:type', Object)
	    ], ConnectedOverlayDirective.prototype, "offsetY", null);
	    __decorate$10([
	        _angular_core.Input(), 
	        __metadata$10('design:type', Object)
	    ], ConnectedOverlayDirective.prototype, "width", void 0);
	    __decorate$10([
	        _angular_core.Input(), 
	        __metadata$10('design:type', Object)
	    ], ConnectedOverlayDirective.prototype, "height", void 0);
	    __decorate$10([
	        _angular_core.Input(), 
	        __metadata$10('design:type', Object)
	    ], ConnectedOverlayDirective.prototype, "minWidth", void 0);
	    __decorate$10([
	        _angular_core.Input(), 
	        __metadata$10('design:type', Object)
	    ], ConnectedOverlayDirective.prototype, "minHeight", void 0);
	    __decorate$10([
	        _angular_core.Input(), 
	        __metadata$10('design:type', String)
	    ], ConnectedOverlayDirective.prototype, "backdropClass", void 0);
	    __decorate$10([
	        _angular_core.Input(), 
	        __metadata$10('design:type', Object)
	    ], ConnectedOverlayDirective.prototype, "hasBackdrop", null);
	    __decorate$10([
	        _angular_core.Input(), 
	        __metadata$10('design:type', Object)
	    ], ConnectedOverlayDirective.prototype, "open", null);
	    __decorate$10([
	        _angular_core.Output(), 
	        __metadata$10('design:type', Object)
	    ], ConnectedOverlayDirective.prototype, "backdropClick", void 0);
	    __decorate$10([
	        _angular_core.Output(), 
	        __metadata$10('design:type', Object)
	    ], ConnectedOverlayDirective.prototype, "positionChange", void 0);
	    __decorate$10([
	        _angular_core.Output(), 
	        __metadata$10('design:type', Object)
	    ], ConnectedOverlayDirective.prototype, "attach", void 0);
	    __decorate$10([
	        _angular_core.Output(), 
	        __metadata$10('design:type', Object)
	    ], ConnectedOverlayDirective.prototype, "detach", void 0);
	    ConnectedOverlayDirective = __decorate$10([
	        _angular_core.Directive({
	            selector: '[cdk-connected-overlay], [connected-overlay]',
	            exportAs: 'cdkConnectedOverlay'
	        }),
	        __param$1(3, _angular_core.Optional()), 
	        __metadata$10('design:paramtypes', [Overlay, _angular_core.TemplateRef, _angular_core.ViewContainerRef, Dir])
	    ], ConnectedOverlayDirective);
	    return ConnectedOverlayDirective;
	}());
	var OverlayModule = (function () {
	    function OverlayModule() {
	    }
	    /** @deprecated */
	    OverlayModule.forRoot = function () {
	        return {
	            ngModule: OverlayModule,
	            providers: [],
	        };
	    };
	    OverlayModule = __decorate$10([
	        _angular_core.NgModule({
	            imports: [PortalModule],
	            exports: [ConnectedOverlayDirective, OverlayOrigin, Scrollable],
	            declarations: [ConnectedOverlayDirective, OverlayOrigin, Scrollable],
	            providers: [OVERLAY_PROVIDERS],
	        }), 
	        __metadata$10('design:paramtypes', [])
	    ], OverlayModule);
	    return OverlayModule;
	}());
	
	var __decorate$19 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$19 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	// Whether the current platform supports the V8 Break Iterator. The V8 check
	// is necessary to detect all Blink based browsers.
	var hasV8BreakIterator = typeof (window) !== 'undefined' ?
	    (window.Intl && window.Intl.v8BreakIterator) :
	    (typeof (Intl) !== 'undefined' && Intl.v8BreakIterator);
	/**
	 * Service to detect the current platform by comparing the userAgent strings and
	 * checking browser-specific global properties.
	 * @docs-private
	 */
	var Platform = (function () {
	    function Platform() {
	        /** Layout Engines */
	        this.EDGE = /(edge)/i.test(navigator.userAgent);
	        this.TRIDENT = /(msie|trident)/i.test(navigator.userAgent);
	        // EdgeHTML and Trident mock Blink specific things and need to excluded from this check.
	        this.BLINK = !!(window.chrome || hasV8BreakIterator) && !!CSS && !this.EDGE && !this.TRIDENT;
	        // Webkit is part of the userAgent in EdgeHTML Blink and Trident, so we need to
	        // ensure that Webkit runs standalone and is not use as another engines base.
	        this.WEBKIT = /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;
	        /** Browsers and Platform Types */
	        this.IOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
	        // It's difficult to detect the plain Gecko engine, because most of the browsers identify
	        // them self as Gecko-like browsers and modify the userAgent's according to that.
	        // Since we only cover one explicit Firefox case, we can simply check for Firefox
	        // instead of having an unstable check for Gecko.
	        this.FIREFOX = /(firefox|minefield)/i.test(navigator.userAgent);
	        // Trident on mobile adds the android platform to the userAgent to trick detections.
	        this.ANDROID = /android/i.test(navigator.userAgent) && !this.TRIDENT;
	    }
	    Platform = __decorate$19([
	        _angular_core.Injectable(), 
	        __metadata$19('design:paramtypes', [])
	    ], Platform);
	    return Platform;
	}());
	
	var __decorate$18 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$18 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * The InteractivityChecker leans heavily on the ally.js accessibility utilities.
	 * Methods like `isTabbable` are only covering specific edge-cases for the browsers which are
	 * supported.
	 */
	/**
	 * Utility for checking the interactivity of an element, such as whether is is focusable or
	 * tabbable.
	 */
	var InteractivityChecker = (function () {
	    function InteractivityChecker(_platform) {
	        this._platform = _platform;
	    }
	    /**
	     * Gets whether an element is disabled.
	     *
	     * @param element Element to be checked.
	     * @returns Whether the element is disabled.
	     */
	    InteractivityChecker.prototype.isDisabled = function (element) {
	        // This does not capture some cases, such as a non-form control with a disabled attribute or
	        // a form control inside of a disabled form, but should capture the most common cases.
	        return element.hasAttribute('disabled');
	    };
	    /**
	     * Gets whether an element is visible for the purposes of interactivity.
	     *
	     * This will capture states like `display: none` and `visibility: hidden`, but not things like
	     * being clipped by an `overflow: hidden` parent or being outside the viewport.
	     *
	     * @returns Whether the element is visible.
	     */
	    InteractivityChecker.prototype.isVisible = function (element) {
	        return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';
	    };
	    /**
	     * Gets whether an element can be reached via Tab key.
	     * Assumes that the element has already been checked with isFocusable.
	     *
	     * @param element Element to be checked.
	     * @returns Whether the element is tabbable.
	     */
	    InteractivityChecker.prototype.isTabbable = function (element) {
	        var frameElement = getWindow(element).frameElement;
	        if (frameElement) {
	            var frameType = frameElement && frameElement.nodeName.toLowerCase();
	            // Frame elements inherit their tabindex onto all child elements.
	            if (getTabIndexValue(frameElement) === -1) {
	                return false;
	            }
	            // Webkit and Blink consider anything inside of an <object> element as non-tabbable.
	            if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {
	                return false;
	            }
	            // Webkit and Blink disable tabbing to an element inside of an invisible frame.
	            if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {
	                return false;
	            }
	        }
	        var nodeName = element.nodeName.toLowerCase();
	        var tabIndexValue = getTabIndexValue(element);
	        if (element.hasAttribute('contenteditable')) {
	            return tabIndexValue !== -1;
	        }
	        if (nodeName === 'iframe') {
	            // The frames may be tabbable depending on content, but it's not possibly to reliably
	            // investigate the content of the frames.
	            return false;
	        }
	        if (nodeName === 'audio') {
	            if (!element.hasAttribute('controls')) {
	                // By default an <audio> element without the controls enabled is not tabbable.
	                return false;
	            }
	            else if (this._platform.BLINK) {
	                // In Blink <audio controls> elements are always tabbable.
	                return true;
	            }
	        }
	        if (nodeName === 'video') {
	            if (!element.hasAttribute('controls') && this._platform.TRIDENT) {
	                // In Trident a <video> element without the controls enabled is not tabbable.
	                return false;
	            }
	            else if (this._platform.BLINK || this._platform.FIREFOX) {
	                // In Chrome and Firefox <video controls> elements are always tabbable.
	                return true;
	            }
	        }
	        if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {
	            // In all Blink and WebKit based browsers <object> elements are never tabbable.
	            return false;
	        }
	        // In iOS the browser only considers some specific elements as tabbable.
	        if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {
	            return false;
	        }
	        return element.tabIndex >= 0;
	    };
	    /**
	     * Gets whether an element can be focused by the user.
	     *
	     * @param element Element to be checked.
	     * @returns Whether the element is focusable.
	     */
	    InteractivityChecker.prototype.isFocusable = function (element) {
	        // Perform checks in order of left to most expensive.
	        // Again, naive approach that does not capture many edge cases and browser quirks.
	        return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);
	    };
	    InteractivityChecker = __decorate$18([
	        _angular_core.Injectable(), 
	        __metadata$18('design:paramtypes', [Platform])
	    ], InteractivityChecker);
	    return InteractivityChecker;
	}());
	/** Checks whether the specified element has any geometry / rectangles. */
	function hasGeometry(element) {
	    // Use logic from jQuery to check for an invisible element.
	    // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12
	    return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);
	}
	/** Gets whether an element's  */
	function isNativeFormElement(element) {
	    var nodeName = element.nodeName.toLowerCase();
	    return nodeName === 'input' ||
	        nodeName === 'select' ||
	        nodeName === 'button' ||
	        nodeName === 'textarea';
	}
	/** Gets whether an element is an <input type="hidden">. */
	function isHiddenInput(element) {
	    return isInputElement(element) && element.type == 'hidden';
	}
	/** Gets whether an element is an anchor that has an href attribute. */
	function isAnchorWithHref(element) {
	    return isAnchorElement(element) && element.hasAttribute('href');
	}
	/** Gets whether an element is an input element. */
	function isInputElement(element) {
	    return element.nodeName == 'input';
	}
	/** Gets whether an element is an anchor element. */
	function isAnchorElement(element) {
	    return element.nodeName.toLowerCase() == 'a';
	}
	/** Gets whether an element has a valid tabindex. */
	function hasValidTabIndex(element) {
	    if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {
	        return false;
	    }
	    var tabIndex = element.getAttribute('tabindex');
	    // IE11 parses tabindex="" as the value "-32768"
	    if (tabIndex == '-32768') {
	        return false;
	    }
	    return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));
	}
	/**
	 * Returns the parsed tabindex from the element attributes instead of returning the
	 * evaluated tabindex from the browsers defaults.
	 */
	function getTabIndexValue(element) {
	    if (!hasValidTabIndex(element)) {
	        return null;
	    }
	    // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054
	    var tabIndex = parseInt(element.getAttribute('tabindex'), 10);
	    return isNaN(tabIndex) ? -1 : tabIndex;
	}
	/** Checks whether the specified element is potentially tabbable on iOS */
	function isPotentiallyTabbableIOS(element) {
	    var nodeName = element.nodeName.toLowerCase();
	    var inputType = nodeName === 'input' && element.type;
	    return inputType === 'text'
	        || inputType === 'password'
	        || nodeName === 'select'
	        || nodeName === 'textarea';
	}
	/**
	 * Gets whether an element is potentially focusable without taking current visible/disabled state
	 * into account.
	 */
	function isPotentiallyFocusable(element) {
	    // Inputs are potentially focusable *unless* they're type="hidden".
	    if (isHiddenInput(element)) {
	        return false;
	    }
	    return isNativeFormElement(element) ||
	        isAnchorWithHref(element) ||
	        element.hasAttribute('contenteditable') ||
	        hasValidTabIndex(element);
	}
	/** Gets the parent window of a DOM node with regards of being inside of an iframe. */
	function getWindow(node) {
	    return node.ownerDocument.defaultView || window;
	}
	
	var __decorate$17 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$17 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Directive for trapping focus within a region.
	 *
	 * NOTE: This directive currently uses a very simple (naive) approach to focus trapping.
	 * It assumes that the tab order is the same as DOM order, which is not necessarily true.
	 * Things like tabIndex > 0, flex `order`, and shadow roots can cause to two to misalign.
	 * This will be replaced with a more intelligent solution before the library is considered stable.
	 */
	var FocusTrap = (function () {
	    function FocusTrap(_checker, _ngZone) {
	        this._checker = _checker;
	        this._ngZone = _ngZone;
	        this._disabled = false;
	    }
	    Object.defineProperty(FocusTrap.prototype, "disabled", {
	        /** Whether the focus trap is active. */
	        get: function () { return this._disabled; },
	        set: function (val) { this._disabled = coerceBooleanProperty(val); },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Waits for microtask queue to empty, then focuses the first tabbable element within the focus
	     * trap region.
	     */
	    FocusTrap.prototype.focusFirstTabbableElementWhenReady = function () {
	        var _this = this;
	        this._ngZone.onMicrotaskEmpty.first().subscribe(function () {
	            _this.focusFirstTabbableElement();
	        });
	    };
	    /**
	     * Waits for microtask queue to empty, then focuses the last tabbable element within the focus
	     * trap region.
	     */
	    FocusTrap.prototype.focusLastTabbableElementWhenReady = function () {
	        var _this = this;
	        this._ngZone.onMicrotaskEmpty.first().subscribe(function () {
	            _this.focusLastTabbableElement();
	        });
	    };
	    /**
	     * Focuses the first tabbable element within the focus trap region.
	     */
	    FocusTrap.prototype.focusFirstTabbableElement = function () {
	        var rootElement = this.trappedContent.nativeElement;
	        var redirectToElement = rootElement.querySelector('[cdk-focus-start]') ||
	            this._getFirstTabbableElement(rootElement);
	        if (redirectToElement) {
	            redirectToElement.focus();
	        }
	    };
	    /**
	     * Focuses the last tabbable element within the focus trap region.
	     */
	    FocusTrap.prototype.focusLastTabbableElement = function () {
	        var rootElement = this.trappedContent.nativeElement;
	        var focusTargets = rootElement.querySelectorAll('[cdk-focus-end]');
	        var redirectToElement = null;
	        if (focusTargets.length) {
	            redirectToElement = focusTargets[focusTargets.length - 1];
	        }
	        else {
	            redirectToElement = this._getLastTabbableElement(rootElement);
	        }
	        if (redirectToElement) {
	            redirectToElement.focus();
	        }
	    };
	    /** Get the first tabbable element from a DOM subtree (inclusive). */
	    FocusTrap.prototype._getFirstTabbableElement = function (root) {
	        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
	            return root;
	        }
	        // Iterate in DOM order.
	        var childCount = root.children.length;
	        for (var i = 0; i < childCount; i++) {
	            var tabbableChild = this._getFirstTabbableElement(root.children[i]);
	            if (tabbableChild) {
	                return tabbableChild;
	            }
	        }
	        return null;
	    };
	    /** Get the last tabbable element from a DOM subtree (inclusive). */
	    FocusTrap.prototype._getLastTabbableElement = function (root) {
	        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
	            return root;
	        }
	        // Iterate in reverse DOM order.
	        for (var i = root.children.length - 1; i >= 0; i--) {
	            var tabbableChild = this._getLastTabbableElement(root.children[i]);
	            if (tabbableChild) {
	                return tabbableChild;
	            }
	        }
	        return null;
	    };
	    __decorate$17([
	        _angular_core.ViewChild('trappedContent'), 
	        __metadata$17('design:type', _angular_core.ElementRef)
	    ], FocusTrap.prototype, "trappedContent", void 0);
	    __decorate$17([
	        _angular_core.Input(), 
	        __metadata$17('design:type', Boolean)
	    ], FocusTrap.prototype, "disabled", null);
	    FocusTrap = __decorate$17([
	        _angular_core.Component({selector: 'cdk-focus-trap, focus-trap',
	            template: "<div *ngIf=\"!disabled\" tabindex=\"0\" (focus)=\"focusLastTabbableElement()\"></div><div #trappedContent class=\"cdk-focus-trap-content\"><ng-content></ng-content></div><div *ngIf=\"!disabled\" tabindex=\"0\" (focus)=\"focusFirstTabbableElement()\"></div>",
	            encapsulation: _angular_core.ViewEncapsulation.None,
	        }), 
	        __metadata$17('design:paramtypes', [InteractivityChecker, _angular_core.NgZone])
	    ], FocusTrap);
	    return FocusTrap;
	}());
	
	var __decorate$20 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$20 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$3 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var LIVE_ANNOUNCER_ELEMENT_TOKEN = new _angular_core.OpaqueToken('liveAnnouncerElement');
	var LiveAnnouncer = (function () {
	    function LiveAnnouncer(elementToken) {
	        // We inject the live element as `any` because the constructor signature cannot reference
	        // browser globals (HTMLElement) on non-browser environments, since having a class decorator
	        // causes TypeScript to preserve the constructor signature types.
	        this._liveElement = elementToken || this._createLiveElement();
	    }
	    /**
	     * Announces a message to screenreaders.
	     * @param message Message to be announced to the screenreader
	     * @param politeness The politeness of the announcer element
	     */
	    LiveAnnouncer.prototype.announce = function (message, politeness) {
	        var _this = this;
	        if (politeness === void 0) { politeness = 'polite'; }
	        this._liveElement.textContent = '';
	        // TODO: ensure changing the politeness works on all environments we support.
	        this._liveElement.setAttribute('aria-live', politeness);
	        // This 100ms timeout is necessary for some browser + screen-reader combinations:
	        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.
	        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a
	        //   second time without clearing and then using a non-zero delay.
	        // (using JAWS 17 at time of this writing).
	        setTimeout(function () { return _this._liveElement.textContent = message; }, 100);
	    };
	    /** Removes the aria-live element from the DOM. */
	    LiveAnnouncer.prototype._removeLiveElement = function () {
	        if (this._liveElement && this._liveElement.parentNode) {
	            this._liveElement.parentNode.removeChild(this._liveElement);
	        }
	    };
	    LiveAnnouncer.prototype._createLiveElement = function () {
	        var liveEl = document.createElement('div');
	        liveEl.classList.add('cdk-visually-hidden');
	        liveEl.setAttribute('aria-atomic', 'true');
	        liveEl.setAttribute('aria-live', 'polite');
	        document.body.appendChild(liveEl);
	        return liveEl;
	    };
	    LiveAnnouncer = __decorate$20([
	        _angular_core.Injectable(),
	        __param$3(0, _angular_core.Optional()),
	        __param$3(0, _angular_core.Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)), 
	        __metadata$20('design:paramtypes', [Object])
	    ], LiveAnnouncer);
	    return LiveAnnouncer;
	}());
	function LIVE_ANNOUNCER_PROVIDER_FACTORY(parentDispatcher, liveElement) {
	    return parentDispatcher || new LiveAnnouncer(liveElement);
	}
	
	var LIVE_ANNOUNCER_PROVIDER = {
	    // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.
	    provide: LiveAnnouncer,
	    deps: [
	        [new _angular_core.Optional(), new _angular_core.SkipSelf(), LiveAnnouncer],
	        [new _angular_core.Optional(), new _angular_core.Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)]
	    ],
	    useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY
	};
	
	var supportedInputTypes;
	/** @returns The input types supported by this browser. */
	function getSupportedInputTypes() {
	    if (!supportedInputTypes) {
	        var featureTestInput_1 = document.createElement('input');
	        supportedInputTypes = new Set([
	            // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after
	            // first changing it to something else:
	            // The specified value "" does not conform to the required format.
	            // The format is "#rrggbb" where rr, gg, bb are two-digit hexadecimal numbers.
	            'color',
	            'button',
	            'checkbox',
	            'date',
	            'datetime-local',
	            'email',
	            'file',
	            'hidden',
	            'image',
	            'month',
	            'number',
	            'password',
	            'radio',
	            'range',
	            'reset',
	            'search',
	            'submit',
	            'tel',
	            'text',
	            'time',
	            'url',
	            'week',
	        ].filter(function (value) {
	            featureTestInput_1.setAttribute('type', value);
	            return featureTestInput_1.type === value;
	        }));
	    }
	    return supportedInputTypes;
	}
	
	var __decorate$21 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$21 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var PlatformModule = (function () {
	    function PlatformModule() {
	    }
	    /** @deprecated */
	    PlatformModule.forRoot = function () {
	        return {
	            ngModule: PlatformModule,
	            providers: [],
	        };
	    };
	    PlatformModule = __decorate$21([
	        _angular_core.NgModule({
	            providers: [Platform]
	        }), 
	        __metadata$21('design:paramtypes', [])
	    ], PlatformModule);
	    return PlatformModule;
	}());
	
	var __decorate$16 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$16 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var A11yModule = (function () {
	    function A11yModule() {
	    }
	    /** @deprecated */
	    A11yModule.forRoot = function () {
	        return {
	            ngModule: A11yModule,
	            providers: [],
	        };
	    };
	    A11yModule = __decorate$16([
	        _angular_core.NgModule({
	            imports: [_angular_common.CommonModule, PlatformModule],
	            declarations: [FocusTrap],
	            exports: [FocusTrap],
	            providers: [InteractivityChecker, LIVE_ANNOUNCER_PROVIDER]
	        }), 
	        __metadata$16('design:paramtypes', [])
	    ], A11yModule);
	    return A11yModule;
	}());
	
	var __decorate$23 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$23 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Component that shows a simplified checkbox without including any kind of "real" checkbox.
	 * Meant to be used when the checkbox is purely decorative and a large number of them will be
	 * included, such as for the options in a multi-select. Uses no SVGs or complex animations.
	 *
	 * Note that this component will be completely invisible to screen-reader users. This is *not*
	 * interchangeable with <md-checkbox> and should *not* be used if the user would directly interact
	 * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of
	 * more complex components that appropriately handle selected / checked state.
	 * @docs-private
	 */
	var MdPseudoCheckbox = (function () {
	    function MdPseudoCheckbox(_elementRef, _renderer) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        /** Display state of the checkbox. */
	        this.state = 'unchecked';
	        /** Whether the checkbox is disabled. */
	        this.disabled = false;
	        this.color = 'accent';
	    }
	    Object.defineProperty(MdPseudoCheckbox.prototype, "color", {
	        /** Color of the checkbox. */
	        get: function () { return this._color; },
	        set: function (value) {
	            if (value) {
	                var nativeElement = this._elementRef.nativeElement;
	                this._renderer.setElementClass(nativeElement, "mat-" + this.color, false);
	                this._renderer.setElementClass(nativeElement, "mat-" + value, true);
	                this._color = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    
	    __decorate$23([
	        _angular_core.Input(), 
	        __metadata$23('design:type', String)
	    ], MdPseudoCheckbox.prototype, "state", void 0);
	    __decorate$23([
	        _angular_core.Input(), 
	        __metadata$23('design:type', Boolean)
	    ], MdPseudoCheckbox.prototype, "disabled", void 0);
	    __decorate$23([
	        _angular_core.Input(), 
	        __metadata$23('design:type', String)
	    ], MdPseudoCheckbox.prototype, "color", null);
	    MdPseudoCheckbox = __decorate$23([
	        _angular_core.Component({encapsulation: _angular_core.ViewEncapsulation.None,
	            selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',
	            styles: [".mat-pseudo-checkbox{width:20px;height:20px;border:2px solid;border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;transition:border-color 90ms cubic-bezier(0,0,.2,.1),background-color 90ms cubic-bezier(0,0,.2,.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:'';border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0,0,.2,.1)}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{top:9px;left:2px;width:16px;opacity:1}.mat-pseudo-checkbox-checked::after{top:5px;left:3px;width:12px;height:5px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1}"],
	            template: '',
	            host: {
	                '[class.mat-pseudo-checkbox]': 'true',
	                '[class.mat-pseudo-checkbox-indeterminate]': 'state === "indeterminate"',
	                '[class.mat-pseudo-checkbox-checked]': 'state === "checked"',
	                '[class.mat-pseudo-checkbox-disabled]': 'disabled',
	            },
	        }), 
	        __metadata$23('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer])
	    ], MdPseudoCheckbox);
	    return MdPseudoCheckbox;
	}());
	
	var __decorate$22 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$22 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MdSelectionModule = (function () {
	    function MdSelectionModule() {
	    }
	    MdSelectionModule = __decorate$22([
	        _angular_core.NgModule({
	            exports: [MdPseudoCheckbox],
	            declarations: [MdPseudoCheckbox]
	        }), 
	        __metadata$22('design:paramtypes', [])
	    ], MdSelectionModule);
	    return MdSelectionModule;
	}());
	
	var __decorate$24 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$24 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	// "Polyfill" for `Node.replaceWith()`.
	// cf. https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/replaceWith
	function _replaceWith(toReplaceEl, otherEl) {
	    toReplaceEl.parentElement.replaceChild(otherEl, toReplaceEl);
	}
	/** @docs-private */
	var DomProjectionHost = (function () {
	    function DomProjectionHost(ref) {
	        this.ref = ref;
	    }
	    DomProjectionHost = __decorate$24([
	        _angular_core.Directive({
	            selector: 'cdk-dom-projection-host'
	        }), 
	        __metadata$24('design:paramtypes', [_angular_core.ElementRef])
	    ], DomProjectionHost);
	    return DomProjectionHost;
	}());
	/** @docs-private */
	var DomProjection = (function () {
	    function DomProjection() {
	    }
	    /**
	     * Project an element into a host element.
	     * Replace a host element by another element. This also replaces the children of the element
	     * by the children of the host.
	     *
	     * It should be used like this:
	     *
	     * ```
	     *   @Component({
	     *     template: `<div>
	     *       <cdk-dom-projection-host>
	     *         <div>other</div>
	     *         <ng-content></ng-content>
	     *       </cdk-dom-projection-host>
	     *     </div>`
	     *   })
	     *   class Cmpt {
	     *     constructor(private _projector: DomProjection, private _el: ElementRef) {}
	     *     ngOnInit() { this._projector.project(this._el, this._projector); }
	     *   }
	     * ```
	     *
	     * This component will move the content of the element it's applied to in the outer div. Because
	     * `project()` also move the children of the host inside the projected element, the element will
	     * contain the `<div>other</div>` HTML as well as its own children.
	     *
	     * Note: without `<ng-content></ng-content>` the projection will project an empty element.
	     *
	     * @param ref ElementRef to be projected.
	     * @param host Projection host into which to project the `ElementRef`.
	     */
	    DomProjection.prototype.project = function (ref, host) {
	        var projectedEl = ref.nativeElement;
	        var hostEl = host.ref.nativeElement;
	        var childNodes = projectedEl.childNodes;
	        var child = childNodes[0];
	        // We hoist all of the projected element's children out into the projected elements position
	        // because we *only* want to move the projected element and not its children.
	        _replaceWith(projectedEl, child);
	        var l = childNodes.length;
	        while (l--) {
	            child.parentNode.insertBefore(childNodes[0], child.nextSibling);
	            child = child.nextSibling; // nextSibling is now the childNodes[0].
	        }
	        // Insert all host children under the projectedEl, then replace host by component.
	        l = hostEl.childNodes.length;
	        while (l--) {
	            projectedEl.appendChild(hostEl.childNodes[0]);
	        }
	        _replaceWith(hostEl, projectedEl);
	        // At this point the host is replaced by the component. Nothing else to be done.
	    };
	    DomProjection = __decorate$24([
	        _angular_core.Injectable(), 
	        __metadata$24('design:paramtypes', [])
	    ], DomProjection);
	    return DomProjection;
	}());
	/** @docs-private */
	var ProjectionModule = (function () {
	    function ProjectionModule() {
	    }
	    /** @deprecated */
	    ProjectionModule.forRoot = function () {
	        return {
	            ngModule: ProjectionModule,
	        };
	    };
	    ProjectionModule = __decorate$24([
	        _angular_core.NgModule({
	            exports: [DomProjectionHost],
	            declarations: [DomProjectionHost],
	            providers: [DomProjection],
	        }), 
	        __metadata$24('design:paramtypes', [])
	    ], ProjectionModule);
	    return ProjectionModule;
	}());
	
	var __extends$5 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate$25 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$25 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * The FullscreenOverlayContainer is the alternative to OverlayContainer
	 * that supports correct displaying of overlay elements in Fullscreen mode
	 * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen
	 * It should be provided in the root component that way:
	 * providers: [
	 *   {provide: OverlayContainer, useClass: FullscreenOverlayContainer}
	 * ],
	 */
	var FullscreenOverlayContainer = (function (_super) {
	    __extends$5(FullscreenOverlayContainer, _super);
	    function FullscreenOverlayContainer() {
	        _super.apply(this, arguments);
	    }
	    FullscreenOverlayContainer.prototype._createContainer = function () {
	        var _this = this;
	        _super.prototype._createContainer.call(this);
	        this._adjustParentForFullscreenChange();
	        this._addFullscreenChangeListener(function () { return _this._adjustParentForFullscreenChange(); });
	    };
	    FullscreenOverlayContainer.prototype._adjustParentForFullscreenChange = function () {
	        if (!this._containerElement) {
	            return;
	        }
	        var fullscreenElement = this.getFullscreenElement();
	        var parent = fullscreenElement || document.body;
	        parent.appendChild(this._containerElement);
	    };
	    FullscreenOverlayContainer.prototype._addFullscreenChangeListener = function (fn) {
	        if (document.fullscreenEnabled) {
	            document.addEventListener('fullscreenchange', fn);
	        }
	        else if (document.webkitFullscreenEnabled) {
	            document.addEventListener('webkitfullscreenchange', fn);
	        }
	        else if (document.mozFullScreenEnabled) {
	            document.addEventListener('mozfullscreenchange', fn);
	        }
	        else if (document.msFullscreenEnabled) {
	            document.addEventListener('MSFullscreenChange', fn);
	        }
	    };
	    /**
	     * When the page is put into fullscreen mode, a specific element is specified.
	     * Only that element and its children are visible when in fullscreen mode.
	    */
	    FullscreenOverlayContainer.prototype.getFullscreenElement = function () {
	        return document.fullscreenElement ||
	            document.webkitFullscreenElement ||
	            document.mozFullScreenElement ||
	            document.msFullscreenElement ||
	            null;
	    };
	    FullscreenOverlayContainer = __decorate$25([
	        _angular_core.Injectable(), 
	        __metadata$25('design:paramtypes', [])
	    ], FullscreenOverlayContainer);
	    return FullscreenOverlayContainer;
	}(OverlayContainer));
	
	var __extends$6 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate$26 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$26 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/* Adjusts configuration of our gesture library, Hammer. */
	var GestureConfig = (function (_super) {
	    __extends$6(GestureConfig, _super);
	    function GestureConfig() {
	        _super.call(this);
	        this._hammer = typeof window !== 'undefined' ? window.Hammer : null;
	        /* List of new event names to add to the gesture support list */
	        this.events = this._hammer ? [
	            'longpress',
	            'slide',
	            'slidestart',
	            'slideend',
	            'slideright',
	            'slideleft'
	        ] : [];
	        if (!this._hammer && _angular_core.isDevMode()) {
	            console.warn('Could not find HammerJS. Certain Angular Material ' +
	                'components may not work correctly.');
	        }
	    }
	    /**
	     * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.
	     *
	     * Our gesture names come from the Material Design gestures spec:
	     * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics
	     *
	     * More information on default recognizers can be found in Hammer docs:
	     * http://hammerjs.github.io/recognizer-pan/
	     * http://hammerjs.github.io/recognizer-press/
	     *
	     * @param element Element to which to assign the new HammerJS gestures.
	     * @returns Newly-created HammerJS instance.
	     */
	    GestureConfig.prototype.buildHammer = function (element) {
	        var mc = new this._hammer(element);
	        // Default Hammer Recognizers.
	        var pan = new this._hammer.Pan();
	        var swipe = new this._hammer.Swipe();
	        var press = new this._hammer.Press();
	        // Notice that a HammerJS recognizer can only depend on one other recognizer once.
	        // Otherwise the previous `recognizeWith` will be dropped.
	        // TODO: Confirm threshold numbers with Material Design UX Team
	        var slide = this._createRecognizer(pan, { event: 'slide', threshold: 0 }, swipe);
	        var longpress = this._createRecognizer(press, { event: 'longpress', time: 500 });
	        // Overwrite the default `pan` event to use the swipe event.
	        pan.recognizeWith(swipe);
	        // Add customized gestures to Hammer manager
	        mc.add([swipe, press, pan, slide, longpress]);
	        return mc;
	    };
	    /** Creates a new recognizer, without affecting the default recognizers of HammerJS */
	    GestureConfig.prototype._createRecognizer = function (base, options) {
	        var inheritances = [];
	        for (var _i = 2; _i < arguments.length; _i++) {
	            inheritances[_i - 2] = arguments[_i];
	        }
	        var recognizer = new base.constructor(options);
	        inheritances.push(base);
	        inheritances.forEach(function (item) { return recognizer.recognizeWith(item); });
	        return recognizer;
	    };
	    GestureConfig = __decorate$26([
	        _angular_core.Injectable(), 
	        __metadata$26('design:paramtypes', [])
	    ], GestureConfig);
	    return GestureConfig;
	}(_angular_platformBrowser.HammerGestureConfig));
	
	/**
	 * Class to be used to power selecting one or more options from a list.
	 * @docs-private
	 */
	var SelectionModel = (function () {
	    function SelectionModel(_isMulti, initiallySelectedValues) {
	        var _this = this;
	        if (_isMulti === void 0) { _isMulti = false; }
	        this._isMulti = _isMulti;
	        /** Currently-selected values. */
	        this._selection = new Set();
	        /** Keeps track of the deselected options that haven't been emitted by the change event. */
	        this._deselectedToEmit = [];
	        /** Keeps track of the selected option that haven't been emitted by the change event. */
	        this._selectedToEmit = [];
	        /** Event emitted when the value has changed. */
	        this.onChange = new rxjs_Subject.Subject();
	        if (initiallySelectedValues) {
	            if (_isMulti) {
	                initiallySelectedValues.forEach(function (value) { return _this._markSelected(value); });
	            }
	            else {
	                this._markSelected(initiallySelectedValues[0]);
	            }
	            // Clear the array in order to avoid firing the change event for preselected values.
	            this._selectedToEmit.length = 0;
	        }
	    }
	    Object.defineProperty(SelectionModel.prototype, "selected", {
	        /** Selected value(s). */
	        get: function () {
	            if (!this._selected) {
	                this._selected = Array.from(this._selection.values());
	            }
	            return this._selected;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Selects a value or an array of values.
	     */
	    SelectionModel.prototype.select = function (value) {
	        this._markSelected(value);
	        this._emitChangeEvent();
	    };
	    /**
	     * Deselects a value or an array of values.
	     */
	    SelectionModel.prototype.deselect = function (value) {
	        this._unmarkSelected(value);
	        this._emitChangeEvent();
	    };
	    /**
	     * Clears all of the selected values.
	     */
	    SelectionModel.prototype.clear = function () {
	        this._unmarkAll();
	        this._emitChangeEvent();
	    };
	    /**
	     * Determines whether a value is selected.
	     */
	    SelectionModel.prototype.isSelected = function (value) {
	        return this._selection.has(value);
	    };
	    /**
	     * Determines whether the model has a value.
	     */
	    SelectionModel.prototype.isEmpty = function () {
	        return this._selection.size === 0;
	    };
	    /** Emits a change event and clears the records of selected and deselected values. */
	    SelectionModel.prototype._emitChangeEvent = function () {
	        if (this._selectedToEmit.length || this._deselectedToEmit.length) {
	            var eventData = new SelectionChange(this._selectedToEmit, this._deselectedToEmit);
	            this.onChange.next(eventData);
	            this._deselectedToEmit = [];
	            this._selectedToEmit = [];
	            this._selected = null;
	        }
	    };
	    /** Selects a value. */
	    SelectionModel.prototype._markSelected = function (value) {
	        if (!this.isSelected(value)) {
	            if (!this._isMulti) {
	                this._unmarkAll();
	            }
	            this._selection.add(value);
	            this._selectedToEmit.push(value);
	        }
	    };
	    /** Deselects a value. */
	    SelectionModel.prototype._unmarkSelected = function (value) {
	        if (this.isSelected(value)) {
	            this._selection.delete(value);
	            this._deselectedToEmit.push(value);
	        }
	    };
	    /** Clears out the selected values. */
	    SelectionModel.prototype._unmarkAll = function () {
	        var _this = this;
	        if (!this.isEmpty()) {
	            this._selection.forEach(function (value) { return _this._unmarkSelected(value); });
	        }
	    };
	    return SelectionModel;
	}());
	/**
	 * Describes an event emitted when the value of a MdSelectionModel has changed.
	 * @docs-private
	 */
	var SelectionChange = (function () {
	    function SelectionChange(added, removed) {
	        this.added = added;
	        this.removed = removed;
	    }
	    return SelectionChange;
	}());
	
	/**
	 * Screenreaders will often fire fake mousedown events when a focusable element
	 * is activated using the keyboard. We can typically distinguish between these faked
	 * mousedown events and real mousedown events using the "buttons" property. While
	 * real mousedowns will indicate the mouse button that was pressed (e.g. "1" for
	 * the left mouse button), faked mousedowns will usually set the property value to 0.
	 */
	function isFakeMousedownFromScreenReader(event) {
	    return event.buttons === 0;
	}
	
	var __decorate$27 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$27 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Class to coordinate unique selection based on name.
	 * Intended to be consumed as an Angular service.
	 * This service is needed because native radio change events are only fired on the item currently
	 * being selected, and we still need to uncheck the previous selection.
	 *
	 * This service does not *store* any IDs and names because they may change at any time, so it is
	 * less error-prone if they are simply passed through when the events occur.
	 */
	var UniqueSelectionDispatcher = (function () {
	    function UniqueSelectionDispatcher() {
	        this._listeners = [];
	    }
	    /**
	     * Notify other items that selection for the given name has been set.
	     * @param id ID of the item.
	     * @param name Name of the item.
	     */
	    UniqueSelectionDispatcher.prototype.notify = function (id, name) {
	        for (var _i = 0, _a = this._listeners; _i < _a.length; _i++) {
	            var listener = _a[_i];
	            listener(id, name);
	        }
	    };
	    /** Listen for future changes to item selection. */
	    UniqueSelectionDispatcher.prototype.listen = function (listener) {
	        this._listeners.push(listener);
	    };
	    UniqueSelectionDispatcher = __decorate$27([
	        _angular_core.Injectable(), 
	        __metadata$27('design:paramtypes', [])
	    ], UniqueSelectionDispatcher);
	    return UniqueSelectionDispatcher;
	}());
	function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(parentDispatcher) {
	    return parentDispatcher || new UniqueSelectionDispatcher();
	}
	var UNIQUE_SELECTION_DISPATCHER_PROVIDER = {
	    // If there is already a dispatcher available, use that. Otherwise, provide a new one.
	    provide: UniqueSelectionDispatcher,
	    deps: [[new _angular_core.Optional(), new _angular_core.SkipSelf(), UniqueSelectionDispatcher]],
	    useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY
	};
	
	var __decorate$29 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$29 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found
	// that a value of around 650ms seems appropriate.
	var TOUCH_BUFFER_MS = 650;
	/** Monitors mouse and keyboard events to determine the cause of focus events. */
	var FocusOriginMonitor = (function () {
	    function FocusOriginMonitor() {
	        // Note: we listen to events in the capture phase so we can detect them even if the user stops
	        // propagation.
	        var _this = this;
	        /** The focus origin that the next focus event is a result of. */
	        this._origin = null;
	        /** Whether the window has just been focused. */
	        this._windowFocused = false;
	        // On keydown record the origin and clear any touch event that may be in progress.
	        document.addEventListener('keydown', function () {
	            _this._lastTouchTarget = null;
	            _this._setOriginForCurrentEventQueue('keyboard');
	        }, true);
	        // On mousedown record the origin only if there is not touch target, since a mousedown can
	        // happen as a result of a touch event.
	        document.addEventListener('mousedown', function () {
	            if (!_this._lastTouchTarget) {
	                _this._setOriginForCurrentEventQueue('mouse');
	            }
	        }, true);
	        // When the touchstart event fires the focus event is not yet in the event queue. This means we
	        // can't rely on the trick used above (setting timeout of 0ms). Instead we wait 650ms to see if
	        // a focus happens.
	        document.addEventListener('touchstart', function (event) {
	            if (_this._touchTimeout != null) {
	                clearTimeout(_this._touchTimeout);
	            }
	            _this._lastTouchTarget = event.target;
	            _this._touchTimeout = setTimeout(function () { return _this._lastTouchTarget = null; }, TOUCH_BUFFER_MS);
	        }, true);
	        // Make a note of when the window regains focus, so we can restore the origin info for the
	        // focused element.
	        window.addEventListener('focus', function () {
	            _this._windowFocused = true;
	            setTimeout(function () { return _this._windowFocused = false; }, 0);
	        });
	    }
	    /** Register an element to receive focus classes. */
	    FocusOriginMonitor.prototype.registerElementForFocusClasses = function (element, renderer) {
	        var _this = this;
	        var subject = new rxjs_Subject.Subject();
	        renderer.listen(element, 'focus', function (event) { return _this._onFocus(event, element, renderer, subject); });
	        renderer.listen(element, 'blur', function () { return _this._onBlur(element, renderer, subject); });
	        return subject.asObservable();
	    };
	    /** Focuses the element via the specified focus origin. */
	    FocusOriginMonitor.prototype.focusVia = function (element, renderer, origin) {
	        this._setOriginForCurrentEventQueue(origin);
	        renderer.invokeElementMethod(element, 'focus');
	    };
	    /** Sets the origin and schedules an async function to clear it at the end of the event queue. */
	    FocusOriginMonitor.prototype._setOriginForCurrentEventQueue = function (origin) {
	        var _this = this;
	        this._origin = origin;
	        setTimeout(function () { return _this._origin = null; }, 0);
	    };
	    /** Checks whether the given focus event was caused by a touchstart event. */
	    FocusOriginMonitor.prototype._wasCausedByTouch = function (event) {
	        // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.
	        // Consider the following dom structure:
	        //
	        // <div #parent tabindex="0" cdkFocusClasses>
	        //   <div #child (click)="#parent.focus()"></div>
	        // </div>
	        //
	        // If the user touches the #child element and the #parent is programmatically focused as a
	        // result, this code will still consider it to have been caused by the touch event and will
	        // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a
	        // relatively small edge-case that can be worked around by using
	        // focusVia(parentEl, renderer,  'program') to focus the parent element.
	        //
	        // If we decide that we absolutely must handle this case correctly, we can do so by listening
	        // for the first focus event after the touchstart, and then the first blur event after that
	        // focus event. When that blur event fires we know that whatever follows is not a result of the
	        // touchstart.
	        var focusTarget = event.target;
	        return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&
	            (focusTarget == this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));
	    };
	    /** Handles focus events on a registered element. */
	    FocusOriginMonitor.prototype._onFocus = function (event, element, renderer, subject) {
	        // If we couldn't detect a cause for the focus event, it's due to one of two reasons:
	        // 1) The window has just regained focus, in which case we want to restore the focused state of
	        //    the element from before the window blurred.
	        // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.
	        // 3) The element was programmatically focused, in which case we should mark the origin as
	        //    'program'.
	        if (!this._origin) {
	            if (this._windowFocused && this._lastFocusOrigin) {
	                this._origin = this._lastFocusOrigin;
	            }
	            else if (this._wasCausedByTouch(event)) {
	                this._origin = 'touch';
	            }
	            else {
	                this._origin = 'program';
	            }
	        }
	        renderer.setElementClass(element, 'cdk-focused', true);
	        renderer.setElementClass(element, 'cdk-touch-focused', this._origin == 'touch');
	        renderer.setElementClass(element, 'cdk-keyboard-focused', this._origin == 'keyboard');
	        renderer.setElementClass(element, 'cdk-mouse-focused', this._origin == 'mouse');
	        renderer.setElementClass(element, 'cdk-program-focused', this._origin == 'program');
	        subject.next(this._origin);
	        this._lastFocusOrigin = this._origin;
	        this._origin = null;
	    };
	    /** Handles blur events on a registered element. */
	    FocusOriginMonitor.prototype._onBlur = function (element, renderer, subject) {
	        renderer.setElementClass(element, 'cdk-focused', false);
	        renderer.setElementClass(element, 'cdk-touch-focused', false);
	        renderer.setElementClass(element, 'cdk-keyboard-focused', false);
	        renderer.setElementClass(element, 'cdk-mouse-focused', false);
	        renderer.setElementClass(element, 'cdk-program-focused', false);
	        subject.next(null);
	    };
	    FocusOriginMonitor = __decorate$29([
	        _angular_core.Injectable(), 
	        __metadata$29('design:paramtypes', [])
	    ], FocusOriginMonitor);
	    return FocusOriginMonitor;
	}());
	/**
	 * Directive that determines how a particular element was focused (via keyboard, mouse, or
	 * programmatically) and adds corresponding classes to the element.
	 */
	var CdkFocusClasses = (function () {
	    function CdkFocusClasses(elementRef, focusOriginMonitor, renderer) {
	        this.changes =
	            focusOriginMonitor.registerElementForFocusClasses(elementRef.nativeElement, renderer);
	    }
	    CdkFocusClasses = __decorate$29([
	        _angular_core.Directive({
	            selector: '[cdkFocusClasses]',
	        }), 
	        __metadata$29('design:paramtypes', [_angular_core.ElementRef, FocusOriginMonitor, _angular_core.Renderer])
	    ], CdkFocusClasses);
	    return CdkFocusClasses;
	}());
	function FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY(parentDispatcher) {
	    return parentDispatcher || new FocusOriginMonitor();
	}
	var FOCUS_ORIGIN_MONITOR_PROVIDER = {
	    // If there is already a FocusOriginMonitor available, use that. Otherwise, provide a new one.
	    provide: FocusOriginMonitor,
	    deps: [[new _angular_core.Optional(), new _angular_core.SkipSelf(), FocusOriginMonitor]],
	    useFactory: FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY
	};
	
	/**
	 * Applies a CSS transform to an element, including browser-prefixed properties.
	 * @param element
	 * @param transformValue
	 */
	function applyCssTransform(element, transformValue) {
	    // It's important to trim the result, because the browser will ignore the set operation
	    // if the string contains only whitespace.
	    var value = transformValue.trim();
	    element.style.transform = value;
	    element.style.webkitTransform = value;
	}
	
	var __decorate$28 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$28 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var StyleModule = (function () {
	    function StyleModule() {
	    }
	    StyleModule = __decorate$28([
	        _angular_core.NgModule({
	            declarations: [CdkFocusClasses],
	            exports: [CdkFocusClasses],
	            providers: [FOCUS_ORIGIN_MONITOR_PROVIDER],
	        }), 
	        __metadata$28('design:paramtypes', [])
	    ], StyleModule);
	    return StyleModule;
	}());
	
	/** @docs-private */
	var AnimationCurves = (function () {
	    function AnimationCurves() {
	    }
	    AnimationCurves.STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';
	    AnimationCurves.DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';
	    AnimationCurves.ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';
	    AnimationCurves.SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';
	    return AnimationCurves;
	}());
	/** @docs-private */
	var AnimationDurations = (function () {
	    function AnimationDurations() {
	    }
	    AnimationDurations.COMPLEX = '375ms';
	    AnimationDurations.ENTERING = '225ms';
	    AnimationDurations.EXITING = '195ms';
	    return AnimationDurations;
	}());
	
	/** Coerces a data-bound value (typically a string) to a number. */
	function coerceNumberProperty(value, fallbackValue) {
	    if (fallbackValue === void 0) { fallbackValue = 0; }
	    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,
	    // and other non-number values as NaN, where Number just uses 0) but it considers the string
	    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.
	    return isNaN(parseFloat(value)) || isNaN(Number(value)) ? fallbackValue : Number(value);
	}
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MdCoreModule = (function () {
	    function MdCoreModule() {
	    }
	    /** @deprecated */
	    MdCoreModule.forRoot = function () {
	        return {
	            ngModule: MdCoreModule,
	            providers: [],
	        };
	    };
	    MdCoreModule = __decorate([
	        _angular_core.NgModule({
	            imports: [
	                MdLineModule,
	                RtlModule,
	                MdRippleModule,
	                ObserveContentModule,
	                PortalModule,
	                OverlayModule,
	                A11yModule,
	                MdOptionModule,
	                MdSelectionModule,
	            ],
	            exports: [
	                MdLineModule,
	                RtlModule,
	                MdRippleModule,
	                ObserveContentModule,
	                PortalModule,
	                OverlayModule,
	                A11yModule,
	                MdOptionModule,
	                MdSelectionModule,
	            ],
	        }), 
	        __metadata('design:paramtypes', [])
	    ], MdCoreModule);
	    return MdCoreModule;
	}());
	
	var __decorate$31 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$31 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$4 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	/**
	 * Provider Expression that allows md-button-toggle-group to register as a ControlValueAccessor.
	 * This allows it to support [(ngModel)].
	 * @docs-private
	 */
	var MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {
	    provide: _angular_forms.NG_VALUE_ACCESSOR,
	    useExisting: _angular_core.forwardRef(function () { return MdButtonToggleGroup; }),
	    multi: true
	};
	var _uniqueIdCounter$1 = 0;
	/** Change event object emitted by MdButtonToggle. */
	var MdButtonToggleChange = (function () {
	    function MdButtonToggleChange() {
	    }
	    return MdButtonToggleChange;
	}());
	/** Exclusive selection button toggle group that behaves like a radio-button group. */
	var MdButtonToggleGroup = (function () {
	    function MdButtonToggleGroup() {
	        /** The value for the button toggle group. Should match currently selected button toggle. */
	        this._value = null;
	        /** The HTML name attribute applied to toggles in this group. */
	        this._name = "md-button-toggle-group-" + _uniqueIdCounter$1++;
	        /** Disables all toggles in the group. */
	        this._disabled = null;
	        /** Whether the button toggle group should be vertical. */
	        this._vertical = false;
	        /** The currently selected button toggle, should match the value. */
	        this._selected = null;
	        /** Whether the button toggle group is initialized or not. */
	        this._isInitialized = false;
	        /**
	         * The method to be called in order to update ngModel.
	         * Now `ngModel` binding is not supported in multiple selection mode.
	         */
	        this._controlValueAccessorChangeFn = function (value) { };
	        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */
	        this.onTouched = function () { };
	        /** Event emitted when the group's value changes. */
	        this._change = new _angular_core.EventEmitter();
	        /** Child button toggle buttons. */
	        this._buttonToggles = null;
	    }
	    Object.defineProperty(MdButtonToggleGroup.prototype, "change", {
	        get: function () {
	            return this._change.asObservable();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdButtonToggleGroup.prototype.ngAfterViewInit = function () {
	        this._isInitialized = true;
	    };
	    Object.defineProperty(MdButtonToggleGroup.prototype, "name", {
	        /** `name` attribute for the underlying `input` element. */
	        get: function () {
	            return this._name;
	        },
	        set: function (value) {
	            this._name = value;
	            this._updateButtonToggleNames();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdButtonToggleGroup.prototype, "disabled", {
	        /** Whether the toggle group is disabled. */
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = coerceBooleanProperty(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdButtonToggleGroup.prototype, "vertical", {
	        /** Whether the toggle group is vertical. */
	        get: function () {
	            return this._vertical;
	        },
	        set: function (value) {
	            this._vertical = coerceBooleanProperty(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdButtonToggleGroup.prototype, "value", {
	        /** Value of the toggle group. */
	        get: function () {
	            return this._value;
	        },
	        set: function (newValue) {
	            if (this._value != newValue) {
	                this._value = newValue;
	                this._updateSelectedButtonToggleFromValue();
	                // Only emit a change event if the view is completely initialized.
	                // We don't want to emit a change event for the initial values.
	                if (this._isInitialized) {
	                    this._emitChangeEvent();
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdButtonToggleGroup.prototype, "selected", {
	        /** Whether the toggle group is selected. */
	        get: function () {
	            return this._selected;
	        },
	        set: function (selected) {
	            this._selected = selected;
	            this.value = selected ? selected.value : null;
	            if (selected && !selected.checked) {
	                selected.checked = true;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdButtonToggleGroup.prototype._updateButtonToggleNames = function () {
	        var _this = this;
	        if (this._buttonToggles) {
	            this._buttonToggles.forEach(function (toggle) {
	                toggle.name = _this._name;
	            });
	        }
	    };
	    // TODO: Refactor into shared code with radio.
	    MdButtonToggleGroup.prototype._updateSelectedButtonToggleFromValue = function () {
	        var _this = this;
	        var isAlreadySelected = this._selected != null && this._selected.value == this._value;
	        if (this._buttonToggles != null && !isAlreadySelected) {
	            var matchingButtonToggle = this._buttonToggles.filter(function (buttonToggle) { return buttonToggle.value == _this._value; })[0];
	            if (matchingButtonToggle) {
	                this.selected = matchingButtonToggle;
	            }
	            else if (this.value == null) {
	                this.selected = null;
	                this._buttonToggles.forEach(function (buttonToggle) {
	                    buttonToggle.checked = false;
	                });
	            }
	        }
	    };
	    /** Dispatch change event with current selection and group value. */
	    MdButtonToggleGroup.prototype._emitChangeEvent = function () {
	        var event = new MdButtonToggleChange();
	        event.source = this._selected;
	        event.value = this._value;
	        this._controlValueAccessorChangeFn(event.value);
	        this._change.emit(event);
	    };
	    /**
	     * Sets the model value. Implemented as part of ControlValueAccessor.
	     * @param value Value to be set to the model.
	     */
	    MdButtonToggleGroup.prototype.writeValue = function (value) {
	        this.value = value;
	    };
	    /**
	     * Registers a callback that will be triggered when the value has changed.
	     * Implemented as part of ControlValueAccessor.
	     * @param fn On change callback function.
	     */
	    MdButtonToggleGroup.prototype.registerOnChange = function (fn) {
	        this._controlValueAccessorChangeFn = fn;
	    };
	    /**
	     * Registers a callback that will be triggered when the control has been touched.
	     * Implemented as part of ControlValueAccessor.
	     * @param fn On touch callback function.
	     */
	    MdButtonToggleGroup.prototype.registerOnTouched = function (fn) {
	        this.onTouched = fn;
	    };
	    /**
	     * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.
	     * @param isDisabled Whether the component should be disabled.
	     */
	    MdButtonToggleGroup.prototype.setDisabledState = function (isDisabled) {
	        this.disabled = isDisabled;
	    };
	    __decorate$31([
	        _angular_core.Output(), 
	        __metadata$31('design:type', rxjs_Observable.Observable)
	    ], MdButtonToggleGroup.prototype, "change", null);
	    __decorate$31([
	        _angular_core.ContentChildren(_angular_core.forwardRef(function () { return MdButtonToggle; })), 
	        __metadata$31('design:type', _angular_core.QueryList)
	    ], MdButtonToggleGroup.prototype, "_buttonToggles", void 0);
	    __decorate$31([
	        _angular_core.Input(), 
	        __metadata$31('design:type', String)
	    ], MdButtonToggleGroup.prototype, "name", null);
	    __decorate$31([
	        _angular_core.Input(), 
	        __metadata$31('design:type', Boolean)
	    ], MdButtonToggleGroup.prototype, "disabled", null);
	    __decorate$31([
	        _angular_core.Input(), 
	        __metadata$31('design:type', Boolean)
	    ], MdButtonToggleGroup.prototype, "vertical", null);
	    __decorate$31([
	        _angular_core.Input(), 
	        __metadata$31('design:type', Object)
	    ], MdButtonToggleGroup.prototype, "value", null);
	    __decorate$31([
	        _angular_core.Input(), 
	        __metadata$31('design:type', Object)
	    ], MdButtonToggleGroup.prototype, "selected", null);
	    MdButtonToggleGroup = __decorate$31([
	        _angular_core.Directive({
	            selector: 'md-button-toggle-group:not([multiple]), mat-button-toggle-group:not([multiple])',
	            providers: [MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],
	            host: {
	                '[class.mat-button-toggle-group]': 'true',
	                'role': 'radiogroup',
	                '[class.mat-button-toggle-vertical]': 'vertical'
	            },
	            exportAs: 'mdButtonToggleGroup',
	        }), 
	        __metadata$31('design:paramtypes', [])
	    ], MdButtonToggleGroup);
	    return MdButtonToggleGroup;
	}());
	/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */
	var MdButtonToggleGroupMultiple = (function () {
	    function MdButtonToggleGroupMultiple() {
	        /** Disables all toggles in the group. */
	        this._disabled = null;
	        /** Whether the button toggle group should be vertical. */
	        this._vertical = false;
	    }
	    Object.defineProperty(MdButtonToggleGroupMultiple.prototype, "disabled", {
	        /** Whether the toggle group is disabled. */
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = (value != null && value !== false) ? true : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdButtonToggleGroupMultiple.prototype, "vertical", {
	        /** Whether the toggle group is vertical. */
	        get: function () {
	            return this._vertical;
	        },
	        set: function (value) {
	            this._vertical = coerceBooleanProperty(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    __decorate$31([
	        _angular_core.Input(), 
	        __metadata$31('design:type', Boolean)
	    ], MdButtonToggleGroupMultiple.prototype, "disabled", null);
	    __decorate$31([
	        _angular_core.Input(), 
	        __metadata$31('design:type', Boolean)
	    ], MdButtonToggleGroupMultiple.prototype, "vertical", null);
	    MdButtonToggleGroupMultiple = __decorate$31([
	        _angular_core.Directive({
	            selector: 'md-button-toggle-group[multiple], mat-button-toggle-group[multiple]',
	            exportAs: 'mdButtonToggleGroup',
	            host: {
	                '[class.mat-button-toggle-group]': 'true',
	                '[class.mat-button-toggle-vertical]': 'vertical'
	            }
	        }), 
	        __metadata$31('design:paramtypes', [])
	    ], MdButtonToggleGroupMultiple);
	    return MdButtonToggleGroupMultiple;
	}());
	/** Single button inside of a toggle group. */
	var MdButtonToggle = (function () {
	    function MdButtonToggle(toggleGroup, toggleGroupMultiple, buttonToggleDispatcher, _renderer) {
	        var _this = this;
	        this.buttonToggleDispatcher = buttonToggleDispatcher;
	        this._renderer = _renderer;
	        /** Whether or not this button toggle is checked. */
	        this._checked = false;
	        /** Whether or not this button toggle is disabled. */
	        this._disabled = null;
	        /** Value assigned to this button toggle. */
	        this._value = null;
	        /** Whether or not the button toggle is a single selection. */
	        this._isSingleSelector = null;
	        /** Event emitted when the group value changes. */
	        this._change = new _angular_core.EventEmitter();
	        this.buttonToggleGroup = toggleGroup;
	        this.buttonToggleGroupMultiple = toggleGroupMultiple;
	        if (this.buttonToggleGroup) {
	            buttonToggleDispatcher.listen(function (id, name) {
	                if (id != _this.id && name == _this.name) {
	                    _this.checked = false;
	                }
	            });
	            this._type = 'radio';
	            this.name = this.buttonToggleGroup.name;
	            this._isSingleSelector = true;
	        }
	        else {
	            // Even if there is no group at all, treat the button toggle as a checkbox so it can be
	            // toggled on or off.
	            this._type = 'checkbox';
	            this._isSingleSelector = false;
	        }
	    }
	    Object.defineProperty(MdButtonToggle.prototype, "change", {
	        get: function () {
	            return this._change.asObservable();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdButtonToggle.prototype.ngOnInit = function () {
	        if (this.id == null) {
	            this.id = "md-button-toggle-" + _uniqueIdCounter$1++;
	        }
	        if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {
	            this._checked = true;
	        }
	    };
	    Object.defineProperty(MdButtonToggle.prototype, "inputId", {
	        /** Unique ID for the underlying `input` element. */
	        get: function () {
	            return this.id + "-input";
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdButtonToggle.prototype, "checked", {
	        /** Whether the button is checked. */
	        get: function () {
	            return this._checked;
	        },
	        set: function (newCheckedState) {
	            if (this._isSingleSelector) {
	                if (newCheckedState) {
	                    // Notify all button toggles with the same name (in the same group) to un-check.
	                    this.buttonToggleDispatcher.notify(this.id, this.name);
	                }
	            }
	            this._checked = newCheckedState;
	            if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {
	                this.buttonToggleGroup.selected = this;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdButtonToggle.prototype, "value", {
	        /** MdButtonToggleGroup reads this to assign its own value. */
	        get: function () {
	            return this._value;
	        },
	        set: function (value) {
	            if (this._value != value) {
	                if (this.buttonToggleGroup != null && this.checked) {
	                    this.buttonToggleGroup.value = value;
	                }
	                this._value = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Dispatch change event with current value. */
	    MdButtonToggle.prototype._emitChangeEvent = function () {
	        var event = new MdButtonToggleChange();
	        event.source = this;
	        event.value = this._value;
	        this._change.emit(event);
	    };
	    Object.defineProperty(MdButtonToggle.prototype, "disabled", {
	        /** Whether the button is disabled. */
	        get: function () {
	            return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||
	                (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);
	        },
	        set: function (value) {
	            this._disabled = (value != null && value !== false) ? true : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Toggle the state of the current button toggle. */
	    MdButtonToggle.prototype._toggle = function () {
	        this.checked = !this.checked;
	    };
	    /** Checks the button toggle due to an interaction with the underlying native input. */
	    MdButtonToggle.prototype._onInputChange = function (event) {
	        event.stopPropagation();
	        if (this._isSingleSelector) {
	            // Propagate the change one-way via the group, which will in turn mark this
	            // button toggle as checked.
	            this.checked = true;
	            this.buttonToggleGroup.selected = this;
	            this.buttonToggleGroup.onTouched();
	        }
	        else {
	            this._toggle();
	        }
	        // Emit a change event when the native input does.
	        this._emitChangeEvent();
	    };
	    MdButtonToggle.prototype._onInputClick = function (event) {
	        // We have to stop propagation for click events on the visual hidden input element.
	        // By default, when a user clicks on a label element, a generated click event will be
	        // dispatched on the associated input element. Since we are using a label element as our
	        // root container, the click event on the `slide-toggle` will be executed twice.
	        // The real click event will bubble up, and the generated click event also tries to bubble up.
	        // This will lead to multiple click events.
	        // Preventing bubbling for the second event will solve that issue.
	        event.stopPropagation();
	    };
	    /** Focuses the button. */
	    MdButtonToggle.prototype.focus = function () {
	        this._renderer.invokeElementMethod(this._inputElement.nativeElement, 'focus');
	    };
	    __decorate$31([
	        _angular_core.HostBinding(),
	        _angular_core.Input(), 
	        __metadata$31('design:type', String)
	    ], MdButtonToggle.prototype, "id", void 0);
	    __decorate$31([
	        _angular_core.Input(), 
	        __metadata$31('design:type', String)
	    ], MdButtonToggle.prototype, "name", void 0);
	    __decorate$31([
	        _angular_core.Output(), 
	        __metadata$31('design:type', rxjs_Observable.Observable)
	    ], MdButtonToggle.prototype, "change", null);
	    __decorate$31([
	        _angular_core.ViewChild('input'), 
	        __metadata$31('design:type', _angular_core.ElementRef)
	    ], MdButtonToggle.prototype, "_inputElement", void 0);
	    __decorate$31([
	        _angular_core.HostBinding('class.mat-button-toggle-checked'),
	        _angular_core.Input(), 
	        __metadata$31('design:type', Boolean)
	    ], MdButtonToggle.prototype, "checked", null);
	    __decorate$31([
	        _angular_core.Input(), 
	        __metadata$31('design:type', Object)
	    ], MdButtonToggle.prototype, "value", null);
	    __decorate$31([
	        _angular_core.HostBinding('class.mat-button-toggle-disabled'),
	        _angular_core.Input(), 
	        __metadata$31('design:type', Boolean)
	    ], MdButtonToggle.prototype, "disabled", null);
	    MdButtonToggle = __decorate$31([
	        _angular_core.Component({selector: 'md-button-toggle, mat-button-toggle',
	            template: "<label [attr.for]=\"inputId\" class=\"mat-button-toggle-label\"><input #input class=\"mat-button-toggle-input cdk-visually-hidden\" [type]=\"_type\" [id]=\"inputId\" [checked]=\"checked\" [disabled]=\"disabled\" [name]=\"name\" (change)=\"_onInputChange($event)\" (click)=\"_onInputClick($event)\"><div class=\"mat-button-toggle-label-content\"><ng-content></ng-content></div></label>",
	            styles: [".mat-button-toggle-group{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);position:relative;display:inline-flex;flex-direction:row;border-radius:2px;cursor:pointer;white-space:nowrap}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle-disabled .mat-button-toggle-label-content{cursor:default}.mat-button-toggle{white-space:nowrap;font-family:Roboto,\"Helvetica Neue\",sans-serif}.mat-button-toggle-label-content{display:inline-block;line-height:36px;padding:0 16px;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.mat-button-toggle-label-content>*{vertical-align:middle}"],
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            host: {
	                '[class.mat-button-toggle]': 'true'
	            }
	        }),
	        __param$4(0, _angular_core.Optional()),
	        __param$4(1, _angular_core.Optional()), 
	        __metadata$31('design:paramtypes', [MdButtonToggleGroup, MdButtonToggleGroupMultiple, UniqueSelectionDispatcher, _angular_core.Renderer])
	    ], MdButtonToggle);
	    return MdButtonToggle;
	}());
	var MdButtonToggleModule = (function () {
	    function MdButtonToggleModule() {
	    }
	    /** @deprecated */
	    MdButtonToggleModule.forRoot = function () {
	        return {
	            ngModule: MdButtonToggleModule,
	            providers: []
	        };
	    };
	    MdButtonToggleModule = __decorate$31([
	        _angular_core.NgModule({
	            imports: [_angular_forms.FormsModule, CompatibilityModule],
	            exports: [
	                MdButtonToggleGroup,
	                MdButtonToggleGroupMultiple,
	                MdButtonToggle,
	                CompatibilityModule,
	            ],
	            declarations: [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle],
	            providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]
	        }), 
	        __metadata$31('design:paramtypes', [])
	    ], MdButtonToggleModule);
	    return MdButtonToggleModule;
	}());
	
	var __extends$7 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate$32 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$32 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	// TODO(jelbourn): Make the `isMouseDown` stuff done with one global listener.
	// TODO(kara): Convert attribute selectors to classes when attr maps become available
	/**
	 * Directive whose purpose is to add the mat- CSS styling to this selector.
	 */
	var MdButtonCssMatStyler = (function () {
	    function MdButtonCssMatStyler() {
	    }
	    MdButtonCssMatStyler = __decorate$32([
	        _angular_core.Directive({
	            selector: 'button[md-button], button[mat-button], a[md-button], a[mat-button]',
	            host: {
	                '[class.mat-button]': 'true'
	            }
	        }), 
	        __metadata$32('design:paramtypes', [])
	    ], MdButtonCssMatStyler);
	    return MdButtonCssMatStyler;
	}());
	/**
	 * Directive whose purpose is to add the mat- CSS styling to this selector.
	 */
	var MdRaisedButtonCssMatStyler = (function () {
	    function MdRaisedButtonCssMatStyler() {
	    }
	    MdRaisedButtonCssMatStyler = __decorate$32([
	        _angular_core.Directive({
	            selector: 'button[md-raised-button], button[mat-raised-button], ' +
	                'a[md-raised-button], a[mat-raised-button]',
	            host: {
	                '[class.mat-raised-button]': 'true'
	            }
	        }), 
	        __metadata$32('design:paramtypes', [])
	    ], MdRaisedButtonCssMatStyler);
	    return MdRaisedButtonCssMatStyler;
	}());
	/**
	 * Directive whose purpose is to add the mat- CSS styling to this selector.
	 */
	var MdIconButtonCssMatStyler = (function () {
	    function MdIconButtonCssMatStyler() {
	    }
	    MdIconButtonCssMatStyler = __decorate$32([
	        _angular_core.Directive({
	            selector: 'button[md-icon-button], button[mat-icon-button], a[md-icon-button], a[mat-icon-button]',
	            host: {
	                '[class.mat-icon-button]': 'true',
	            }
	        }), 
	        __metadata$32('design:paramtypes', [])
	    ], MdIconButtonCssMatStyler);
	    return MdIconButtonCssMatStyler;
	}());
	/**
	 * Directive whose purpose is to add the mat- CSS styling to this selector.
	 */
	var MdFabCssMatStyler = (function () {
	    function MdFabCssMatStyler() {
	    }
	    MdFabCssMatStyler = __decorate$32([
	        _angular_core.Directive({
	            selector: 'button[md-fab], button[mat-fab], a[md-fab], a[mat-fab]',
	            host: {
	                '[class.mat-fab]': 'true'
	            }
	        }), 
	        __metadata$32('design:paramtypes', [])
	    ], MdFabCssMatStyler);
	    return MdFabCssMatStyler;
	}());
	/**
	 * Directive whose purpose is to add the mat- CSS styling to this selector.
	 */
	var MdMiniFabCssMatStyler = (function () {
	    function MdMiniFabCssMatStyler() {
	    }
	    MdMiniFabCssMatStyler = __decorate$32([
	        _angular_core.Directive({
	            selector: 'button[md-mini-fab], button[mat-mini-fab], a[md-mini-fab], a[mat-mini-fab]',
	            host: {
	                '[class.mat-mini-fab]': 'true'
	            }
	        }), 
	        __metadata$32('design:paramtypes', [])
	    ], MdMiniFabCssMatStyler);
	    return MdMiniFabCssMatStyler;
	}());
	/**
	 * Material design button.
	 */
	var MdButton = (function () {
	    function MdButton(_elementRef, _renderer) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        /** Whether the button has focus from the keyboard (not the mouse). Used for class binding. */
	        this._isKeyboardFocused = false;
	        /** Whether a mousedown has occurred on this element in the last 100ms. */
	        this._isMouseDown = false;
	        /** Whether the ripple effect on click should be disabled. */
	        this._disableRipple = false;
	        this._disabled = null;
	    }
	    Object.defineProperty(MdButton.prototype, "disableRipple", {
	        /** Whether the ripple effect for this button is disabled. */
	        get: function () { return this._disableRipple; },
	        set: function (v) { this._disableRipple = coerceBooleanProperty(v); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdButton.prototype, "disabled", {
	        /** Whether the button is disabled. */
	        get: function () { return this._disabled; },
	        set: function (value) { this._disabled = coerceBooleanProperty(value) ? true : null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdButton.prototype, "color", {
	        /** The color of the button. Can be `primary`, `accent`, or `warn`. */
	        get: function () { return this._color; },
	        set: function (value) { this._updateColor(value); },
	        enumerable: true,
	        configurable: true
	    });
	    MdButton.prototype._setMousedown = function () {
	        var _this = this;
	        // We only *show* the focus style when focus has come to the button via the keyboard.
	        // The Material Design spec is silent on this topic, and without doing this, the
	        // button continues to look :active after clicking.
	        // @see http://marcysutton.com/button-focus-hell/
	        this._isMouseDown = true;
	        setTimeout(function () { _this._isMouseDown = false; }, 100);
	    };
	    MdButton.prototype._updateColor = function (newColor) {
	        this._setElementColor(this._color, false);
	        this._setElementColor(newColor, true);
	        this._color = newColor;
	    };
	    MdButton.prototype._setElementColor = function (color, isAdd) {
	        if (color != null && color != '') {
	            this._renderer.setElementClass(this._getHostElement(), "mat-" + color, isAdd);
	        }
	    };
	    MdButton.prototype._setKeyboardFocus = function () {
	        this._isKeyboardFocused = !this._isMouseDown;
	    };
	    MdButton.prototype._removeKeyboardFocus = function () {
	        this._isKeyboardFocused = false;
	    };
	    /** Focuses the button. */
	    MdButton.prototype.focus = function () {
	        this._renderer.invokeElementMethod(this._getHostElement(), 'focus');
	    };
	    MdButton.prototype._getHostElement = function () {
	        return this._elementRef.nativeElement;
	    };
	    MdButton.prototype._isRoundButton = function () {
	        var el = this._getHostElement();
	        return el.hasAttribute('md-icon-button') ||
	            el.hasAttribute('md-fab') ||
	            el.hasAttribute('md-mini-fab');
	    };
	    MdButton.prototype._isRippleDisabled = function () {
	        return this.disableRipple || this.disabled;
	    };
	    __decorate$32([
	        _angular_core.Input(), 
	        __metadata$32('design:type', Object)
	    ], MdButton.prototype, "disableRipple", null);
	    __decorate$32([
	        _angular_core.Input(), 
	        __metadata$32('design:type', Object)
	    ], MdButton.prototype, "disabled", null);
	    __decorate$32([
	        _angular_core.Input(), 
	        __metadata$32('design:type', String)
	    ], MdButton.prototype, "color", null);
	    MdButton = __decorate$32([
	        _angular_core.Component({selector: 'button[md-button], button[md-raised-button], button[md-icon-button],' +
	                'button[md-fab], button[md-mini-fab],' +
	                'button[mat-button], button[mat-raised-button], button[mat-icon-button],' +
	                'button[mat-fab], button[mat-mini-fab]',
	            host: {
	                '[disabled]': 'disabled',
	                '[class.mat-button-focus]': '_isKeyboardFocused',
	                '(mousedown)': '_setMousedown()',
	                '(focus)': '_setKeyboardFocus()',
	                '(blur)': '_removeKeyboardFocus()',
	            },
	            template: "<span class=\"mat-button-wrapper\"><ng-content></ng-content></span><div md-ripple *ngIf=\"!_isRippleDisabled()\" class=\"mat-button-ripple\" [class.mat-button-ripple-round]=\"_isRoundButton()\" [mdRippleTrigger]=\"_getHostElement()\"></div><div class=\"mat-button-focus-overlay\" (touchstart)=\"$event.preventDefault()\"></div>",
	            styles: [".mat-button-focus.mat-button .mat-button-focus-overlay,.mat-button-focus.mat-fab .mat-button-focus-overlay,.mat-button-focus.mat-icon-button .mat-button-focus-overlay,.mat-button-focus.mat-mini-fab .mat-button-focus-overlay,.mat-button-focus.mat-raised-button .mat-button-focus-overlay,.mat-button:hover .mat-button-focus-overlay,.mat-icon-button:hover .mat-button-focus-overlay{opacity:1}.mat-button,.mat-fab,.mat-icon-button,.mat-mini-fab,.mat-raised-button{box-sizing:border-box;position:relative;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:0;border:none;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;font-size:14px;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-weight:500;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px}[disabled].mat-button,[disabled].mat-fab,[disabled].mat-icon-button,[disabled].mat-mini-fab,[disabled].mat-raised-button{cursor:default}.mat-fab,.mat-mini-fab,.mat-raised-button{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-fab:not([disabled]):active,.mat-mini-fab:not([disabled]):active,.mat-raised-button:not([disabled]):active{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}[disabled].mat-fab,[disabled].mat-mini-fab,[disabled].mat-raised-button{box-shadow:none}.mat-button[disabled]:hover .mat-button-focus-overlay,.mat-button[disabled]:hover.mat-accent,.mat-button[disabled]:hover.mat-primary,.mat-button[disabled]:hover.mat-warn,.mat-icon-button[disabled]:hover .mat-button-focus-overlay,.mat-icon-button[disabled]:hover.mat-accent,.mat-icon-button[disabled]:hover.mat-primary,.mat-icon-button[disabled]:hover.mat-warn{background-color:transparent}.mat-fab{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-icon-button,.mat-mini-fab{min-width:0;width:40px;height:40px;border-radius:50%}.mat-fab:not([disabled]):active{box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-fab .mat-icon,.mat-fab i{padding:16px 0;line-height:24px}.mat-mini-fab{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12);padding:0;flex-shrink:0}.mat-mini-fab:not([disabled]):active{box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-mini-fab .mat-icon,.mat-mini-fab i{padding:8px 0;line-height:24px}.mat-icon-button{padding:0;flex-shrink:0;line-height:40px}.mat-icon-button .mat-icon,.mat-icon-button i{line-height:24px}.mat-button,.mat-icon-button,.mat-raised-button{color:currentColor}.mat-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*{vertical-align:middle}.mat-button-focus-overlay,.mat-button-ripple{position:absolute;top:0;left:0;bottom:0;right:0}.mat-button-focus-overlay{background-color:rgba(0,0,0,.12);border-radius:inherit;pointer-events:none;opacity:0}.mat-button-ripple-round{border-radius:50%;z-index:1}@media screen and (-ms-high-contrast:active){.mat-button-focus-overlay{background-color:rgba(255,255,255,.5)}.mat-button,.mat-fab,.mat-icon-button,.mat-mini-fab,.mat-raised-button{outline:solid 1px}}"],
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,
	        }), 
	        __metadata$32('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer])
	    ], MdButton);
	    return MdButton;
	}());
	/**
	 * Raised Material design button.
	 */
	var MdAnchor = (function (_super) {
	    __extends$7(MdAnchor, _super);
	    function MdAnchor(elementRef, renderer) {
	        _super.call(this, elementRef, renderer);
	    }
	    Object.defineProperty(MdAnchor.prototype, "tabIndex", {
	        /** @docs-private */
	        get: function () {
	            return this.disabled ? -1 : 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdAnchor.prototype, "_isAriaDisabled", {
	        get: function () {
	            return this.disabled ? 'true' : 'false';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdAnchor.prototype._haltDisabledEvents = function (event) {
	        // A disabled button shouldn't apply any actions
	        if (this.disabled) {
	            event.preventDefault();
	            event.stopImmediatePropagation();
	        }
	    };
	    __decorate$32([
	        _angular_core.HostBinding('tabIndex'), 
	        __metadata$32('design:type', Number)
	    ], MdAnchor.prototype, "tabIndex", null);
	    MdAnchor = __decorate$32([
	        _angular_core.Component({selector: "a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab],\n             a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]",
	            host: {
	                '[attr.disabled]': 'disabled',
	                '[attr.aria-disabled]': '_isAriaDisabled',
	                '[class.mat-button-focus]': '_isKeyboardFocused',
	                '(mousedown)': '_setMousedown()',
	                '(focus)': '_setKeyboardFocus()',
	                '(blur)': '_removeKeyboardFocus()',
	                '(click)': '_haltDisabledEvents($event)',
	            },
	            template: "<span class=\"mat-button-wrapper\"><ng-content></ng-content></span><div md-ripple *ngIf=\"!_isRippleDisabled()\" class=\"mat-button-ripple\" [class.mat-button-ripple-round]=\"_isRoundButton()\" [mdRippleTrigger]=\"_getHostElement()\"></div><div class=\"mat-button-focus-overlay\" (touchstart)=\"$event.preventDefault()\"></div>",
	            styles: [".mat-button-focus.mat-button .mat-button-focus-overlay,.mat-button-focus.mat-fab .mat-button-focus-overlay,.mat-button-focus.mat-icon-button .mat-button-focus-overlay,.mat-button-focus.mat-mini-fab .mat-button-focus-overlay,.mat-button-focus.mat-raised-button .mat-button-focus-overlay,.mat-button:hover .mat-button-focus-overlay,.mat-icon-button:hover .mat-button-focus-overlay{opacity:1}.mat-button,.mat-fab,.mat-icon-button,.mat-mini-fab,.mat-raised-button{box-sizing:border-box;position:relative;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:0;border:none;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;font-size:14px;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-weight:500;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px}[disabled].mat-button,[disabled].mat-fab,[disabled].mat-icon-button,[disabled].mat-mini-fab,[disabled].mat-raised-button{cursor:default}.mat-fab,.mat-mini-fab,.mat-raised-button{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-fab:not([disabled]):active,.mat-mini-fab:not([disabled]):active,.mat-raised-button:not([disabled]):active{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}[disabled].mat-fab,[disabled].mat-mini-fab,[disabled].mat-raised-button{box-shadow:none}.mat-button[disabled]:hover .mat-button-focus-overlay,.mat-button[disabled]:hover.mat-accent,.mat-button[disabled]:hover.mat-primary,.mat-button[disabled]:hover.mat-warn,.mat-icon-button[disabled]:hover .mat-button-focus-overlay,.mat-icon-button[disabled]:hover.mat-accent,.mat-icon-button[disabled]:hover.mat-primary,.mat-icon-button[disabled]:hover.mat-warn{background-color:transparent}.mat-fab{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-icon-button,.mat-mini-fab{min-width:0;width:40px;height:40px;border-radius:50%}.mat-fab:not([disabled]):active{box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-fab .mat-icon,.mat-fab i{padding:16px 0;line-height:24px}.mat-mini-fab{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12);padding:0;flex-shrink:0}.mat-mini-fab:not([disabled]):active{box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-mini-fab .mat-icon,.mat-mini-fab i{padding:8px 0;line-height:24px}.mat-icon-button{padding:0;flex-shrink:0;line-height:40px}.mat-icon-button .mat-icon,.mat-icon-button i{line-height:24px}.mat-button,.mat-icon-button,.mat-raised-button{color:currentColor}.mat-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*{vertical-align:middle}.mat-button-focus-overlay,.mat-button-ripple{position:absolute;top:0;left:0;bottom:0;right:0}.mat-button-focus-overlay{background-color:rgba(0,0,0,.12);border-radius:inherit;pointer-events:none;opacity:0}.mat-button-ripple-round{border-radius:50%;z-index:1}@media screen and (-ms-high-contrast:active){.mat-button-focus-overlay{background-color:rgba(255,255,255,.5)}.mat-button,.mat-fab,.mat-icon-button,.mat-mini-fab,.mat-raised-button{outline:solid 1px}}"],
	            encapsulation: _angular_core.ViewEncapsulation.None
	        }), 
	        __metadata$32('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer])
	    ], MdAnchor);
	    return MdAnchor;
	}(MdButton));
	var MdButtonModule = (function () {
	    function MdButtonModule() {
	    }
	    /** @deprecated */
	    MdButtonModule.forRoot = function () {
	        return {
	            ngModule: MdButtonModule,
	            providers: []
	        };
	    };
	    MdButtonModule = __decorate$32([
	        _angular_core.NgModule({
	            imports: [_angular_common.CommonModule, MdRippleModule, CompatibilityModule],
	            exports: [
	                MdButton, MdAnchor,
	                CompatibilityModule,
	                MdButtonCssMatStyler,
	                MdRaisedButtonCssMatStyler,
	                MdIconButtonCssMatStyler,
	                MdFabCssMatStyler,
	                MdMiniFabCssMatStyler
	            ],
	            declarations: [
	                MdButton,
	                MdAnchor,
	                MdButtonCssMatStyler,
	                MdRaisedButtonCssMatStyler,
	                MdIconButtonCssMatStyler,
	                MdFabCssMatStyler,
	                MdMiniFabCssMatStyler
	            ],
	        }), 
	        __metadata$32('design:paramtypes', [])
	    ], MdButtonModule);
	    return MdButtonModule;
	}());
	
	var __decorate$33 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$33 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/** Monotonically increasing integer used to auto-generate unique ids for checkbox components. */
	var nextId = 0;
	/**
	 * Provider Expression that allows md-checkbox to register as a ControlValueAccessor.
	 * This allows it to support [(ngModel)].
	 * @docs-private
	 */
	var MD_CHECKBOX_CONTROL_VALUE_ACCESSOR = {
	    provide: _angular_forms.NG_VALUE_ACCESSOR,
	    useExisting: _angular_core.forwardRef(function () { return MdCheckbox; }),
	    multi: true
	};
	/**
	 * Represents the different states that require custom transitions between them.
	 * @docs-private
	 */
	
	(function (TransitionCheckState) {
	    /** The initial state of the component before any user interaction. */
	    TransitionCheckState[TransitionCheckState["Init"] = 0] = "Init";
	    /** The state representing the component when it's becoming checked. */
	    TransitionCheckState[TransitionCheckState["Checked"] = 1] = "Checked";
	    /** The state representing the component when it's becoming unchecked. */
	    TransitionCheckState[TransitionCheckState["Unchecked"] = 2] = "Unchecked";
	    /** The state representing the component when it's becoming indeterminate. */
	    TransitionCheckState[TransitionCheckState["Indeterminate"] = 3] = "Indeterminate";
	})(exports.TransitionCheckState || (exports.TransitionCheckState = {}));
	/** Change event object emitted by MdCheckbox. */
	var MdCheckboxChange = (function () {
	    function MdCheckboxChange() {
	    }
	    return MdCheckboxChange;
	}());
	/**
	 * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,
	 * and exposes a similar API. A MdCheckbox can be either checked, unchecked, indeterminate, or
	 * disabled. Note that all additional accessibility attributes are taken care of by the component,
	 * so there is no need to provide them yourself. However, if you want to omit a label and still
	 * have the checkbox be accessible, you may supply an [aria-label] input.
	 * See: https://www.google.com/design/spec/components/selection-controls.html
	 */
	var MdCheckbox = (function () {
	    function MdCheckbox(_renderer, _elementRef, _changeDetectorRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        this._changeDetectorRef = _changeDetectorRef;
	        /**
	         * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will
	         * take precedence so this may be omitted.
	         */
	        this.ariaLabel = '';
	        /**
	         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element
	         */
	        this.ariaLabelledby = null;
	        /** A unique id for the checkbox. If one is not supplied, it is auto-generated. */
	        this.id = "md-checkbox-" + ++nextId;
	        /** Whether the label should appear after or before the checkbox. Defaults to 'after' */
	        this.labelPosition = 'after';
	        this._disabled = false;
	        /** Tabindex value that is passed to the underlying input element. */
	        this.tabIndex = 0;
	        /** Name value will be applied to the input element if present */
	        this.name = null;
	        /** Event emitted when the checkbox's `checked` value changes. */
	        this.change = new _angular_core.EventEmitter();
	        /** Event emitted when the checkbox's `indeterminate` value changes. */
	        this.indeterminateChange = new _angular_core.EventEmitter();
	        /**
	         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.
	         * @docs-private
	         */
	        this.onTouched = function () { };
	        this._currentAnimationClass = '';
	        this._currentCheckState = exports.TransitionCheckState.Init;
	        this._checked = false;
	        this._indeterminate = false;
	        this._controlValueAccessorChangeFn = function (value) { };
	        this._hasFocus = false;
	        this.color = 'accent';
	    }
	    Object.defineProperty(MdCheckbox.prototype, "disableRipple", {
	        /** Whether the ripple effect for this checkbox is disabled. */
	        get: function () { return this._disableRipple; },
	        set: function (value) { this._disableRipple = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdCheckbox.prototype, "inputId", {
	        /** ID of the native input element inside `<md-checkbox>` */
	        get: function () {
	            return "input-" + this.id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdCheckbox.prototype, "required", {
	        /** Whether the checkbox is required. */
	        get: function () { return this._required; },
	        set: function (value) { this._required = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdCheckbox.prototype, "align", {
	        /**
	         * Whether or not the checkbox should appear before or after the label.
	         * @deprecated
	         */
	        get: function () {
	            // align refers to the checkbox relative to the label, while labelPosition refers to the
	            // label relative to the checkbox. As such, they are inverted.
	            return this.labelPosition == 'after' ? 'start' : 'end';
	        },
	        set: function (v) {
	            this.labelPosition = (v == 'start') ? 'after' : 'before';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdCheckbox.prototype, "disabled", {
	        /** Whether the checkbox is disabled. */
	        get: function () { return this._disabled; },
	        set: function (value) { this._disabled = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdCheckbox.prototype, "checked", {
	        /**
	         * Whether the checkbox is checked. Note that setting `checked` will immediately set
	         * `indeterminate` to false.
	         */
	        get: function () {
	            return this._checked;
	        },
	        set: function (checked) {
	            if (checked != this.checked) {
	                if (this._indeterminate) {
	                    this._indeterminate = false;
	                    this.indeterminateChange.emit(this._indeterminate);
	                }
	                this._checked = checked;
	                this._transitionCheckState(this._checked ? exports.TransitionCheckState.Checked : exports.TransitionCheckState.Unchecked);
	                this._changeDetectorRef.markForCheck();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdCheckbox.prototype, "indeterminate", {
	        /**
	         * Whether the checkbox is indeterminate. This is also known as "mixed" mode and can be used to
	         * represent a checkbox with three states, e.g. a checkbox that represents a nested list of
	         * checkable items. Note that whenever `checked` is set, indeterminate is immediately set to
	         * false. This differs from the web platform in that indeterminate state on native
	         * checkboxes is only remove when the user manually checks the checkbox (rather than setting the
	         * `checked` property programmatically). However, we feel that this behavior is more accommodating
	         * to the way consumers would envision using this component.
	         */
	        get: function () {
	            return this._indeterminate;
	        },
	        set: function (indeterminate) {
	            var changed = indeterminate != this._indeterminate;
	            this._indeterminate = indeterminate;
	            if (this._indeterminate) {
	                this._transitionCheckState(exports.TransitionCheckState.Indeterminate);
	            }
	            else {
	                this._transitionCheckState(this.checked ? exports.TransitionCheckState.Checked : exports.TransitionCheckState.Unchecked);
	            }
	            if (changed) {
	                this.indeterminateChange.emit(this._indeterminate);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdCheckbox.prototype, "color", {
	        /** The color of the button. Can be `primary`, `accent`, or `warn`. */
	        get: function () { return this._color; },
	        set: function (value) { this._updateColor(value); },
	        enumerable: true,
	        configurable: true
	    });
	    MdCheckbox.prototype._updateColor = function (newColor) {
	        this._setElementColor(this._color, false);
	        this._setElementColor(newColor, true);
	        this._color = newColor;
	    };
	    MdCheckbox.prototype._setElementColor = function (color, isAdd) {
	        if (color != null && color != '') {
	            this._renderer.setElementClass(this._elementRef.nativeElement, "mat-" + color, isAdd);
	        }
	    };
	    MdCheckbox.prototype._isRippleDisabled = function () {
	        return this.disableRipple || this.disabled;
	    };
	    /**
	     * Sets the model value. Implemented as part of ControlValueAccessor.
	     * @param value Value to be set to the model.
	     */
	    MdCheckbox.prototype.writeValue = function (value) {
	        this.checked = !!value;
	    };
	    /**
	     * Registers a callback to be triggered when the value has changed.
	     * Implemented as part of ControlValueAccessor.
	     * @param fn Function to be called on change.
	     */
	    MdCheckbox.prototype.registerOnChange = function (fn) {
	        this._controlValueAccessorChangeFn = fn;
	    };
	    /**
	     * Registers a callback to be triggered when the control has been touched.
	     * Implemented as part of ControlValueAccessor.
	     * @param fn Callback to be triggered when the checkbox is touched.
	     */
	    MdCheckbox.prototype.registerOnTouched = function (fn) {
	        this.onTouched = fn;
	    };
	    /**
	     * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.
	     * @param isDisabled Whether the checkbox should be disabled.
	     */
	    MdCheckbox.prototype.setDisabledState = function (isDisabled) {
	        this.disabled = isDisabled;
	    };
	    MdCheckbox.prototype._transitionCheckState = function (newState) {
	        var oldState = this._currentCheckState;
	        var renderer = this._renderer;
	        var elementRef = this._elementRef;
	        if (oldState === newState) {
	            return;
	        }
	        if (this._currentAnimationClass.length > 0) {
	            renderer.setElementClass(elementRef.nativeElement, this._currentAnimationClass, false);
	        }
	        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);
	        this._currentCheckState = newState;
	        if (this._currentAnimationClass.length > 0) {
	            renderer.setElementClass(elementRef.nativeElement, this._currentAnimationClass, true);
	        }
	    };
	    MdCheckbox.prototype._emitChangeEvent = function () {
	        var event = new MdCheckboxChange();
	        event.source = this;
	        event.checked = this.checked;
	        this._controlValueAccessorChangeFn(this.checked);
	        this.change.emit(event);
	    };
	    /** Informs the component when the input has focus so that we can style accordingly */
	    MdCheckbox.prototype._onInputFocus = function () {
	        this._hasFocus = true;
	    };
	    /** Informs the component when we lose focus in order to style accordingly */
	    MdCheckbox.prototype._onInputBlur = function () {
	        this._hasFocus = false;
	        this.onTouched();
	    };
	    /** Toggles the `checked` state of the checkbox. */
	    MdCheckbox.prototype.toggle = function () {
	        this.checked = !this.checked;
	    };
	    /**
	     * Event handler for checkbox input element.
	     * Toggles checked state if element is not disabled.
	     * @param event
	     */
	    MdCheckbox.prototype._onInteractionEvent = function (event) {
	        // We always have to stop propagation on the change event.
	        // Otherwise the change event, from the input element, will bubble up and
	        // emit its event object to the `change` output.
	        event.stopPropagation();
	        if (!this.disabled) {
	            this.toggle();
	            // Emit our custom change event if the native input emitted one.
	            // It is important to only emit it, if the native input triggered one, because
	            // we don't want to trigger a change event, when the `checked` variable changes for example.
	            this._emitChangeEvent();
	        }
	    };
	    /** Focuses the checkbox. */
	    MdCheckbox.prototype.focus = function () {
	        this._renderer.invokeElementMethod(this._inputElement.nativeElement, 'focus');
	        this._onInputFocus();
	    };
	    MdCheckbox.prototype._onInputClick = function (event) {
	        // We have to stop propagation for click events on the visual hidden input element.
	        // By default, when a user clicks on a label element, a generated click event will be
	        // dispatched on the associated input element. Since we are using a label element as our
	        // root container, the click event on the `checkbox` will be executed twice.
	        // The real click event will bubble up, and the generated click event also tries to bubble up.
	        // This will lead to multiple click events.
	        // Preventing bubbling for the second event will solve that issue.
	        event.stopPropagation();
	    };
	    MdCheckbox.prototype._getAnimationClassForCheckStateTransition = function (oldState, newState) {
	        var animSuffix;
	        switch (oldState) {
	            case exports.TransitionCheckState.Init:
	                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or
	                // [checked] bound to it.
	                if (newState === exports.TransitionCheckState.Checked) {
	                    animSuffix = 'unchecked-checked';
	                }
	                else {
	                    return '';
	                }
	                break;
	            case exports.TransitionCheckState.Unchecked:
	                animSuffix = newState === exports.TransitionCheckState.Checked ?
	                    'unchecked-checked' : 'unchecked-indeterminate';
	                break;
	            case exports.TransitionCheckState.Checked:
	                animSuffix = newState === exports.TransitionCheckState.Unchecked ?
	                    'checked-unchecked' : 'checked-indeterminate';
	                break;
	            case exports.TransitionCheckState.Indeterminate:
	                animSuffix = newState === exports.TransitionCheckState.Checked ?
	                    'indeterminate-checked' : 'indeterminate-unchecked';
	        }
	        return "mat-checkbox-anim-" + animSuffix;
	    };
	    MdCheckbox.prototype._getHostElement = function () {
	        return this._elementRef.nativeElement;
	    };
	    __decorate$33([
	        _angular_core.Input('aria-label'), 
	        __metadata$33('design:type', String)
	    ], MdCheckbox.prototype, "ariaLabel", void 0);
	    __decorate$33([
	        _angular_core.Input('aria-labelledby'), 
	        __metadata$33('design:type', String)
	    ], MdCheckbox.prototype, "ariaLabelledby", void 0);
	    __decorate$33([
	        _angular_core.Input(), 
	        __metadata$33('design:type', String)
	    ], MdCheckbox.prototype, "id", void 0);
	    __decorate$33([
	        _angular_core.Input(), 
	        __metadata$33('design:type', Boolean)
	    ], MdCheckbox.prototype, "disableRipple", null);
	    __decorate$33([
	        _angular_core.Input(), 
	        __metadata$33('design:type', Boolean)
	    ], MdCheckbox.prototype, "required", null);
	    __decorate$33([
	        _angular_core.Input(), 
	        __metadata$33('design:type', Object)
	    ], MdCheckbox.prototype, "align", null);
	    __decorate$33([
	        _angular_core.Input(), 
	        __metadata$33('design:type', Object)
	    ], MdCheckbox.prototype, "labelPosition", void 0);
	    __decorate$33([
	        _angular_core.Input(), 
	        __metadata$33('design:type', Boolean)
	    ], MdCheckbox.prototype, "disabled", null);
	    __decorate$33([
	        _angular_core.Input(), 
	        __metadata$33('design:type', Number)
	    ], MdCheckbox.prototype, "tabIndex", void 0);
	    __decorate$33([
	        _angular_core.Input(), 
	        __metadata$33('design:type', String)
	    ], MdCheckbox.prototype, "name", void 0);
	    __decorate$33([
	        _angular_core.Output(), 
	        __metadata$33('design:type', _angular_core.EventEmitter)
	    ], MdCheckbox.prototype, "change", void 0);
	    __decorate$33([
	        _angular_core.Output(), 
	        __metadata$33('design:type', _angular_core.EventEmitter)
	    ], MdCheckbox.prototype, "indeterminateChange", void 0);
	    __decorate$33([
	        _angular_core.ViewChild('input'), 
	        __metadata$33('design:type', _angular_core.ElementRef)
	    ], MdCheckbox.prototype, "_inputElement", void 0);
	    __decorate$33([
	        _angular_core.Input(), 
	        __metadata$33('design:type', Object)
	    ], MdCheckbox.prototype, "checked", null);
	    __decorate$33([
	        _angular_core.Input(), 
	        __metadata$33('design:type', Object)
	    ], MdCheckbox.prototype, "indeterminate", null);
	    __decorate$33([
	        _angular_core.Input(), 
	        __metadata$33('design:type', String)
	    ], MdCheckbox.prototype, "color", null);
	    MdCheckbox = __decorate$33([
	        _angular_core.Component({selector: 'md-checkbox, mat-checkbox',
	            template: "<label class=\"mat-checkbox-layout\"><div class=\"mat-checkbox-inner-container\"><input #input class=\"mat-checkbox-input cdk-visually-hidden\" type=\"checkbox\" [id]=\"inputId\" [required]=\"required\" [checked]=\"checked\" [disabled]=\"disabled\" [name]=\"name\" [tabIndex]=\"tabIndex\" [indeterminate]=\"indeterminate\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledby\" (focus)=\"_onInputFocus()\" (blur)=\"_onInputBlur()\" (change)=\"_onInteractionEvent($event)\" (click)=\"_onInputClick($event)\"><div md-ripple *ngIf=\"!_isRippleDisabled()\" class=\"mat-checkbox-ripple\" [mdRippleTrigger]=\"_getHostElement()\" [mdRippleCentered]=\"true\" [mdRippleSpeedFactor]=\"0.3\"></div><div class=\"mat-checkbox-frame\"></div><div class=\"mat-checkbox-background\"><svg version=\"1.1\" class=\"mat-checkbox-checkmark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" xml:space=\"preserve\"><path class=\"mat-checkbox-checkmark-path\" fill=\"none\" stroke=\"white\" d=\"M4.1,12.7 9,17.6 20.3,6.3\"/></svg><div class=\"mat-checkbox-mixedmark\"></div></div></div><span class=\"mat-checkbox-label\"><ng-content></ng-content></span></label>",
	            styles: [".mat-checkbox-frame,.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-checkmark,.mat-checkbox-frame{bottom:0;left:0;position:absolute;right:0;top:0}.mat-checkbox-checkmark,.mat-checkbox-mixedmark{width:calc(100% - 4px)}.mat-checkbox-background,.mat-checkbox-frame{border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{cursor:pointer;font-family:Roboto,\"Helvetica Neue\",sans-serif;transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-checkbox-layout{cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex}.mat-checkbox-inner-container{display:inline-block;height:20px;line-height:0;margin:auto 8px auto auto;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:20px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-layout .mat-checkbox-label{line-height:24px}.mat-checkbox-frame{transition:border-color 90ms cubic-bezier(0,0,.2,.1);border-width:2px;border-style:solid}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}.mat-checkbox-checkmark{width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.67px}.mat-checkbox-checked .mat-checkbox-checkmark-path,.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-mixedmark{height:2px;opacity:0;transform:scaleX(0) rotate(0)}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.mat-checkbox-disabled{cursor:default}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0s mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0s mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:.3s linear 0s mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox-ripple{position:absolute;left:-15px;top:-15px;right:-15px;bottom:-15px;border-radius:50%;z-index:1;pointer-events:none}"],
	            host: {
	                '[class.mat-checkbox]': 'true',
	                '[class.mat-checkbox-indeterminate]': 'indeterminate',
	                '[class.mat-checkbox-checked]': 'checked',
	                '[class.mat-checkbox-disabled]': 'disabled',
	                '[class.mat-checkbox-label-before]': 'labelPosition == "before"',
	                '[class.mat-checkbox-focused]': '_hasFocus',
	            },
	            providers: [MD_CHECKBOX_CONTROL_VALUE_ACCESSOR],
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush
	        }), 
	        __metadata$33('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef, _angular_core.ChangeDetectorRef])
	    ], MdCheckbox);
	    return MdCheckbox;
	}());
	var MdCheckboxModule = (function () {
	    function MdCheckboxModule() {
	    }
	    /** @deprecated */
	    MdCheckboxModule.forRoot = function () {
	        return {
	            ngModule: MdCheckboxModule,
	            providers: []
	        };
	    };
	    MdCheckboxModule = __decorate$33([
	        _angular_core.NgModule({
	            imports: [_angular_common.CommonModule, MdRippleModule, CompatibilityModule],
	            exports: [MdCheckbox, CompatibilityModule],
	            declarations: [MdCheckbox],
	        }), 
	        __metadata$33('design:paramtypes', [])
	    ], MdCheckboxModule);
	    return MdCheckboxModule;
	}());
	
	var __decorate$34 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$34 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$5 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	/**
	 * Provider Expression that allows md-radio-group to register as a ControlValueAccessor. This
	 * allows it to support [(ngModel)] and ngControl.
	 * @docs-private
	 */
	var MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {
	    provide: _angular_forms.NG_VALUE_ACCESSOR,
	    useExisting: _angular_core.forwardRef(function () { return MdRadioGroup; }),
	    multi: true
	};
	var _uniqueIdCounter$2 = 0;
	/** Change event object emitted by MdRadio and MdRadioGroup. */
	var MdRadioChange = (function () {
	    function MdRadioChange() {
	    }
	    return MdRadioChange;
	}());
	/**
	 * A group of radio buttons. May contain one or more `<md-radio-button>` elements.
	 */
	var MdRadioGroup = (function () {
	    function MdRadioGroup() {
	        /**
	         * Selected value for group. Should equal the value of the selected radio button if there *is*
	         * a corresponding radio button with a matching value. If there is *not* such a corresponding
	         * radio button, this value persists to be applied in case a new radio button is added with a
	         * matching value.
	         */
	        this._value = null;
	        /** The HTML name attribute applied to radio buttons in this group. */
	        this._name = "md-radio-group-" + _uniqueIdCounter$2++;
	        /** Disables all individual radio buttons assigned to this group. */
	        this._disabled = false;
	        /** The currently selected radio button. Should match value. */
	        this._selected = null;
	        /** Whether the `value` has been set to its initial value. */
	        this._isInitialized = false;
	        /** The method to be called in order to update ngModel */
	        this._controlValueAccessorChangeFn = function (value) { };
	        /**
	         * onTouch function registered via registerOnTouch (ControlValueAccessor).
	         * @docs-private
	         */
	        this.onTouched = function () { };
	        /**
	         * Event emitted when the group value changes.
	         * Change events are only emitted when the value changes due to user interaction with
	         * a radio button (the same behavior as `<input type-"radio">`).
	         */
	        this.change = new _angular_core.EventEmitter();
	        /** Child radio buttons. */
	        this._radios = null;
	        /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */
	        this.labelPosition = 'after';
	    }
	    Object.defineProperty(MdRadioGroup.prototype, "name", {
	        /** Name of the radio button group. All radio buttons inside this group will use this name. */
	        get: function () { return this._name; },
	        set: function (value) {
	            this._name = value;
	            this._updateRadioButtonNames();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdRadioGroup.prototype, "align", {
	        /**
	         * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.
	         * @deprecated
	         */
	        get: function () {
	            // align refers to the checkbox relative to the label, while labelPosition refers to the
	            // label relative to the checkbox. As such, they are inverted.
	            return this.labelPosition == 'after' ? 'start' : 'end';
	        },
	        set: function (v) {
	            this.labelPosition = (v == 'start') ? 'after' : 'before';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdRadioGroup.prototype, "disabled", {
	        /** Whether the radio button is disabled. */
	        get: function () { return this._disabled; },
	        set: function (value) {
	            // The presence of *any* disabled value makes the component disabled, *except* for false.
	            this._disabled = (value != null && value !== false) ? true : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdRadioGroup.prototype, "value", {
	        /** Value of the radio button. */
	        get: function () { return this._value; },
	        set: function (newValue) {
	            if (this._value != newValue) {
	                // Set this before proceeding to ensure no circular loop occurs with selection.
	                this._value = newValue;
	                this._updateSelectedRadioFromValue();
	                this._checkSelectedRadioButton();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdRadioGroup.prototype._checkSelectedRadioButton = function () {
	        if (this.selected && !this._selected.checked) {
	            this._selected.checked = true;
	        }
	    };
	    Object.defineProperty(MdRadioGroup.prototype, "selected", {
	        /** Whether the radio button is selected. */
	        get: function () { return this._selected; },
	        set: function (selected) {
	            this._selected = selected;
	            this.value = selected ? selected.value : null;
	            this._checkSelectedRadioButton();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Initialize properties once content children are available.
	     * This allows us to propagate relevant attributes to associated buttons.
	     */
	    MdRadioGroup.prototype.ngAfterContentInit = function () {
	        // Mark this component as initialized in AfterContentInit because the initial value can
	        // possibly be set by NgModel on MdRadioGroup, and it is possible that the OnInit of the
	        // NgModel occurs *after* the OnInit of the MdRadioGroup.
	        this._isInitialized = true;
	    };
	    /**
	     * Mark this group as being "touched" (for ngModel). Meant to be called by the contained
	     * radio buttons upon their blur.
	     */
	    MdRadioGroup.prototype._touch = function () {
	        if (this.onTouched) {
	            this.onTouched();
	        }
	    };
	    MdRadioGroup.prototype._updateRadioButtonNames = function () {
	        var _this = this;
	        if (this._radios) {
	            this._radios.forEach(function (radio) {
	                radio.name = _this.name;
	            });
	        }
	    };
	    /** Updates the `selected` radio button from the internal _value state. */
	    MdRadioGroup.prototype._updateSelectedRadioFromValue = function () {
	        var _this = this;
	        // If the value already matches the selected radio, do nothing.
	        var isAlreadySelected = this._selected != null && this._selected.value == this._value;
	        if (this._radios != null && !isAlreadySelected) {
	            this._selected = null;
	            this._radios.forEach(function (radio) {
	                radio.checked = _this.value == radio.value;
	                if (radio.checked) {
	                    _this._selected = radio;
	                }
	            });
	        }
	    };
	    /** Dispatch change event with current selection and group value. */
	    MdRadioGroup.prototype._emitChangeEvent = function () {
	        if (this._isInitialized) {
	            var event_1 = new MdRadioChange();
	            event_1.source = this._selected;
	            event_1.value = this._value;
	            this.change.emit(event_1);
	        }
	    };
	    /**
	     * Sets the model value. Implemented as part of ControlValueAccessor.
	     * @param value
	     */
	    MdRadioGroup.prototype.writeValue = function (value) {
	        this.value = value;
	    };
	    /**
	     * Registers a callback to be triggered when the model value changes.
	     * Implemented as part of ControlValueAccessor.
	     * @param fn Callback to be registered.
	     */
	    MdRadioGroup.prototype.registerOnChange = function (fn) {
	        this._controlValueAccessorChangeFn = fn;
	    };
	    /**
	     * Registers a callback to be triggered when the control is touched.
	     * Implemented as part of ControlValueAccessor.
	     * @param fn Callback to be registered.
	     */
	    MdRadioGroup.prototype.registerOnTouched = function (fn) {
	        this.onTouched = fn;
	    };
	    /**
	     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.
	     * @param isDisabled Whether the control should be disabled.
	     */
	    MdRadioGroup.prototype.setDisabledState = function (isDisabled) {
	        this.disabled = isDisabled;
	    };
	    __decorate$34([
	        _angular_core.Output(), 
	        __metadata$34('design:type', _angular_core.EventEmitter)
	    ], MdRadioGroup.prototype, "change", void 0);
	    __decorate$34([
	        _angular_core.ContentChildren(_angular_core.forwardRef(function () { return MdRadioButton; })), 
	        __metadata$34('design:type', _angular_core.QueryList)
	    ], MdRadioGroup.prototype, "_radios", void 0);
	    __decorate$34([
	        _angular_core.Input(), 
	        __metadata$34('design:type', String)
	    ], MdRadioGroup.prototype, "name", null);
	    __decorate$34([
	        _angular_core.Input(), 
	        __metadata$34('design:type', Object)
	    ], MdRadioGroup.prototype, "align", null);
	    __decorate$34([
	        _angular_core.Input(), 
	        __metadata$34('design:type', Object)
	    ], MdRadioGroup.prototype, "labelPosition", void 0);
	    __decorate$34([
	        _angular_core.Input(), 
	        __metadata$34('design:type', Boolean)
	    ], MdRadioGroup.prototype, "disabled", null);
	    __decorate$34([
	        _angular_core.Input(), 
	        __metadata$34('design:type', Object)
	    ], MdRadioGroup.prototype, "value", null);
	    __decorate$34([
	        _angular_core.Input(), 
	        __metadata$34('design:type', Object)
	    ], MdRadioGroup.prototype, "selected", null);
	    MdRadioGroup = __decorate$34([
	        _angular_core.Directive({
	            selector: 'md-radio-group, mat-radio-group',
	            providers: [MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],
	            host: {
	                'role': 'radiogroup',
	                '[class.mat-radio-group]': 'true',
	            },
	        }), 
	        __metadata$34('design:paramtypes', [])
	    ], MdRadioGroup);
	    return MdRadioGroup;
	}());
	/**
	 * A radio-button. May be inside of
	 */
	var MdRadioButton = (function () {
	    function MdRadioButton(radioGroup, _elementRef, _renderer, radioDispatcher) {
	        // Assertions. Ideally these should be stripped out by the compiler.
	        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.
	        var _this = this;
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this.radioDispatcher = radioDispatcher;
	        /** Whether this radio is checked. */
	        this._checked = false;
	        /** The unique ID for the radio button. */
	        this.id = "md-radio-" + _uniqueIdCounter$2++;
	        /** Value assigned to this radio.*/
	        this._value = null;
	        /**
	         * Event emitted when the checked state of this radio button changes.
	         * Change events are only emitted when the value changes due to user interaction with
	         * the radio button (the same behavior as `<input type-"radio">`).
	         */
	        this.change = new _angular_core.EventEmitter();
	        this.radioGroup = radioGroup;
	        radioDispatcher.listen(function (id, name) {
	            if (id != _this.id && name == _this.name) {
	                _this.checked = false;
	            }
	        });
	    }
	    Object.defineProperty(MdRadioButton.prototype, "disableRipple", {
	        /** Whether the ripple effect for this radio button is disabled. */
	        get: function () { return this._disableRipple; },
	        set: function (value) { this._disableRipple = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdRadioButton.prototype, "inputId", {
	        /** ID of the native input element inside `<md-radio-button>` */
	        get: function () {
	            return this.id + "-input";
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdRadioButton.prototype, "checked", {
	        /** Whether this radio button is checked. */
	        get: function () {
	            return this._checked;
	        },
	        set: function (newCheckedState) {
	            if (this._checked != newCheckedState) {
	                this._checked = newCheckedState;
	                if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {
	                    this.radioGroup.selected = this;
	                }
	                else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {
	                    // When unchecking the selected radio button, update the selected radio
	                    // property on the group.
	                    this.radioGroup.selected = null;
	                }
	                if (newCheckedState) {
	                    // Notify all radio buttons with the same name to un-check.
	                    this.radioDispatcher.notify(this.id, this.name);
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdRadioButton.prototype, "value", {
	        /** The value of this radio button. */
	        get: function () {
	            return this._value;
	        },
	        set: function (value) {
	            if (this._value != value) {
	                this._value = value;
	                if (this.radioGroup != null) {
	                    if (!this.checked) {
	                        // Update checked when the value changed to match the radio group's value
	                        this.checked = this.radioGroup.value == value;
	                    }
	                    if (this.checked) {
	                        this.radioGroup.selected = this;
	                    }
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdRadioButton.prototype, "align", {
	        /**
	         * Whether or not the radio-button should appear before or after the label.
	         * @deprecated
	         */
	        get: function () {
	            // align refers to the checkbox relative to the label, while labelPosition refers to the
	            // label relative to the checkbox. As such, they are inverted.
	            return this.labelPosition == 'after' ? 'start' : 'end';
	        },
	        set: function (v) {
	            this.labelPosition = (v == 'start') ? 'after' : 'before';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdRadioButton.prototype, "labelPosition", {
	        /** Whether the label should appear after or before the radio button. Defaults to 'after' */
	        get: function () {
	            return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';
	        },
	        set: function (value) {
	            this._labelPosition = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdRadioButton.prototype, "disabled", {
	        /** Whether the radio button is disabled. */
	        get: function () {
	            return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);
	        },
	        set: function (value) {
	            // The presence of *any* disabled value makes the component disabled, *except* for false.
	            this._disabled = (value != null && value !== false) ? true : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdRadioButton.prototype.ngOnInit = function () {
	        if (this.radioGroup) {
	            // If the radio is inside a radio group, determine if it should be checked
	            this.checked = this.radioGroup.value === this._value;
	            // Copy name from parent radio group
	            this.name = this.radioGroup.name;
	        }
	    };
	    /** Dispatch change event with current value. */
	    MdRadioButton.prototype._emitChangeEvent = function () {
	        var event = new MdRadioChange();
	        event.source = this;
	        event.value = this._value;
	        this.change.emit(event);
	    };
	    MdRadioButton.prototype._isRippleDisabled = function () {
	        return this.disableRipple || this.disabled;
	    };
	    /**
	     * We use a hidden native input field to handle changes to focus state via keyboard navigation,
	     * with visual rendering done separately. The native element is kept in sync with the overall
	     * state of the component.
	     */
	    MdRadioButton.prototype._onInputFocus = function () {
	        this._isFocused = true;
	    };
	    /** Focuses the radio button. */
	    MdRadioButton.prototype.focus = function () {
	        this._renderer.invokeElementMethod(this._inputElement.nativeElement, 'focus');
	        this._onInputFocus();
	    };
	    MdRadioButton.prototype._onInputBlur = function () {
	        this._isFocused = false;
	        if (this.radioGroup) {
	            this.radioGroup._touch();
	        }
	    };
	    MdRadioButton.prototype._onInputClick = function (event) {
	        // We have to stop propagation for click events on the visual hidden input element.
	        // By default, when a user clicks on a label element, a generated click event will be
	        // dispatched on the associated input element. Since we are using a label element as our
	        // root container, the click event on the `radio-button` will be executed twice.
	        // The real click event will bubble up, and the generated click event also tries to bubble up.
	        // This will lead to multiple click events.
	        // Preventing bubbling for the second event will solve that issue.
	        event.stopPropagation();
	    };
	    /**
	     * Triggered when the radio button received a click or the input recognized any change.
	     * Clicking on a label element, will trigger a change event on the associated input.
	     */
	    MdRadioButton.prototype._onInputChange = function (event) {
	        // We always have to stop propagation on the change event.
	        // Otherwise the change event, from the input element, will bubble up and
	        // emit its event object to the `change` output.
	        event.stopPropagation();
	        var groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;
	        this.checked = true;
	        this._emitChangeEvent();
	        if (this.radioGroup) {
	            this.radioGroup._controlValueAccessorChangeFn(this.value);
	            this.radioGroup._touch();
	            if (groupValueChanged) {
	                this.radioGroup._emitChangeEvent();
	            }
	        }
	    };
	    __decorate$34([
	        _angular_core.HostBinding('class.mat-radio-focused'), 
	        __metadata$34('design:type', Boolean)
	    ], MdRadioButton.prototype, "_isFocused", void 0);
	    __decorate$34([
	        _angular_core.HostBinding('id'),
	        _angular_core.Input(), 
	        __metadata$34('design:type', String)
	    ], MdRadioButton.prototype, "id", void 0);
	    __decorate$34([
	        _angular_core.Input(), 
	        __metadata$34('design:type', String)
	    ], MdRadioButton.prototype, "name", void 0);
	    __decorate$34([
	        _angular_core.Input('aria-label'), 
	        __metadata$34('design:type', String)
	    ], MdRadioButton.prototype, "ariaLabel", void 0);
	    __decorate$34([
	        _angular_core.Input('aria-labelledby'), 
	        __metadata$34('design:type', String)
	    ], MdRadioButton.prototype, "ariaLabelledby", void 0);
	    __decorate$34([
	        _angular_core.Input(), 
	        __metadata$34('design:type', Boolean)
	    ], MdRadioButton.prototype, "disableRipple", null);
	    __decorate$34([
	        _angular_core.Output(), 
	        __metadata$34('design:type', _angular_core.EventEmitter)
	    ], MdRadioButton.prototype, "change", void 0);
	    __decorate$34([
	        _angular_core.ViewChild('input'), 
	        __metadata$34('design:type', _angular_core.ElementRef)
	    ], MdRadioButton.prototype, "_inputElement", void 0);
	    __decorate$34([
	        _angular_core.HostBinding('class.mat-radio-checked'),
	        _angular_core.Input(), 
	        __metadata$34('design:type', Boolean)
	    ], MdRadioButton.prototype, "checked", null);
	    __decorate$34([
	        _angular_core.Input(), 
	        __metadata$34('design:type', Object)
	    ], MdRadioButton.prototype, "value", null);
	    __decorate$34([
	        _angular_core.Input(), 
	        __metadata$34('design:type', Object)
	    ], MdRadioButton.prototype, "align", null);
	    __decorate$34([
	        _angular_core.Input(), 
	        __metadata$34('design:type', Object)
	    ], MdRadioButton.prototype, "labelPosition", null);
	    __decorate$34([
	        _angular_core.HostBinding('class.mat-radio-disabled'),
	        _angular_core.Input(), 
	        __metadata$34('design:type', Boolean)
	    ], MdRadioButton.prototype, "disabled", null);
	    MdRadioButton = __decorate$34([
	        _angular_core.Component({selector: 'md-radio-button, mat-radio-button',
	            template: "<label [attr.for]=\"inputId\" class=\"mat-radio-label\" #label><div class=\"mat-radio-container\"><div class=\"mat-radio-outer-circle\"></div><div class=\"mat-radio-inner-circle\"></div><div md-ripple *ngIf=\"!_isRippleDisabled()\" class=\"mat-radio-ripple\" [mdRippleTrigger]=\"label\" [mdRippleCentered]=\"true\" [mdRippleSpeedFactor]=\"0.3\"></div></div><input #input class=\"mat-radio-input cdk-visually-hidden\" type=\"radio\" [id]=\"inputId\" [checked]=\"checked\" [disabled]=\"disabled\" [name]=\"name\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledby\" (change)=\"_onInputChange($event)\" (focus)=\"_onInputFocus()\" (blur)=\"_onInputBlur()\" (click)=\"_onInputClick($event)\"><div class=\"mat-radio-label-content\" [class.mat-radio-label-before]=\"labelPosition == 'before'\"><ng-content></ng-content></div></label>",
	            styles: [".mat-radio-button{display:inline-block;font-family:Roboto,\"Helvetica Neue\",sans-serif}.mat-radio-label{cursor:pointer;display:inline-flex;align-items:baseline;white-space:nowrap}.mat-radio-container{box-sizing:border-box;display:inline-block;height:20px;position:relative;width:20px;top:2px}.mat-radio-inner-circle,.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;top:0;width:20px;position:absolute;border-radius:50%}.mat-radio-outer-circle{transition:border-color ease 280ms;border-width:2px;border-style:solid}.mat-radio-inner-circle{transition:transform ease 280ms,background-color ease 280ms;transform:scale(0)}.mat-radio-checked .mat-radio-inner-circle{transform:scale(.5)}.mat-radio-label-content{display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-ripple{position:absolute;left:-15px;top:-15px;right:-15px;bottom:-15px;border-radius:50%;z-index:1;pointer-events:none}"],
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            host: {
	                '[class.mat-radio-button]': 'true',
	            }
	        }),
	        __param$5(0, _angular_core.Optional()), 
	        __metadata$34('design:paramtypes', [MdRadioGroup, _angular_core.ElementRef, _angular_core.Renderer, UniqueSelectionDispatcher])
	    ], MdRadioButton);
	    return MdRadioButton;
	}());
	var MdRadioModule = (function () {
	    function MdRadioModule() {
	    }
	    /** @deprecated */
	    MdRadioModule.forRoot = function () {
	        return {
	            ngModule: MdRadioModule,
	            providers: [],
	        };
	    };
	    MdRadioModule = __decorate$34([
	        _angular_core.NgModule({
	            imports: [_angular_common.CommonModule, MdRippleModule, CompatibilityModule],
	            exports: [MdRadioGroup, MdRadioButton, CompatibilityModule],
	            providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER, VIEWPORT_RULER_PROVIDER],
	            declarations: [MdRadioGroup, MdRadioButton],
	        }), 
	        __metadata$34('design:paramtypes', [])
	    ], MdRadioModule);
	    return MdRadioModule;
	}());
	
	/**
	 * This class manages keyboard events for selectable lists. If you pass it a query list
	 * of items, it will set the active item correctly when arrow events occur.
	 */
	var ListKeyManager = (function () {
	    function ListKeyManager(_items) {
	        this._items = _items;
	        this._tabOut = new rxjs_Subject.Subject();
	        this._wrap = false;
	    }
	    /**
	     * Turns on wrapping mode, which ensures that the active item will wrap to
	     * the other end of list when there are no more items in the given direction.
	     *
	     * @returns The ListKeyManager that the method was called on.
	     */
	    ListKeyManager.prototype.withWrap = function () {
	        this._wrap = true;
	        return this;
	    };
	    /**
	     * Sets the active item to the item at the index specified.
	     *
	     * @param index The index of the item to be set as active.
	     */
	    ListKeyManager.prototype.setActiveItem = function (index) {
	        this._activeItemIndex = index;
	        this._activeItem = this._items.toArray()[index];
	    };
	    /**
	     * Sets the active item depending on the key event passed in.
	     * @param event Keyboard event to be used for determining which element should be active.
	     */
	    ListKeyManager.prototype.onKeydown = function (event) {
	        switch (event.keyCode) {
	            case DOWN_ARROW:
	                this.setNextItemActive();
	                break;
	            case UP_ARROW:
	                this.setPreviousItemActive();
	                break;
	            case HOME:
	                this.setFirstItemActive();
	                break;
	            case END:
	                this.setLastItemActive();
	                break;
	            case TAB:
	                // Note that we shouldn't prevent the default action on tab.
	                this._tabOut.next(null);
	                return;
	            default:
	                return;
	        }
	        event.preventDefault();
	    };
	    Object.defineProperty(ListKeyManager.prototype, "activeItemIndex", {
	        /** Returns the index of the currently active item. */
	        get: function () {
	            return this._activeItemIndex;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ListKeyManager.prototype, "activeItem", {
	        /** Returns the currently active item. */
	        get: function () {
	            return this._activeItem;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Sets the active item to the first enabled item in the list. */
	    ListKeyManager.prototype.setFirstItemActive = function () {
	        this._setActiveItemByIndex(0, 1);
	    };
	    /** Sets the active item to the last enabled item in the list. */
	    ListKeyManager.prototype.setLastItemActive = function () {
	        this._setActiveItemByIndex(this._items.length - 1, -1);
	    };
	    /** Sets the active item to the next enabled item in the list. */
	    ListKeyManager.prototype.setNextItemActive = function () {
	        this._activeItemIndex === null ? this.setFirstItemActive() : this._setActiveItemByDelta(1);
	    };
	    /** Sets the active item to a previous enabled item in the list. */
	    ListKeyManager.prototype.setPreviousItemActive = function () {
	        this._activeItemIndex === null && this._wrap ? this.setLastItemActive()
	            : this._setActiveItemByDelta(-1);
	    };
	    /**
	     * Allows setting of the activeItemIndex without any other effects.
	     * @param index The new activeItemIndex.
	     */
	    ListKeyManager.prototype.updateActiveItemIndex = function (index) {
	        this._activeItemIndex = index;
	    };
	    Object.defineProperty(ListKeyManager.prototype, "tabOut", {
	        /**
	         * Observable that emits any time the TAB key is pressed, so components can react
	         * when focus is shifted off of the list.
	         */
	        get: function () {
	            return this._tabOut.asObservable();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * This method sets the active item, given a list of items and the delta between the
	     * currently active item and the new active item. It will calculate differently
	     * depending on whether wrap mode is turned on.
	     */
	    ListKeyManager.prototype._setActiveItemByDelta = function (delta, items) {
	        if (items === void 0) { items = this._items.toArray(); }
	        this._wrap ? this._setActiveInWrapMode(delta, items)
	            : this._setActiveInDefaultMode(delta, items);
	    };
	    /**
	     * Sets the active item properly given "wrap" mode. In other words, it will continue to move
	     * down the list until it finds an item that is not disabled, and it will wrap if it
	     * encounters either end of the list.
	     */
	    ListKeyManager.prototype._setActiveInWrapMode = function (delta, items) {
	        // when active item would leave menu, wrap to beginning or end
	        this._activeItemIndex =
	            (this._activeItemIndex + delta + items.length) % items.length;
	        // skip all disabled menu items recursively until an enabled one is reached
	        if (items[this._activeItemIndex].disabled) {
	            this._setActiveInWrapMode(delta, items);
	        }
	        else {
	            this.setActiveItem(this._activeItemIndex);
	        }
	    };
	    /**
	     * Sets the active item properly given the default mode. In other words, it will
	     * continue to move down the list until it finds an item that is not disabled. If
	     * it encounters either end of the list, it will stop and not wrap.
	     */
	    ListKeyManager.prototype._setActiveInDefaultMode = function (delta, items) {
	        this._setActiveItemByIndex(this._activeItemIndex + delta, delta, items);
	    };
	    /**
	     * Sets the active item to the first enabled item starting at the index specified. If the
	     * item is disabled, it will move in the fallbackDelta direction until it either
	     * finds an enabled item or encounters the end of the list.
	     */
	    ListKeyManager.prototype._setActiveItemByIndex = function (index, fallbackDelta, items) {
	        if (items === void 0) { items = this._items.toArray(); }
	        if (!items[index]) {
	            return;
	        }
	        while (items[index].disabled) {
	            index += fallbackDelta;
	            if (!items[index]) {
	                return;
	            }
	        }
	        this.setActiveItem(index);
	    };
	    return ListKeyManager;
	}());
	
	var __extends$8 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var FocusKeyManager = (function (_super) {
	    __extends$8(FocusKeyManager, _super);
	    function FocusKeyManager(items) {
	        _super.call(this, items);
	    }
	    /**
	     * This method sets the active item to the item at the specified index.
	     * It also adds focuses the newly active item.
	     */
	    FocusKeyManager.prototype.setActiveItem = function (index) {
	        _super.prototype.setActiveItem.call(this, index);
	        this.activeItem.focus();
	    };
	    return FocusKeyManager;
	}(ListKeyManager));
	
	/**
	 * The following are all the animations for the md-select component, with each
	 * const containing the metadata for one animation.
	 *
	 * The values below match the implementation of the AngularJS Material md-select animation.
	 */
	/**
	 * This animation shrinks the placeholder text to 75% of its normal size and translates
	 * it to either the top left corner (ltr) or top right corner (rtl) of the trigger,
	 * depending on the text direction of the application.
	 */
	var transformPlaceholder = _angular_core.trigger('transformPlaceholder', [
	    _angular_core.state('floating-ltr', _angular_core.style({
	        top: '-22px',
	        left: '-2px',
	        transform: "scale(0.75)"
	    })),
	    _angular_core.state('floating-rtl', _angular_core.style({
	        top: '-22px',
	        left: '2px',
	        transform: "scale(0.75)"
	    })),
	    _angular_core.transition('* => *', _angular_core.animate("400ms cubic-bezier(0.25, 0.8, 0.25, 1)"))
	]);
	/**
	 * This animation transforms the select's overlay panel on and off the page.
	 *
	 * When the panel is attached to the DOM, it expands its width 32px, scales it up to
	 * 100% on the Y axis, fades in its border, and translates slightly up and to the
	 * side to ensure the option text correctly overlaps the trigger text.
	 *
	 * When the panel is removed from the DOM, it simply fades out linearly.
	 */
	var transformPanel = _angular_core.trigger('transformPanel', [
	    _angular_core.state('showing', _angular_core.style({
	        opacity: 1,
	        minWidth: 'calc(100% + 32px)',
	        transform: "translate3d(0,0,0) scaleY(1)"
	    })),
	    _angular_core.transition('void => *', [
	        _angular_core.style({
	            opacity: 0,
	            minWidth: '100%',
	            transform: "translate3d(0, 0, 0) scaleY(0)"
	        }),
	        _angular_core.animate("150ms cubic-bezier(0.25, 0.8, 0.25, 1)")
	    ]),
	    _angular_core.transition('* => void', [
	        _angular_core.animate('250ms 100ms linear', _angular_core.style({ opacity: 0 }))
	    ])
	]);
	/**
	 * This animation fades in the background color and text content of the
	 * select's options. It is time delayed to occur 100ms after the overlay
	 * panel has transformed in.
	 */
	var fadeInContent = _angular_core.trigger('fadeInContent', [
	    _angular_core.state('showing', _angular_core.style({ opacity: 1 })),
	    _angular_core.transition('void => showing', [
	        _angular_core.style({ opacity: 0 }),
	        _angular_core.animate("150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)")
	    ])
	]);
	
	var __decorate$36 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$36 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$6 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	/**
	 * The following style constants are necessary to save here in order
	 * to properly calculate the alignment of the selected option over
	 * the trigger element.
	 */
	/** The fixed height of every option element. */
	var SELECT_OPTION_HEIGHT = 48;
	/** The max height of the select's overlay panel */
	var SELECT_PANEL_MAX_HEIGHT = 256;
	/** The max number of options visible at once in the select panel. */
	var SELECT_MAX_OPTIONS_DISPLAYED = 5;
	/** The fixed height of the select's trigger element. */
	var SELECT_TRIGGER_HEIGHT = 30;
	/**
	 * Must adjust for the difference in height between the option and the trigger,
	 * so the text will align on the y axis.
	 * (SELECT_OPTION_HEIGHT (48) - SELECT_TRIGGER_HEIGHT (30)) / 2 = 9
	 */
	var SELECT_OPTION_HEIGHT_ADJUSTMENT = 9;
	/** The panel's padding on the x-axis */
	var SELECT_PANEL_PADDING_X = 16;
	/**
	 * The panel's padding on the y-axis. This padding indicates there are more
	 * options available if you scroll.
	 */
	var SELECT_PANEL_PADDING_Y = 16;
	/**
	 * The select panel will only "fit" inside the viewport if it is positioned at
	 * this value or more away from the viewport boundary.
	 */
	var SELECT_PANEL_VIEWPORT_PADDING = 8;
	/** Change event object that is emitted when the select value has changed. */
	var MdSelectChange = (function () {
	    function MdSelectChange(source, value) {
	        this.source = source;
	        this.value = value;
	    }
	    return MdSelectChange;
	}());
	var MdSelect = (function () {
	    function MdSelect(_element, _renderer, _viewportRuler, _changeDetectorRef, _dir, _control) {
	        this._element = _element;
	        this._renderer = _renderer;
	        this._viewportRuler = _viewportRuler;
	        this._changeDetectorRef = _changeDetectorRef;
	        this._dir = _dir;
	        this._control = _control;
	        /** Whether or not the overlay panel is open. */
	        this._panelOpen = false;
	        /** Subscriptions to option events. */
	        this._subscriptions = [];
	        /** Whether filling out the select is required in the form.  */
	        this._required = false;
	        /** Whether the select is disabled.  */
	        this._disabled = false;
	        /** The scroll position of the overlay panel, calculated to center the selected option. */
	        this._scrollTop = 0;
	        /** The animation state of the placeholder. */
	        this._placeholderState = '';
	        /** View -> model callback called when value changes */
	        this._onChange = function (value) { };
	        /** View -> model callback called when select has been touched */
	        this._onTouched = function () { };
	        /** The IDs of child options to be passed to the aria-owns attribute. */
	        this._optionIds = '';
	        /** The value of the select panel's transform-origin property. */
	        this._transformOrigin = 'top';
	        /** Whether the panel's animation is done. */
	        this._panelDoneAnimating = false;
	        /**
	         * The x-offset of the overlay panel in relation to the trigger's top start corner.
	         * This must be adjusted to align the selected option text over the trigger text when
	         * the panel opens. Will change based on LTR or RTL text direction.
	         */
	        this._offsetX = 0;
	        /**
	         * The y-offset of the overlay panel in relation to the trigger's top start corner.
	         * This must be adjusted to align the selected option text over the trigger text.
	         * when the panel opens. Will change based on the y-position of the selected option.
	         */
	        this._offsetY = 0;
	        /**
	         * This position config ensures that the top "start" corner of the overlay
	         * is aligned with with the top "start" of the origin by default (overlapping
	         * the trigger completely). If the panel cannot fit below the trigger, it
	         * will fall back to a position above the trigger.
	         */
	        this._positions = [
	            {
	                originX: 'start',
	                originY: 'top',
	                overlayX: 'start',
	                overlayY: 'top',
	            },
	            {
	                originX: 'start',
	                originY: 'bottom',
	                overlayX: 'start',
	                overlayY: 'bottom',
	            },
	        ];
	        /** Event emitted when the select has been opened. */
	        this.onOpen = new _angular_core.EventEmitter();
	        /** Event emitted when the select has been closed. */
	        this.onClose = new _angular_core.EventEmitter();
	        /** Event emitted when the selected value has been changed by the user. */
	        this.change = new _angular_core.EventEmitter();
	        if (this._control) {
	            this._control.valueAccessor = this;
	        }
	    }
	    Object.defineProperty(MdSelect.prototype, "placeholder", {
	        /** Placeholder to be shown if no value has been selected. */
	        get: function () { return this._placeholder; },
	        set: function (value) {
	            var _this = this;
	            this._placeholder = value;
	            // Must wait to record the trigger width to ensure placeholder width is included.
	            Promise.resolve(null).then(function () { return _this._triggerWidth = _this._getWidth(); });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSelect.prototype, "disabled", {
	        /** Whether the component is disabled. */
	        get: function () { return this._disabled; },
	        set: function (value) {
	            this._disabled = coerceBooleanProperty(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSelect.prototype, "required", {
	        /** Whether the component is required. */
	        get: function () { return this._required; },
	        set: function (value) { this._required = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    MdSelect.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        this._initKeyManager();
	        this._changeSubscription = this.options.changes.startWith(null).subscribe(function () {
	            _this._resetOptions();
	            if (_this._control) {
	                // Defer setting the value in order to avoid the "Expression
	                // has changed after it was checked" errors from Angular.
	                Promise.resolve(null).then(function () { return _this._setSelectionByValue(_this._control.value); });
	            }
	        });
	    };
	    MdSelect.prototype.ngOnDestroy = function () {
	        this._dropSubscriptions();
	        if (this._changeSubscription) {
	            this._changeSubscription.unsubscribe();
	        }
	        if (this._tabSubscription) {
	            this._tabSubscription.unsubscribe();
	        }
	    };
	    /** Toggles the overlay panel open or closed. */
	    MdSelect.prototype.toggle = function () {
	        this.panelOpen ? this.close() : this.open();
	    };
	    /** Opens the overlay panel. */
	    MdSelect.prototype.open = function () {
	        if (this.disabled || !this.options.length) {
	            return;
	        }
	        this._calculateOverlayPosition();
	        this._placeholderState = this._isRtl() ? 'floating-rtl' : 'floating-ltr';
	        this._panelOpen = true;
	    };
	    /** Closes the overlay panel and focuses the host element. */
	    MdSelect.prototype.close = function () {
	        this._panelOpen = false;
	        if (!this._selected) {
	            this._placeholderState = '';
	        }
	        this._focusHost();
	    };
	    /**
	     * Sets the select's value. Part of the ControlValueAccessor interface
	     * required to integrate with Angular's core forms API.
	     *
	     * @param value New value to be written to the model.
	     */
	    MdSelect.prototype.writeValue = function (value) {
	        if (this.options) {
	            this._setSelectionByValue(value);
	            this._changeDetectorRef.markForCheck();
	        }
	    };
	    /**
	     * Saves a callback function to be invoked when the select's value
	     * changes from user input. Part of the ControlValueAccessor interface
	     * required to integrate with Angular's core forms API.
	     *
	     * @param fn Callback to be triggered when the value changes.
	     */
	    MdSelect.prototype.registerOnChange = function (fn) {
	        this._onChange = fn;
	    };
	    /**
	     * Saves a callback function to be invoked when the select is blurred
	     * by the user. Part of the ControlValueAccessor interface required
	     * to integrate with Angular's core forms API.
	     *
	     * @param fn Callback to be triggered when the component has been touched.
	     */
	    MdSelect.prototype.registerOnTouched = function (fn) {
	        this._onTouched = fn;
	    };
	    /**
	     * Disables the select. Part of the ControlValueAccessor interface required
	     * to integrate with Angular's core forms API.
	     *
	     * @param isDisabled Sets whether the component is disabled.
	     */
	    MdSelect.prototype.setDisabledState = function (isDisabled) {
	        this.disabled = isDisabled;
	    };
	    Object.defineProperty(MdSelect.prototype, "panelOpen", {
	        /** Whether or not the overlay panel is open. */
	        get: function () {
	            return this._panelOpen;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSelect.prototype, "selected", {
	        /** The currently selected option. */
	        get: function () {
	            return this._selected;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdSelect.prototype._isRtl = function () {
	        return this._dir ? this._dir.value === 'rtl' : false;
	    };
	    /** The width of the trigger element. This is necessary to match
	     * the overlay width to the trigger width.
	     */
	    MdSelect.prototype._getWidth = function () {
	        return this._getTriggerRect().width;
	    };
	    /** Ensures the panel opens if activated by the keyboard. */
	    MdSelect.prototype._handleKeydown = function (event) {
	        if (event.keyCode === ENTER || event.keyCode === SPACE) {
	            this.open();
	        }
	    };
	    /**
	     * When the panel element is finished transforming in (though not fading in), it
	     * emits an event and focuses an option if the panel is open.
	     */
	    MdSelect.prototype._onPanelDone = function () {
	        if (this.panelOpen) {
	            this._focusCorrectOption();
	            this.onOpen.emit();
	        }
	        else {
	            this.onClose.emit();
	        }
	    };
	    /**
	     * When the panel content is done fading in, the _panelDoneAnimating property is
	     * set so the proper class can be added to the panel.
	     */
	    MdSelect.prototype._onFadeInDone = function () {
	        this._panelDoneAnimating = this.panelOpen;
	    };
	    /**
	     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will
	     * "blur" to the panel when it opens, causing a false positive.
	     */
	    MdSelect.prototype._onBlur = function () {
	        if (!this.panelOpen) {
	            this._onTouched();
	        }
	    };
	    /** Returns the correct tabindex for the select depending on disabled state. */
	    MdSelect.prototype._getTabIndex = function () {
	        return this.disabled ? '-1' : '0';
	    };
	    /**
	     * Sets the scroll position of the scroll container. This must be called after
	     * the overlay pane is attached or the scroll container element will not yet be
	     * present in the DOM.
	     */
	    MdSelect.prototype._setScrollTop = function () {
	        var scrollContainer = this.overlayDir.overlayRef.overlayElement.querySelector('.mat-select-panel');
	        scrollContainer.scrollTop = this._scrollTop;
	    };
	    /**
	     * Sets the selected option based on a value. If no option can be
	     * found with the designated value, the select trigger is cleared.
	     */
	    MdSelect.prototype._setSelectionByValue = function (value) {
	        var options = this.options.toArray();
	        for (var i = 0; i < this.options.length; i++) {
	            if (options[i].value === value) {
	                options[i].select();
	                return;
	            }
	        }
	        // Clear selection if no item was selected.
	        this._clearSelection();
	    };
	    /** Clears the select trigger and deselects every option in the list. */
	    MdSelect.prototype._clearSelection = function () {
	        this._selected = null;
	        this._updateOptions();
	    };
	    MdSelect.prototype._getTriggerRect = function () {
	        return this.trigger.nativeElement.getBoundingClientRect();
	    };
	    /** Sets up a key manager to listen to keyboard events on the overlay panel. */
	    MdSelect.prototype._initKeyManager = function () {
	        var _this = this;
	        this._keyManager = new FocusKeyManager(this.options);
	        this._tabSubscription = this._keyManager.tabOut.subscribe(function () {
	            _this.close();
	        });
	    };
	    /** Drops current option subscriptions and IDs and resets from scratch. */
	    MdSelect.prototype._resetOptions = function () {
	        this._dropSubscriptions();
	        this._listenToOptions();
	        this._setOptionIds();
	    };
	    /** Listens to selection events on each option. */
	    MdSelect.prototype._listenToOptions = function () {
	        var _this = this;
	        this.options.forEach(function (option) {
	            var sub = option.onSelect.subscribe(function (event) {
	                if (event.isUserInput && _this._selected !== option) {
	                    _this._emitChangeEvent(option);
	                }
	                _this._onSelect(option);
	            });
	            _this._subscriptions.push(sub);
	        });
	    };
	    /** Unsubscribes from all option subscriptions. */
	    MdSelect.prototype._dropSubscriptions = function () {
	        this._subscriptions.forEach(function (sub) { return sub.unsubscribe(); });
	        this._subscriptions = [];
	    };
	    /** Emits an event when the user selects an option. */
	    MdSelect.prototype._emitChangeEvent = function (option) {
	        this._onChange(option.value);
	        this.change.emit(new MdSelectChange(this, option.value));
	    };
	    /** Records option IDs to pass to the aria-owns property. */
	    MdSelect.prototype._setOptionIds = function () {
	        this._optionIds = this.options.map(function (option) { return option.id; }).join(' ');
	    };
	    /** When a new option is selected, deselects the others and closes the panel. */
	    MdSelect.prototype._onSelect = function (option) {
	        this._selected = option;
	        this._updateOptions();
	        this._setValueWidth();
	        this._placeholderState = '';
	        if (this.panelOpen) {
	            this.close();
	        }
	    };
	    /** Deselect each option that doesn't match the current selection. */
	    MdSelect.prototype._updateOptions = function () {
	        var _this = this;
	        this.options.forEach(function (option) {
	            if (option !== _this.selected) {
	                option.deselect();
	            }
	        });
	    };
	    /**
	     * Must set the width of the selected option's value programmatically
	     * because it is absolutely positioned and otherwise will not clip
	     * overflow. The selection arrow is 9px wide, add 4px of padding = 13
	     */
	    MdSelect.prototype._setValueWidth = function () {
	        this._selectedValueWidth = this._triggerWidth - 13;
	    };
	    /** Focuses the selected item. If no option is selected, it will focus
	     * the first item instead.
	     */
	    MdSelect.prototype._focusCorrectOption = function () {
	        if (this.selected) {
	            this._keyManager.setActiveItem(this._getOptionIndex(this.selected));
	        }
	        else {
	            this._keyManager.setFirstItemActive();
	        }
	    };
	    /** Focuses the host element when the panel closes. */
	    MdSelect.prototype._focusHost = function () {
	        this._renderer.invokeElementMethod(this._element.nativeElement, 'focus');
	    };
	    /** Gets the index of the provided option in the option list. */
	    MdSelect.prototype._getOptionIndex = function (option) {
	        return this.options.reduce(function (result, current, index) {
	            return result === undefined ? (option === current ? index : undefined) : result;
	        }, undefined);
	    };
	    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */
	    MdSelect.prototype._calculateOverlayPosition = function () {
	        this._offsetX = this._isRtl() ? SELECT_PANEL_PADDING_X : -SELECT_PANEL_PADDING_X;
	        var panelHeight = Math.min(this.options.length * SELECT_OPTION_HEIGHT, SELECT_PANEL_MAX_HEIGHT);
	        var scrollContainerHeight = this.options.length * SELECT_OPTION_HEIGHT;
	        // The farthest the panel can be scrolled before it hits the bottom
	        var maxScroll = scrollContainerHeight - panelHeight;
	        if (this.selected) {
	            var selectedIndex = this._getOptionIndex(this.selected);
	            // We must maintain a scroll buffer so the selected option will be scrolled to the
	            // center of the overlay panel rather than the top.
	            var scrollBuffer = panelHeight / 2;
	            this._scrollTop = this._calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll);
	            this._offsetY = this._calculateOverlayOffset(selectedIndex, scrollBuffer, maxScroll);
	        }
	        else {
	            // If no option is selected, the panel centers on the first option. In this case,
	            // we must only adjust for the height difference between the option element
	            // and the trigger element, then multiply it by -1 to ensure the panel moves
	            // in the correct direction up the page.
	            this._offsetY = (SELECT_OPTION_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2 * -1;
	        }
	        this._checkOverlayWithinViewport(maxScroll);
	    };
	    /**
	     * Calculates the scroll position of the select's overlay panel.
	     *
	     * Attempts to center the selected option in the panel. If the option is
	     * too high or too low in the panel to be scrolled to the center, it clamps the
	     * scroll position to the min or max scroll positions respectively.
	     */
	    MdSelect.prototype._calculateOverlayScroll = function (selectedIndex, scrollBuffer, maxScroll) {
	        var optionOffsetFromScrollTop = SELECT_OPTION_HEIGHT * selectedIndex;
	        var halfOptionHeight = SELECT_OPTION_HEIGHT / 2;
	        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the
	        // scroll container, then subtracts the scroll buffer to scroll the option down to
	        // the center of the overlay panel. Half the option height must be re-added to the
	        // scrollTop so the option is centered based on its middle, not its top edge.
	        var optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;
	        return clampValue(0, optimalScrollPosition, maxScroll);
	    };
	    /**
	     * Calculates the y-offset of the select's overlay panel in relation to the
	     * top start corner of the trigger. It has to be adjusted in order for the
	     * selected option to be aligned over the trigger when the panel opens.
	     */
	    MdSelect.prototype._calculateOverlayOffset = function (selectedIndex, scrollBuffer, maxScroll) {
	        var optionOffsetFromPanelTop;
	        if (this._scrollTop === 0) {
	            optionOffsetFromPanelTop = selectedIndex * SELECT_OPTION_HEIGHT;
	        }
	        else if (this._scrollTop === maxScroll) {
	            var firstDisplayedIndex = this.options.length - SELECT_MAX_OPTIONS_DISPLAYED;
	            var selectedDisplayIndex = selectedIndex - firstDisplayedIndex;
	            // Because the panel height is longer than the height of the options alone,
	            // there is always extra padding at the top or bottom of the panel. When
	            // scrolled to the very bottom, this padding is at the top of the panel and
	            // must be added to the offset.
	            optionOffsetFromPanelTop =
	                selectedDisplayIndex * SELECT_OPTION_HEIGHT + SELECT_PANEL_PADDING_Y;
	        }
	        else {
	            // If the option was scrolled to the middle of the panel using a scroll buffer,
	            // its offset will be the scroll buffer minus the half height that was added to
	            // center it.
	            optionOffsetFromPanelTop = scrollBuffer - SELECT_OPTION_HEIGHT / 2;
	        }
	        // The final offset is the option's offset from the top, adjusted for the height
	        // difference, multiplied by -1 to ensure that the overlay moves in the correct
	        // direction up the page.
	        return optionOffsetFromPanelTop * -1 - SELECT_OPTION_HEIGHT_ADJUSTMENT;
	    };
	    /**
	     * Checks that the attempted overlay position will fit within the viewport.
	     * If it will not fit, tries to adjust the scroll position and the associated
	     * y-offset so the panel can open fully on-screen. If it still won't fit,
	     * sets the offset back to 0 to allow the fallback position to take over.
	     */
	    MdSelect.prototype._checkOverlayWithinViewport = function (maxScroll) {
	        var viewportRect = this._viewportRuler.getViewportRect();
	        var triggerRect = this._getTriggerRect();
	        var topSpaceAvailable = triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;
	        var bottomSpaceAvailable = viewportRect.height - triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;
	        var panelHeightTop = Math.abs(this._offsetY);
	        var totalPanelHeight = Math.min(this.options.length * SELECT_OPTION_HEIGHT, SELECT_PANEL_MAX_HEIGHT);
	        var panelHeightBottom = totalPanelHeight - panelHeightTop - triggerRect.height;
	        if (panelHeightBottom > bottomSpaceAvailable) {
	            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);
	        }
	        else if (panelHeightTop > topSpaceAvailable) {
	            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);
	        }
	        else {
	            this._transformOrigin = this._getOriginBasedOnOption();
	        }
	    };
	    /** Adjusts the overlay panel up to fit in the viewport. */
	    MdSelect.prototype._adjustPanelUp = function (panelHeightBottom, bottomSpaceAvailable) {
	        var distanceBelowViewport = panelHeightBottom - bottomSpaceAvailable;
	        // Scrolls the panel up by the distance it was extending past the boundary, then
	        // adjusts the offset by that amount to move the panel up into the viewport.
	        this._scrollTop -= distanceBelowViewport;
	        this._offsetY -= distanceBelowViewport;
	        this._transformOrigin = this._getOriginBasedOnOption();
	        // If the panel is scrolled to the very top, it won't be able to fit the panel
	        // by scrolling, so set the offset to 0 to allow the fallback position to take
	        // effect.
	        if (this._scrollTop <= 0) {
	            this._scrollTop = 0;
	            this._offsetY = 0;
	            this._transformOrigin = "50% bottom 0px";
	        }
	    };
	    /** Adjusts the overlay panel down to fit in the viewport. */
	    MdSelect.prototype._adjustPanelDown = function (panelHeightTop, topSpaceAvailable, maxScroll) {
	        var distanceAboveViewport = panelHeightTop - topSpaceAvailable;
	        // Scrolls the panel down by the distance it was extending past the boundary, then
	        // adjusts the offset by that amount to move the panel down into the viewport.
	        this._scrollTop += distanceAboveViewport;
	        this._offsetY += distanceAboveViewport;
	        this._transformOrigin = this._getOriginBasedOnOption();
	        // If the panel is scrolled to the very bottom, it won't be able to fit the
	        // panel by scrolling, so set the offset to 0 to allow the fallback position
	        // to take effect.
	        if (this._scrollTop >= maxScroll) {
	            this._scrollTop = maxScroll;
	            this._offsetY = 0;
	            this._transformOrigin = "50% top 0px";
	            return;
	        }
	    };
	    /** Sets the transform origin point based on the selected option. */
	    MdSelect.prototype._getOriginBasedOnOption = function () {
	        var originY = Math.abs(this._offsetY) - SELECT_OPTION_HEIGHT_ADJUSTMENT + SELECT_OPTION_HEIGHT / 2;
	        return "50% " + originY + "px 0px";
	    };
	    __decorate$36([
	        _angular_core.ViewChild('trigger'), 
	        __metadata$36('design:type', _angular_core.ElementRef)
	    ], MdSelect.prototype, "trigger", void 0);
	    __decorate$36([
	        _angular_core.ViewChild(ConnectedOverlayDirective), 
	        __metadata$36('design:type', ConnectedOverlayDirective)
	    ], MdSelect.prototype, "overlayDir", void 0);
	    __decorate$36([
	        _angular_core.ContentChildren(MdOption), 
	        __metadata$36('design:type', _angular_core.QueryList)
	    ], MdSelect.prototype, "options", void 0);
	    __decorate$36([
	        _angular_core.Input(), 
	        __metadata$36('design:type', Object)
	    ], MdSelect.prototype, "placeholder", null);
	    __decorate$36([
	        _angular_core.Input(), 
	        __metadata$36('design:type', Object)
	    ], MdSelect.prototype, "disabled", null);
	    __decorate$36([
	        _angular_core.Input(), 
	        __metadata$36('design:type', Object)
	    ], MdSelect.prototype, "required", null);
	    __decorate$36([
	        _angular_core.Output(), 
	        __metadata$36('design:type', _angular_core.EventEmitter)
	    ], MdSelect.prototype, "onOpen", void 0);
	    __decorate$36([
	        _angular_core.Output(), 
	        __metadata$36('design:type', _angular_core.EventEmitter)
	    ], MdSelect.prototype, "onClose", void 0);
	    __decorate$36([
	        _angular_core.Output(), 
	        __metadata$36('design:type', _angular_core.EventEmitter)
	    ], MdSelect.prototype, "change", void 0);
	    MdSelect = __decorate$36([
	        _angular_core.Component({selector: 'md-select, mat-select',
	            template: "<div class=\"mat-select-trigger\" cdk-overlay-origin (click)=\"toggle()\" #origin=\"cdkOverlayOrigin\" #trigger><span class=\"mat-select-placeholder\" [class.mat-floating-placeholder]=\"this.selected\" [@transformPlaceholder]=\"_placeholderState\" [style.width.px]=\"_selectedValueWidth\">{{ placeholder }} </span><span class=\"mat-select-value\" *ngIf=\"selected\"><span class=\"mat-select-value-text\">{{ selected?.viewValue }}</span> </span><span class=\"mat-select-arrow\"></span> <span class=\"mat-select-underline\"></span></div><template cdk-connected-overlay [origin]=\"origin\" [open]=\"panelOpen\" hasBackdrop (backdropClick)=\"close()\" backdropClass=\"cdk-overlay-transparent-backdrop\" [positions]=\"_positions\" [minWidth]=\"_triggerWidth\" [offsetY]=\"_offsetY\" [offsetX]=\"_offsetX\" (attach)=\"_setScrollTop()\"><div class=\"mat-select-panel\" [@transformPanel]=\"'showing'\" (@transformPanel.done)=\"_onPanelDone()\" (keydown)=\"_keyManager.onKeydown($event)\" [style.transformOrigin]=\"_transformOrigin\" [class.mat-select-panel-done-animating]=\"_panelDoneAnimating\"><div class=\"mat-select-content\" [@fadeInContent]=\"'showing'\" (@fadeInContent.done)=\"_onFadeInDone()\"><ng-content></ng-content></div></div></template>",
	            styles: [".mat-select{display:inline-block;outline:0;font-family:Roboto,\"Helvetica Neue\",sans-serif}.mat-select-trigger{display:flex;align-items:center;height:30px;min-width:112px;cursor:pointer;position:relative;box-sizing:border-box;font-size:16px}[aria-disabled=true] .mat-select-trigger{cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.mat-select-underline{position:absolute;bottom:0;left:0;right:0;height:1px}[aria-disabled=true] .mat-select-underline{background-image:linear-gradient(to right,rgba(0,0,0,.26) 0,rgba(0,0,0,.26) 33%,transparent 0);background-size:4px 1px;background-repeat:repeat-x;background-color:transparent;background-position:0 bottom}.mat-select-placeholder{position:relative;padding:0 2px;transform-origin:left top;flex-grow:1}.mat-select-placeholder.mat-floating-placeholder{top:-22px;left:-2px;text-align:left;transform:scale(.75)}[dir=rtl] .mat-select-placeholder{transform-origin:right top}[dir=rtl] .mat-select-placeholder.mat-floating-placeholder{left:2px;text-align:right}[aria-required=true] .mat-select-placeholder::after{content:'*'}.mat-select-value{position:absolute;max-width:calc(100% - 18px);flex-grow:1;top:0;left:0;bottom:0;display:flex;align-items:center}[dir=rtl] .mat-select-value{left:auto;right:0}.mat-select-value-text{white-space:nowrap;overflow-x:hidden;text-overflow:ellipsis;line-height:30px}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px}@media screen and (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}"],
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            host: {
	                'role': 'listbox',
	                '[attr.tabindex]': '_getTabIndex()',
	                '[attr.aria-label]': 'placeholder',
	                '[attr.aria-required]': 'required.toString()',
	                '[attr.aria-disabled]': 'disabled.toString()',
	                '[attr.aria-invalid]': '_control?.invalid || "false"',
	                '[attr.aria-owns]': '_optionIds',
	                '[class.mat-select-disabled]': 'disabled',
	                '[class.mat-select]': 'true',
	                '(keydown)': '_handleKeydown($event)',
	                '(blur)': '_onBlur()'
	            },
	            animations: [
	                transformPlaceholder,
	                transformPanel,
	                fadeInContent
	            ],
	            exportAs: 'mdSelect',
	        }),
	        __param$6(4, _angular_core.Optional()),
	        __param$6(5, _angular_core.Self()),
	        __param$6(5, _angular_core.Optional()), 
	        __metadata$36('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer, ViewportRuler, _angular_core.ChangeDetectorRef, Dir, _angular_forms.NgControl])
	    ], MdSelect);
	    return MdSelect;
	}());
	/** Clamps a value n between min and max values. */
	function clampValue(min, n, max) {
	    return Math.min(Math.max(min, n), max);
	}
	
	var __decorate$35 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$35 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MdSelectModule = (function () {
	    function MdSelectModule() {
	    }
	    /** @deprecated */
	    MdSelectModule.forRoot = function () {
	        return {
	            ngModule: MdSelectModule,
	            providers: []
	        };
	    };
	    MdSelectModule = __decorate$35([
	        _angular_core.NgModule({
	            imports: [_angular_common.CommonModule, OverlayModule, MdOptionModule, CompatibilityModule],
	            exports: [MdSelect, MdOptionModule, CompatibilityModule],
	            declarations: [MdSelect],
	        }), 
	        __metadata$35('design:paramtypes', [])
	    ], MdSelectModule);
	    return MdSelectModule;
	}());
	
	var __decorate$37 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$37 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MD_SLIDE_TOGGLE_VALUE_ACCESSOR = {
	    provide: _angular_forms.NG_VALUE_ACCESSOR,
	    useExisting: _angular_core.forwardRef(function () { return MdSlideToggle; }),
	    multi: true
	};
	// A simple change event emitted by the MdSlideToggle component.
	var MdSlideToggleChange = (function () {
	    function MdSlideToggleChange() {
	    }
	    return MdSlideToggleChange;
	}());
	// Increasing integer for generating unique ids for slide-toggle components.
	var nextId$1 = 0;
	/**
	 * Two-state control, which can be also called `switch`.
	 */
	var MdSlideToggle = (function () {
	    function MdSlideToggle(_elementRef, _renderer) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this.onChange = function (_) { };
	        this.onTouched = function () { };
	        // A unique id for the slide-toggle. By default the id is auto-generated.
	        this._uniqueId = "md-slide-toggle-" + ++nextId$1;
	        this._checked = false;
	        this._isMousedown = false;
	        this._slideRenderer = null;
	        this._disabled = false;
	        this._required = false;
	        // Needs to be public to support AOT compilation (as host binding).
	        this._hasFocus = false;
	        /** Name value will be applied to the input element if present */
	        this.name = null;
	        /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */
	        this.id = this._uniqueId;
	        /** Used to specify the tabIndex value for the underlying input element. */
	        this.tabIndex = 0;
	        /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */
	        this.labelPosition = 'after';
	        /** Used to set the aria-label attribute on the underlying input element. */
	        this.ariaLabel = null;
	        /** Used to set the aria-labelledby attribute on the underlying input element. */
	        this.ariaLabelledby = null;
	        this._change = new _angular_core.EventEmitter();
	        /** An event will be dispatched each time the slide-toggle changes its value. */
	        this.change = this._change.asObservable();
	    }
	    Object.defineProperty(MdSlideToggle.prototype, "disabled", {
	        /** Whether the slide-toggle is disabled. */
	        get: function () { return this._disabled; },
	        set: function (value) { this._disabled = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlideToggle.prototype, "required", {
	        /** Whether the slide-toggle is required. */
	        get: function () { return this._required; },
	        set: function (value) { this._required = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlideToggle.prototype, "inputId", {
	        /** Returns the unique id for the visual hidden input. */
	        get: function () { return (this.id || this._uniqueId) + "-input"; },
	        enumerable: true,
	        configurable: true
	    });
	    MdSlideToggle.prototype.ngAfterContentInit = function () {
	        this._slideRenderer = new SlideToggleRenderer(this._elementRef);
	    };
	    /**
	     * The onChangeEvent method will be also called on click.
	     * This is because everything for the slide-toggle is wrapped inside of a label,
	     * which triggers a onChange event on click.
	     */
	    MdSlideToggle.prototype._onChangeEvent = function (event) {
	        // We always have to stop propagation on the change event.
	        // Otherwise the change event, from the input element, will bubble up and
	        // emit its event object to the component's `change` output.
	        event.stopPropagation();
	        // Once a drag is currently in progress, we do not want to toggle the slide-toggle on a click.
	        if (!this.disabled && !this._slideRenderer.isDragging()) {
	            this.toggle();
	            // Emit our custom change event if the native input emitted one.
	            // It is important to only emit it, if the native input triggered one, because
	            // we don't want to trigger a change event, when the `checked` variable changes for example.
	            this._emitChangeEvent();
	        }
	    };
	    MdSlideToggle.prototype._onInputClick = function (event) {
	        this.onTouched();
	        // We have to stop propagation for click events on the visual hidden input element.
	        // By default, when a user clicks on a label element, a generated click event will be
	        // dispatched on the associated input element. Since we are using a label element as our
	        // root container, the click event on the `slide-toggle` will be executed twice.
	        // The real click event will bubble up, and the generated click event also tries to bubble up.
	        // This will lead to multiple click events.
	        // Preventing bubbling for the second event will solve that issue.
	        event.stopPropagation();
	    };
	    MdSlideToggle.prototype._setMousedown = function () {
	        var _this = this;
	        // We only *show* the focus style when focus has come to the button via the keyboard.
	        // The Material Design spec is silent on this topic, and without doing this, the
	        // button continues to look :active after clicking.
	        // @see http://marcysutton.com/button-focus-hell/
	        this._isMousedown = true;
	        setTimeout(function () { return _this._isMousedown = false; }, 100);
	    };
	    MdSlideToggle.prototype._onInputFocus = function () {
	        // Only show the focus / ripple indicator when the focus was not triggered by a mouse
	        // interaction on the component.
	        if (!this._isMousedown) {
	            this._hasFocus = true;
	        }
	    };
	    MdSlideToggle.prototype._onInputBlur = function () {
	        this._hasFocus = false;
	        this.onTouched();
	    };
	    /** Implemented as part of ControlValueAccessor. */
	    MdSlideToggle.prototype.writeValue = function (value) {
	        this.checked = value;
	    };
	    /** Implemented as part of ControlValueAccessor. */
	    MdSlideToggle.prototype.registerOnChange = function (fn) {
	        this.onChange = fn;
	    };
	    /** Implemented as part of ControlValueAccessor. */
	    MdSlideToggle.prototype.registerOnTouched = function (fn) {
	        this.onTouched = fn;
	    };
	    /** Implemented as a part of ControlValueAccessor. */
	    MdSlideToggle.prototype.setDisabledState = function (isDisabled) {
	        this.disabled = isDisabled;
	    };
	    /** Focuses the slide-toggle. */
	    MdSlideToggle.prototype.focus = function () {
	        this._renderer.invokeElementMethod(this._inputElement.nativeElement, 'focus');
	        this._onInputFocus();
	    };
	    Object.defineProperty(MdSlideToggle.prototype, "checked", {
	        /** Whether the slide-toggle is checked. */
	        get: function () { return !!this._checked; },
	        set: function (value) {
	            if (this.checked !== !!value) {
	                this._checked = value;
	                this.onChange(this._checked);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlideToggle.prototype, "color", {
	        /** The color of the slide-toggle. Can be primary, accent, or warn. */
	        get: function () { return this._color; },
	        set: function (value) {
	            this._updateColor(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Toggles the checked state of the slide-toggle. */
	    MdSlideToggle.prototype.toggle = function () {
	        this.checked = !this.checked;
	    };
	    MdSlideToggle.prototype._updateColor = function (newColor) {
	        this._setElementColor(this._color, false);
	        this._setElementColor(newColor, true);
	        this._color = newColor;
	    };
	    MdSlideToggle.prototype._setElementColor = function (color, isAdd) {
	        if (color != null && color != '') {
	            this._renderer.setElementClass(this._elementRef.nativeElement, "mat-" + color, isAdd);
	        }
	    };
	    /** Emits the change event to the `change` output EventEmitter */
	    MdSlideToggle.prototype._emitChangeEvent = function () {
	        var event = new MdSlideToggleChange();
	        event.source = this;
	        event.checked = this.checked;
	        this._change.emit(event);
	    };
	    MdSlideToggle.prototype._onDragStart = function () {
	        if (!this.disabled) {
	            this._slideRenderer.startThumbDrag(this.checked);
	        }
	    };
	    MdSlideToggle.prototype._onDrag = function (event) {
	        if (this._slideRenderer.isDragging()) {
	            this._slideRenderer.updateThumbPosition(event.deltaX);
	        }
	    };
	    MdSlideToggle.prototype._onDragEnd = function () {
	        var _this = this;
	        if (!this._slideRenderer.isDragging()) {
	            return;
	        }
	        // Notice that we have to stop outside of the current event handler,
	        // because otherwise the click event will be fired and will reset the new checked variable.
	        setTimeout(function () {
	            _this.checked = _this._slideRenderer.stopThumbDrag();
	            _this._emitChangeEvent();
	        }, 0);
	    };
	    __decorate$37([
	        _angular_core.Input(), 
	        __metadata$37('design:type', String)
	    ], MdSlideToggle.prototype, "name", void 0);
	    __decorate$37([
	        _angular_core.Input(), 
	        __metadata$37('design:type', String)
	    ], MdSlideToggle.prototype, "id", void 0);
	    __decorate$37([
	        _angular_core.Input(), 
	        __metadata$37('design:type', Number)
	    ], MdSlideToggle.prototype, "tabIndex", void 0);
	    __decorate$37([
	        _angular_core.Input(), 
	        __metadata$37('design:type', Object)
	    ], MdSlideToggle.prototype, "labelPosition", void 0);
	    __decorate$37([
	        _angular_core.Input('aria-label'), 
	        __metadata$37('design:type', String)
	    ], MdSlideToggle.prototype, "ariaLabel", void 0);
	    __decorate$37([
	        _angular_core.Input('aria-labelledby'), 
	        __metadata$37('design:type', String)
	    ], MdSlideToggle.prototype, "ariaLabelledby", void 0);
	    __decorate$37([
	        _angular_core.Input(), 
	        __metadata$37('design:type', Boolean)
	    ], MdSlideToggle.prototype, "disabled", null);
	    __decorate$37([
	        _angular_core.Input(), 
	        __metadata$37('design:type', Boolean)
	    ], MdSlideToggle.prototype, "required", null);
	    __decorate$37([
	        _angular_core.Output(), 
	        __metadata$37('design:type', rxjs_Observable.Observable)
	    ], MdSlideToggle.prototype, "change", void 0);
	    __decorate$37([
	        _angular_core.ViewChild('input'), 
	        __metadata$37('design:type', _angular_core.ElementRef)
	    ], MdSlideToggle.prototype, "_inputElement", void 0);
	    __decorate$37([
	        _angular_core.Input(), 
	        __metadata$37('design:type', Object)
	    ], MdSlideToggle.prototype, "checked", null);
	    __decorate$37([
	        _angular_core.Input(), 
	        __metadata$37('design:type', String)
	    ], MdSlideToggle.prototype, "color", null);
	    MdSlideToggle = __decorate$37([
	        _angular_core.Component({selector: 'md-slide-toggle, mat-slide-toggle',
	            host: {
	                '[class.mat-slide-toggle]': 'true',
	                '[class.mat-checked]': 'checked',
	                '[class.mat-disabled]': 'disabled',
	                // This mat-slide-toggle prefix will change, once the temporary ripple is removed.
	                '[class.mat-slide-toggle-focused]': '_hasFocus',
	                '[class.mat-slide-toggle-label-before]': 'labelPosition == "before"',
	                '(mousedown)': '_setMousedown()'
	            },
	            template: "<label class=\"mat-slide-toggle-label\"><div class=\"mat-slide-toggle-container\"><div class=\"mat-slide-toggle-bar\"></div><div class=\"mat-slide-toggle-thumb-container\" (slidestart)=\"_onDragStart()\" (slide)=\"_onDrag($event)\" (slideend)=\"_onDragEnd()\"><div class=\"mat-slide-toggle-thumb\"><div class=\"mat-ink-ripple\"></div></div></div><input #input class=\"mat-slide-toggle-input cdk-visually-hidden\" type=\"checkbox\" [id]=\"inputId\" [required]=\"required\" [tabIndex]=\"tabIndex\" [checked]=\"checked\" [disabled]=\"disabled\" [attr.name]=\"name\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledby\" (blur)=\"_onInputBlur()\" (focus)=\"_onInputFocus()\" (change)=\"_onChangeEvent($event)\" (click)=\"_onInputClick($event)\"></div><span class=\"mat-slide-toggle-content\"><ng-content></ng-content></span></label>",
	            styles: [".mat-slide-toggle{display:flex;height:24px;margin:16px 0;line-height:24px;white-space:nowrap;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:0}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(100%,0,0)}.mat-slide-toggle .mat-ink-ripple{border-radius:50%;opacity:0;height:48px;left:50%;overflow:hidden;pointer-events:none;position:absolute;top:50%;transform:translate(-50%,-50%);transition:opacity ease 280ms,background-color ease 280ms;width:48px}.mat-slide-toggle.mat-slide-toggle-focused .mat-ink-ripple{opacity:1}.mat-slide-toggle.mat-slide-toggle-disabled .mat-ink-ripple{background-color:#000}.mat-slide-toggle.mat-disabled .mat-slide-toggle-container,.mat-slide-toggle.mat-disabled .mat-slide-toggle-label{cursor:default}.mat-slide-toggle-content{font-size:14px;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-weight:500}.mat-slide-toggle-label{display:flex;flex:1;cursor:pointer}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-container{order:2}.mat-slide-toggle-container{cursor:-webkit-grab;cursor:grab;width:36px;height:24px;position:relative}.mat-slide-toggle-container,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-container{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-container,[dir=rtl] .mat-slide-toggle-container{margin-left:8px;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;top:2px;left:0;z-index:1;width:16px;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform}.mat-slide-toggle-thumb-container.mat-dragging{transition-duration:0s}.mat-slide-toggle-thumb{position:absolute;margin:0;left:0;top:0;height:20px;width:20px;border-radius:50%;box-shadow:0 2px 1px -1px rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 1px 3px 0 rgba(0,0,0,.12)}@media screen and (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:1px solid #000}.mat-slide-toggle-bar{background:#fff}}.mat-slide-toggle-bar{position:absolute;left:1px;top:5px;width:34px;height:14px;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}"],
	            providers: [MD_SLIDE_TOGGLE_VALUE_ACCESSOR],
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush
	        }), 
	        __metadata$37('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer])
	    ], MdSlideToggle);
	    return MdSlideToggle;
	}());
	/**
	 * Renderer for the Slide Toggle component, which separates DOM modification in its own class
	 */
	var SlideToggleRenderer = (function () {
	    function SlideToggleRenderer(_elementRef) {
	        this._elementRef = _elementRef;
	        this._thumbEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');
	        this._thumbBarEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');
	    }
	    /** Whether the slide-toggle is currently dragging. */
	    SlideToggleRenderer.prototype.isDragging = function () {
	        return !!this._thumbBarWidth;
	    };
	    /** Initializes the drag of the slide-toggle. */
	    SlideToggleRenderer.prototype.startThumbDrag = function (checked) {
	        if (!this.isDragging()) {
	            this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;
	            this._checked = checked;
	            this._thumbEl.classList.add('mat-dragging');
	        }
	    };
	    /** Stops the current drag and returns the new checked value. */
	    SlideToggleRenderer.prototype.stopThumbDrag = function () {
	        if (this.isDragging()) {
	            this._thumbBarWidth = null;
	            this._thumbEl.classList.remove('mat-dragging');
	            applyCssTransform(this._thumbEl, '');
	            return this._percentage > 50;
	        }
	    };
	    /** Updates the thumb containers position from the specified distance. */
	    SlideToggleRenderer.prototype.updateThumbPosition = function (distance) {
	        this._percentage = this._getThumbPercentage(distance);
	        applyCssTransform(this._thumbEl, "translate3d(" + this._percentage + "%, 0, 0)");
	    };
	    /** Retrieves the percentage of thumb from the moved distance. */
	    SlideToggleRenderer.prototype._getThumbPercentage = function (distance) {
	        var percentage = (distance / this._thumbBarWidth) * 100;
	        // When the toggle was initially checked, then we have to start the drag at the end.
	        if (this._checked) {
	            percentage += 100;
	        }
	        return Math.max(0, Math.min(percentage, 100));
	    };
	    return SlideToggleRenderer;
	}());
	var MdSlideToggleModule = (function () {
	    function MdSlideToggleModule() {
	    }
	    /** @deprecated */
	    MdSlideToggleModule.forRoot = function () {
	        return {
	            ngModule: MdSlideToggleModule,
	            providers: []
	        };
	    };
	    MdSlideToggleModule = __decorate$37([
	        _angular_core.NgModule({
	            imports: [_angular_forms.FormsModule, CompatibilityModule],
	            exports: [MdSlideToggle, CompatibilityModule],
	            declarations: [MdSlideToggle],
	            providers: [{ provide: _angular_platformBrowser.HAMMER_GESTURE_CONFIG, useClass: GestureConfig }],
	        }), 
	        __metadata$37('design:paramtypes', [])
	    ], MdSlideToggleModule);
	    return MdSlideToggleModule;
	}());
	
	var __decorate$38 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$38 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$7 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	/**
	 * Visually, a 30px separation between tick marks looks best. This is very subjective but it is
	 * the default separation we chose.
	 */
	var MIN_AUTO_TICK_SEPARATION = 30;
	/** The thumb gap size for a disabled slider. */
	var DISABLED_THUMB_GAP = 7;
	/** The thumb gap size for a non-active slider at its minimum value. */
	var MIN_VALUE_NONACTIVE_THUMB_GAP = 7;
	/** The thumb gap size for an active slider at its minimum value. */
	var MIN_VALUE_ACTIVE_THUMB_GAP = 10;
	/**
	 * Provider Expression that allows md-slider to register as a ControlValueAccessor.
	 * This allows it to support [(ngModel)] and [formControl].
	 */
	var MD_SLIDER_VALUE_ACCESSOR = {
	    provide: _angular_forms.NG_VALUE_ACCESSOR,
	    useExisting: _angular_core.forwardRef(function () { return MdSlider; }),
	    multi: true
	};
	/** A simple change event emitted by the MdSlider component. */
	var MdSliderChange = (function () {
	    function MdSliderChange() {
	    }
	    return MdSliderChange;
	}());
	/**
	 * Allows users to select from a range of values by moving the slider thumb. It is similar in
	 * behavior to the native `<input type="range">` element.
	 */
	var MdSlider = (function () {
	    function MdSlider(_dir, elementRef) {
	        this._dir = _dir;
	        /** A renderer to handle updating the slider's thumb and fill track. */
	        this._renderer = null;
	        /** The dimensions of the slider. */
	        this._sliderDimensions = null;
	        this._disabled = false;
	        this._thumbLabel = false;
	        this._controlValueAccessorChangeFn = function () { };
	        /** The last values for which a change or input event was emitted. */
	        this._lastChangeValue = null;
	        this._lastInputValue = null;
	        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */
	        this.onTouched = function () { };
	        /**
	         * Whether or not the thumb is sliding.
	         * Used to determine if there should be a transition for the thumb and fill track.
	         */
	        this._isSliding = false;
	        /**
	         * Whether or not the slider is active (clicked or sliding).
	         * Used to shrink and grow the thumb as according to the Material Design spec.
	         */
	        this._isActive = false;
	        this._step = 1;
	        this._tickInterval = 0;
	        this._tickIntervalPercent = 0;
	        this._percent = 0;
	        this._value = null;
	        this._min = 0;
	        this._max = 100;
	        this._invert = false;
	        this._vertical = false;
	        /** Event emitted when the slider value has changed. */
	        this.change = new _angular_core.EventEmitter();
	        /** Event emitted when the slider thumb moves. */
	        this.input = new _angular_core.EventEmitter();
	        this._renderer = new SliderRenderer(elementRef);
	    }
	    Object.defineProperty(MdSlider.prototype, "disabled", {
	        /** Whether or not the slider is disabled. */
	        get: function () { return this._disabled; },
	        set: function (value) { this._disabled = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "thumbLabel", {
	        /** Whether or not to show the thumb label. */
	        get: function () { return this._thumbLabel; },
	        set: function (value) { this._thumbLabel = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "_thumbLabelDeprecated", {
	        /** @deprecated */
	        get: function () { return this._thumbLabel; },
	        set: function (value) { this._thumbLabel = value; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "step", {
	        /** The values at which the thumb will snap. */
	        get: function () { return this._step; },
	        set: function (v) {
	            this._step = coerceNumberProperty(v, this._step);
	            if (this._step % 1 !== 0) {
	                this._roundLabelTo = this._step.toString().split('.').pop().length;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "tickInterval", {
	        /**
	         * How often to show ticks. Relative to the step so that a tick always appears on a step.
	         * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).
	         */
	        get: function () { return this._tickInterval; },
	        set: function (v) {
	            this._tickInterval = (v == 'auto') ? v : coerceNumberProperty(v, this._tickInterval);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "_tickIntervalDeprecated", {
	        /** @deprecated */
	        get: function () { return this.tickInterval; },
	        set: function (v) { this.tickInterval = v; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "tickIntervalPercent", {
	        /** The size of a tick interval as a percentage of the size of the track. */
	        get: function () { return this._tickIntervalPercent; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "percent", {
	        /** The percentage of the slider that coincides with the value. */
	        get: function () { return this._clamp(this._percent); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "value", {
	        /** Value of the slider. */
	        get: function () {
	            // If the value needs to be read and it is still uninitialized, initialize it to the min.
	            if (this._value === null) {
	                this.value = this._min;
	            }
	            return this._value;
	        },
	        set: function (v) {
	            this._value = coerceNumberProperty(v, this._value);
	            this._percent = this._calculatePercentage(this._value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "min", {
	        /** The minimum value that the slider can have. */
	        get: function () {
	            return this._min;
	        },
	        set: function (v) {
	            this._min = coerceNumberProperty(v, this._min);
	            // If the value wasn't explicitly set by the user, set it to the min.
	            if (this._value === null) {
	                this.value = this._min;
	            }
	            this._percent = this._calculatePercentage(this.value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "max", {
	        /** The maximum value that the slider can have. */
	        get: function () {
	            return this._max;
	        },
	        set: function (v) {
	            this._max = coerceNumberProperty(v, this._max);
	            this._percent = this._calculatePercentage(this.value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "invert", {
	        /** Whether the slider is inverted. */
	        get: function () { return this._invert; },
	        set: function (value) { this._invert = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "vertical", {
	        /** Whether the slider is vertical. */
	        get: function () { return this._vertical; },
	        set: function (value) { this._vertical = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "displayValue", {
	        /** The value to be used for display purposes. */
	        get: function () {
	            // Note that this could be improved further by rounding something like 0.999 to 1 or
	            // 0.899 to 0.9, however it is very performance sensitive, because it gets called on
	            // every change detection cycle.
	            if (this._roundLabelTo && this.value % 1 !== 0) {
	                return this.value.toFixed(this._roundLabelTo);
	            }
	            return this.value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "invertAxis", {
	        /**
	         * Whether the axis of the slider is inverted.
	         * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).
	         */
	        get: function () {
	            // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to
	            // top. However from a y-axis standpoint this is inverted.
	            return this.vertical ? !this.invert : this.invert;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "invertMouseCoords", {
	        /**
	         * Whether mouse events should be converted to a slider position by calculating their distance
	         * from the right or bottom edge of the slider as opposed to the top or left.
	         */
	        get: function () {
	            return (this.direction == 'rtl' && !this.vertical) ? !this.invertAxis : this.invertAxis;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "_isMinValue", {
	        /** Whether the slider is at its minimum value. */
	        get: function () {
	            return this.percent === 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "_thumbGap", {
	        /**
	         * The amount of space to leave between the slider thumb and the track fill & track background
	         * elements.
	         */
	        get: function () {
	            if (this.disabled) {
	                return DISABLED_THUMB_GAP;
	            }
	            if (this._isMinValue && !this.thumbLabel) {
	                return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;
	            }
	            return 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "trackBackgroundStyles", {
	        /** CSS styles for the track background element. */
	        get: function () {
	            var axis = this.vertical ? 'Y' : 'X';
	            var sign = this.invertMouseCoords ? '-' : '';
	            return {
	                'transform': "translate" + axis + "(" + sign + this._thumbGap + "px) scale" + axis + "(" + (1 - this.percent) + ")"
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "trackFillStyles", {
	        /** CSS styles for the track fill element. */
	        get: function () {
	            var axis = this.vertical ? 'Y' : 'X';
	            var sign = this.invertMouseCoords ? '' : '-';
	            return {
	                'transform': "translate" + axis + "(" + sign + this._thumbGap + "px) scale" + axis + "(" + this.percent + ")"
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "ticksContainerStyles", {
	        /** CSS styles for the ticks container element. */
	        get: function () {
	            var axis = this.vertical ? 'Y' : 'X';
	            // For a horizontal slider in RTL languages we push the ticks container off the left edge
	            // instead of the right edge to avoid causing a horizontal scrollbar to appear.
	            var sign = !this.vertical && this.direction == 'rtl' ? '' : '-';
	            var offset = this.tickIntervalPercent / 2 * 100;
	            return {
	                'transform': "translate" + axis + "(" + sign + offset + "%)"
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "ticksStyles", {
	        /** CSS styles for the ticks element. */
	        get: function () {
	            var tickSize = this.tickIntervalPercent * 100;
	            var backgroundSize = this.vertical ? "2px " + tickSize + "%" : tickSize + "% 2px";
	            var axis = this.vertical ? 'Y' : 'X';
	            // Depending on the direction we pushed the ticks container, push the ticks the opposite
	            // direction to re-center them but clip off the end edge. In RTL languages we need to flip the
	            // ticks 180 degrees so we're really cutting off the end edge abd not the start.
	            var sign = !this.vertical && this.direction == 'rtl' ? '-' : '';
	            var rotate = !this.vertical && this.direction == 'rtl' ? ' rotate(180deg)' : '';
	            var styles = {
	                'backgroundSize': backgroundSize,
	                // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.
	                'transform': "translateZ(0) translate" + axis + "(" + sign + tickSize / 2 + "%)" + rotate
	            };
	            if (this._isMinValue && this._thumbGap) {
	                var side = this.vertical ?
	                    (this.invertAxis ? 'Bottom' : 'Top') :
	                    (this.invertAxis ? 'Right' : 'Left');
	                styles[("padding" + side)] = this._thumbGap + "px";
	            }
	            return styles;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "thumbContainerStyles", {
	        get: function () {
	            var axis = this.vertical ? 'Y' : 'X';
	            // For a horizontal slider in RTL languages we push the thumb container off the left edge
	            // instead of the right edge to avoid causing a horizontal scrollbar to appear.
	            var invertOffset = (this.direction == 'rtl' && !this.vertical) ? !this.invertAxis : this.invertAxis;
	            var offset = (invertOffset ? this.percent : 1 - this.percent) * 100;
	            return {
	                'transform': "translate" + axis + "(-" + offset + "%)"
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "direction", {
	        /** The language direction for this slider element. */
	        get: function () {
	            return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdSlider.prototype._onMouseenter = function () {
	        if (this.disabled) {
	            return;
	        }
	        // We save the dimensions of the slider here so we can use them to update the spacing of the
	        // ticks and determine where on the slider click and slide events happen.
	        this._sliderDimensions = this._renderer.getSliderDimensions();
	        this._updateTickIntervalPercent();
	    };
	    MdSlider.prototype._onClick = function (event) {
	        if (this.disabled) {
	            return;
	        }
	        this._isActive = true;
	        this._isSliding = false;
	        this._renderer.addFocus();
	        this._updateValueFromPosition({ x: event.clientX, y: event.clientY });
	        /* Emits a change and input event if the value changed. */
	        this._emitInputEvent();
	        this._emitValueIfChanged();
	    };
	    MdSlider.prototype._onSlide = function (event) {
	        if (this.disabled) {
	            return;
	        }
	        // Prevent the slide from selecting anything else.
	        event.preventDefault();
	        this._updateValueFromPosition({ x: event.center.x, y: event.center.y });
	        // Native range elements always emit `input` events when the value changed while sliding.
	        this._emitInputEvent();
	    };
	    MdSlider.prototype._onSlideStart = function (event) {
	        if (this.disabled) {
	            return;
	        }
	        // Simulate mouseenter in case this is a mobile device.
	        this._onMouseenter();
	        event.preventDefault();
	        this._isSliding = true;
	        this._isActive = true;
	        this._renderer.addFocus();
	        this._updateValueFromPosition({ x: event.center.x, y: event.center.y });
	    };
	    MdSlider.prototype._onSlideEnd = function () {
	        this._isSliding = false;
	        this._emitValueIfChanged();
	    };
	    MdSlider.prototype._onBlur = function () {
	        this._isActive = false;
	        this.onTouched();
	    };
	    MdSlider.prototype._onKeydown = function (event) {
	        if (this.disabled) {
	            return;
	        }
	        switch (event.keyCode) {
	            case PAGE_UP:
	                this._increment(10);
	                break;
	            case PAGE_DOWN:
	                this._increment(-10);
	                break;
	            case END:
	                this.value = this.max;
	                break;
	            case HOME:
	                this.value = this.min;
	                break;
	            case LEFT_ARROW:
	                // NOTE: For a sighted user it would make more sense that when they press an arrow key on an
	                // inverted slider the thumb moves in that direction. However for a blind user, nothing
	                // about the slider indicates that it is inverted. They will expect left to be decrement,
	                // regardless of how it appears on the screen. For speakers ofRTL languages, they probably
	                // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for
	                // RTL. For inverted sliders we prefer a good a11y experience to having it "look right" for
	                // sighted users, therefore we do not swap the meaning.
	                this._increment(this.direction == 'rtl' ? 1 : -1);
	                break;
	            case UP_ARROW:
	                this._increment(1);
	                break;
	            case RIGHT_ARROW:
	                // See comment on LEFT_ARROW about the conditions under which we flip the meaning.
	                this._increment(this.direction == 'rtl' ? -1 : 1);
	                break;
	            case DOWN_ARROW:
	                this._increment(-1);
	                break;
	            default:
	                // Return if the key is not one that we explicitly handle to avoid calling preventDefault on
	                // it.
	                return;
	        }
	        this._isSliding = true;
	        event.preventDefault();
	    };
	    MdSlider.prototype._onKeyup = function () {
	        this._isSliding = false;
	    };
	    /** Increments the slider by the given number of steps (negative number decrements). */
	    MdSlider.prototype._increment = function (numSteps) {
	        this.value = this._clamp(this.value + this.step * numSteps, this.min, this.max);
	        this._emitInputEvent();
	        this._emitValueIfChanged();
	    };
	    /** Calculate the new value from the new physical location. The value will always be snapped. */
	    MdSlider.prototype._updateValueFromPosition = function (pos) {
	        if (!this._sliderDimensions) {
	            return;
	        }
	        var offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;
	        var size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;
	        var posComponent = this.vertical ? pos.y : pos.x;
	        // The exact value is calculated from the event and used to find the closest snap value.
	        var percent = this._clamp((posComponent - offset) / size);
	        if (this.invertMouseCoords) {
	            percent = 1 - percent;
	        }
	        var exactValue = this._calculateValue(percent);
	        // This calculation finds the closest step by finding the closest whole number divisible by the
	        // step relative to the min.
	        var closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;
	        // The value needs to snap to the min and max.
	        this.value = this._clamp(closestValue, this.min, this.max);
	    };
	    /** Emits a change event if the current value is different from the last emitted value. */
	    MdSlider.prototype._emitValueIfChanged = function () {
	        if (this.value != this._lastChangeValue) {
	            var event_1 = this._createChangeEvent();
	            this._lastChangeValue = this.value;
	            this._controlValueAccessorChangeFn(this.value);
	            this.change.emit(event_1);
	        }
	    };
	    /** Emits an input event when the current value is different from the last emitted value. */
	    MdSlider.prototype._emitInputEvent = function () {
	        if (this.value != this._lastInputValue) {
	            var event_2 = this._createChangeEvent();
	            this._lastInputValue = this.value;
	            this.input.emit(event_2);
	        }
	    };
	    /** Updates the amount of space between ticks as a percentage of the width of the slider. */
	    MdSlider.prototype._updateTickIntervalPercent = function () {
	        if (!this.tickInterval) {
	            return;
	        }
	        if (this.tickInterval == 'auto') {
	            var trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;
	            var pixelsPerStep = trackSize * this.step / (this.max - this.min);
	            var stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);
	            var pixelsPerTick = stepsPerTick * this.step;
	            this._tickIntervalPercent = pixelsPerTick / trackSize;
	        }
	        else {
	            this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);
	        }
	    };
	    /** Creates a slider change object from the specified value. */
	    MdSlider.prototype._createChangeEvent = function (value) {
	        if (value === void 0) { value = this.value; }
	        var event = new MdSliderChange();
	        event.source = this;
	        event.value = value;
	        return event;
	    };
	    /** Calculates the percentage of the slider that a value is. */
	    MdSlider.prototype._calculatePercentage = function (value) {
	        return (value - this.min) / (this.max - this.min);
	    };
	    /** Calculates the value a percentage of the slider corresponds to. */
	    MdSlider.prototype._calculateValue = function (percentage) {
	        return this.min + percentage * (this.max - this.min);
	    };
	    /** Return a number between two numbers. */
	    MdSlider.prototype._clamp = function (value, min, max) {
	        if (min === void 0) { min = 0; }
	        if (max === void 0) { max = 1; }
	        return Math.max(min, Math.min(value, max));
	    };
	    /**
	     * Sets the model value. Implemented as part of ControlValueAccessor.
	     * @param value
	     */
	    MdSlider.prototype.writeValue = function (value) {
	        this.value = value;
	    };
	    /**
	     * Registers a callback to eb triggered when the value has changed.
	     * Implemented as part of ControlValueAccessor.
	     * @param fn Callback to be registered.
	     */
	    MdSlider.prototype.registerOnChange = function (fn) {
	        this._controlValueAccessorChangeFn = fn;
	    };
	    /**
	     * Registers a callback to be triggered when the component is touched.
	     * Implemented as part of ControlValueAccessor.
	     * @param fn Callback to be registered.
	     */
	    MdSlider.prototype.registerOnTouched = function (fn) {
	        this.onTouched = fn;
	    };
	    /**
	     * Sets whether the component should be disabled.
	     * Implemented as part of ControlValueAccessor.
	     * @param isDisabled
	     */
	    MdSlider.prototype.setDisabledState = function (isDisabled) {
	        this.disabled = isDisabled;
	    };
	    __decorate$38([
	        _angular_core.Input(), 
	        __metadata$38('design:type', Boolean)
	    ], MdSlider.prototype, "disabled", null);
	    __decorate$38([
	        _angular_core.Input('thumbLabel'), 
	        __metadata$38('design:type', Boolean)
	    ], MdSlider.prototype, "thumbLabel", null);
	    __decorate$38([
	        _angular_core.Input('thumb-label'), 
	        __metadata$38('design:type', Boolean)
	    ], MdSlider.prototype, "_thumbLabelDeprecated", null);
	    __decorate$38([
	        _angular_core.Input(), 
	        __metadata$38('design:type', Object)
	    ], MdSlider.prototype, "step", null);
	    __decorate$38([
	        _angular_core.Input(), 
	        __metadata$38('design:type', Object)
	    ], MdSlider.prototype, "tickInterval", null);
	    __decorate$38([
	        _angular_core.Input('tick-interval'), 
	        __metadata$38('design:type', Object)
	    ], MdSlider.prototype, "_tickIntervalDeprecated", null);
	    __decorate$38([
	        _angular_core.Input(), 
	        __metadata$38('design:type', Object)
	    ], MdSlider.prototype, "value", null);
	    __decorate$38([
	        _angular_core.Input(), 
	        __metadata$38('design:type', Object)
	    ], MdSlider.prototype, "min", null);
	    __decorate$38([
	        _angular_core.Input(), 
	        __metadata$38('design:type', Object)
	    ], MdSlider.prototype, "max", null);
	    __decorate$38([
	        _angular_core.Input(), 
	        __metadata$38('design:type', Object)
	    ], MdSlider.prototype, "invert", null);
	    __decorate$38([
	        _angular_core.Input(), 
	        __metadata$38('design:type', Object)
	    ], MdSlider.prototype, "vertical", null);
	    __decorate$38([
	        _angular_core.Output(), 
	        __metadata$38('design:type', Object)
	    ], MdSlider.prototype, "change", void 0);
	    __decorate$38([
	        _angular_core.Output(), 
	        __metadata$38('design:type', Object)
	    ], MdSlider.prototype, "input", void 0);
	    MdSlider = __decorate$38([
	        _angular_core.Component({selector: 'md-slider, mat-slider',
	            providers: [MD_SLIDER_VALUE_ACCESSOR],
	            host: {
	                '[class.mat-slider]': 'true',
	                '(blur)': '_onBlur()',
	                '(click)': '_onClick($event)',
	                '(keydown)': '_onKeydown($event)',
	                '(keyup)': '_onKeyup()',
	                '(mouseenter)': '_onMouseenter()',
	                '(slide)': '_onSlide($event)',
	                '(slideend)': '_onSlideEnd()',
	                '(slidestart)': '_onSlideStart($event)',
	                'role': 'slider',
	                'tabindex': '0',
	                '[attr.aria-disabled]': 'disabled',
	                '[attr.aria-valuemax]': 'max',
	                '[attr.aria-valuemin]': 'min',
	                '[attr.aria-valuenow]': 'value',
	                '[class.mat-slider-active]': '_isActive',
	                '[class.mat-slider-disabled]': 'disabled',
	                '[class.mat-slider-has-ticks]': 'tickInterval',
	                '[class.mat-slider-horizontal]': '!vertical',
	                '[class.mat-slider-axis-inverted]': 'invertAxis',
	                '[class.mat-slider-sliding]': '_isSliding',
	                '[class.mat-slider-thumb-label-showing]': 'thumbLabel',
	                '[class.mat-slider-vertical]': 'vertical',
	                '[class.mat-slider-min-value]': '_isMinValue',
	                '[class.mat-slider-hide-last-tick]': '_isMinValue && _thumbGap && invertAxis',
	            },
	            template: "<div class=\"mat-slider-wrapper\"><div class=\"mat-slider-track-wrapper\"><div class=\"mat-slider-track-background\" [ngStyle]=\"trackBackgroundStyles\"></div><div class=\"mat-slider-track-fill\" [ngStyle]=\"trackFillStyles\"></div></div><div class=\"mat-slider-ticks-container\" [ngStyle]=\"ticksContainerStyles\"><div class=\"mat-slider-ticks\" [ngStyle]=\"ticksStyles\"></div></div><div class=\"mat-slider-thumb-container\" [ngStyle]=\"thumbContainerStyles\"><div class=\"mat-slider-thumb\"></div><div class=\"mat-slider-thumb-label\"><span class=\"mat-slider-thumb-label-text\">{{displayValue}}</span></div></div></div>",
	            styles: [".mat-slider-track-background,.mat-slider-track-fill{transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:0;vertical-align:middle}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0}.mat-slider-track-background{position:absolute;transform-origin:100% 100%}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{box-sizing:border-box;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-disabled .mat-slider-ticks{opacity:0}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(.7);transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1),border-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform .4s cubic-bezier(.25,.8,.25,1),border-radius .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-thumb-label-text{z-index:1;font-size:12px;font-weight:700;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-sliding .mat-slider-thumb-container,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-track-fill{transition-duration:0s}.mat-slider-has-ticks .mat-slider-wrapper::after{content:'';position:absolute;border:0 solid rgba(0,0,0,.6);opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-active .mat-slider-thumb-label-text,.mat-slider-has-ticks.mat-slider-active .mat-slider-ticks,.mat-slider-has-ticks.mat-slider-active:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider-active .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-active.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider-active .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.mat-slider-horizontal .mat-slider-ticks{background:repeating-linear-gradient(to right,rgba(0,0,0,.6),rgba(0,0,0,.6) 2px,transparent 0,transparent);background:-moz-repeating-linear-gradient(.0001deg,rgba(0,0,0,.6),rgba(0,0,0,.6) 2px,transparent 0,transparent);background-clip:content-box;height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.mat-slider-active .mat-slider-thumb-label{transform:rotate(45deg)}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.mat-slider-vertical .mat-slider-ticks{background:repeating-linear-gradient(to bottom,rgba(0,0,0,.6),rgba(0,0,0,.6) 2px,transparent 0,transparent);background-clip:content-box;width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.mat-slider-active .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background,[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}"],
	            encapsulation: _angular_core.ViewEncapsulation.None,
	        }),
	        __param$7(0, _angular_core.Optional()), 
	        __metadata$38('design:paramtypes', [Dir, _angular_core.ElementRef])
	    ], MdSlider);
	    return MdSlider;
	}());
	/**
	 * Renderer class in order to keep all dom manipulation in one place and outside of the main class.
	 * @docs-private
	 */
	var SliderRenderer = (function () {
	    function SliderRenderer(elementRef) {
	        this._sliderElement = elementRef.nativeElement;
	    }
	    /**
	     * Get the bounding client rect of the slider track element.
	     * The track is used rather than the native element to ignore the extra space that the thumb can
	     * take up.
	     */
	    SliderRenderer.prototype.getSliderDimensions = function () {
	        var wrapperElement = this._sliderElement.querySelector('.mat-slider-wrapper');
	        return wrapperElement.getBoundingClientRect();
	    };
	    /**
	     * Focuses the native element.
	     * Currently only used to allow a blur event to fire but will be used with keyboard input later.
	     */
	    SliderRenderer.prototype.addFocus = function () {
	        this._sliderElement.focus();
	    };
	    return SliderRenderer;
	}());
	var MdSliderModule = (function () {
	    function MdSliderModule() {
	    }
	    /** @deprecated */
	    MdSliderModule.forRoot = function () {
	        return {
	            ngModule: MdSliderModule,
	            providers: []
	        };
	    };
	    MdSliderModule = __decorate$38([
	        _angular_core.NgModule({
	            imports: [_angular_common.CommonModule, _angular_forms.FormsModule, CompatibilityModule],
	            exports: [MdSlider, CompatibilityModule],
	            declarations: [MdSlider],
	            providers: [{ provide: _angular_platformBrowser.HAMMER_GESTURE_CONFIG, useClass: GestureConfig }]
	        }), 
	        __metadata$38('design:paramtypes', [])
	    ], MdSliderModule);
	    return MdSliderModule;
	}());
	
	var __extends$9 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate$39 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$39 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$8 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	/** Exception thrown when two MdSidenav are matching the same side. */
	var MdDuplicatedSidenavError = (function (_super) {
	    __extends$9(MdDuplicatedSidenavError, _super);
	    function MdDuplicatedSidenavError(align) {
	        _super.call(this, "A sidenav was already declared for 'align=\"" + align + "\"'");
	    }
	    return MdDuplicatedSidenavError;
	}(MdError));
	/** Sidenav toggle promise result. */
	var MdSidenavToggleResult = (function () {
	    function MdSidenavToggleResult(type, animationFinished) {
	        this.type = type;
	        this.animationFinished = animationFinished;
	    }
	    return MdSidenavToggleResult;
	}());
	/**
	 * <md-sidenav> component.
	 *
	 * This component corresponds to the drawer of the sidenav.
	 *
	 * Please refer to README.md for examples on how to use it.
	 */
	var MdSidenav = (function () {
	    /**
	     * @param _elementRef The DOM element reference. Used for transition and width calculation.
	     *     If not available we do not hook on transitions.
	     */
	    function MdSidenav(_elementRef, _renderer) {
	        var _this = this;
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        /** Alignment of the sidenav (direction neutral); whether 'start' or 'end'. */
	        this._align = 'start';
	        this._valid = true;
	        /** Mode of the sidenav; whether 'over' or 'side'. */
	        this.mode = 'over';
	        this._disableClose = false;
	        /** Whether the sidenav is opened. */
	        this._opened = false;
	        /** Event emitted when the sidenav is being opened. Use this to synchronize animations. */
	        this.onOpenStart = new _angular_core.EventEmitter();
	        /** Event emitted when the sidenav is fully opened. */
	        this.onOpen = new _angular_core.EventEmitter();
	        /** Event emitted when the sidenav is being closed. Use this to synchronize animations. */
	        this.onCloseStart = new _angular_core.EventEmitter();
	        /** Event emitted when the sidenav is fully closed. */
	        this.onClose = new _angular_core.EventEmitter();
	        /** Event emitted when the sidenav alignment changes. */
	        this.onAlignChanged = new _angular_core.EventEmitter();
	        /** The current toggle animation promise. `null` if no animation is in progress. */
	        this._toggleAnimationPromise = null;
	        /**
	         * The current toggle animation promise resolution function.
	         * `null` if no animation is in progress.
	         */
	        this._resolveToggleAnimationPromise = null;
	        this._elementFocusedBeforeSidenavWasOpened = null;
	        this.onOpen.subscribe(function () {
	            _this._elementFocusedBeforeSidenavWasOpened = document.activeElement;
	            if (!_this.isFocusTrapDisabled) {
	                _this._focusTrap.focusFirstTabbableElementWhenReady();
	            }
	        });
	        this.onClose.subscribe(function () {
	            if (_this._elementFocusedBeforeSidenavWasOpened instanceof HTMLElement) {
	                _this._renderer.invokeElementMethod(_this._elementFocusedBeforeSidenavWasOpened, 'focus');
	            }
	            else {
	                _this._renderer.invokeElementMethod(_this._elementRef.nativeElement, 'blur');
	            }
	            _this._elementFocusedBeforeSidenavWasOpened = null;
	        });
	    }
	    Object.defineProperty(MdSidenav.prototype, "valid", {
	        /** Whether this md-sidenav is part of a valid md-sidenav-container configuration. */
	        get: function () { return this._valid; },
	        set: function (value) {
	            value = coerceBooleanProperty(value);
	            // When the drawers are not in a valid configuration we close them all until they are in a valid
	            // configuration again.
	            if (!value) {
	                this.close();
	            }
	            this._valid = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSidenav.prototype, "align", {
	        /** Direction which the sidenav is aligned in. */
	        get: function () { return this._align; },
	        set: function (value) {
	            // Make sure we have a valid value.
	            value = (value == 'end') ? 'end' : 'start';
	            if (value != this._align) {
	                this._align = value;
	                this.onAlignChanged.emit();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSidenav.prototype, "disableClose", {
	        /** Whether the sidenav can be closed with the escape key or not. */
	        get: function () { return this._disableClose; },
	        set: function (value) { this._disableClose = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSidenav.prototype, "isFocusTrapDisabled", {
	        get: function () {
	            // The focus trap is only enabled when the sidenav is open in any mode other than side.
	            return !this.opened || this.mode == 'side';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdSidenav.prototype.ngAfterContentInit = function () {
	        // This can happen when the sidenav is set to opened in the template and the transition
	        // isn't ended.
	        if (this._toggleAnimationPromise) {
	            this._resolveToggleAnimationPromise(true);
	            this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;
	        }
	    };
	    Object.defineProperty(MdSidenav.prototype, "opened", {
	        /**
	         * Whether the sidenav is opened. We overload this because we trigger an event when it
	         * starts or end.
	         */
	        get: function () { return this._opened; },
	        set: function (v) {
	            this.toggle(coerceBooleanProperty(v));
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Open this sidenav, and return a Promise that will resolve when it's fully opened (or get
	     * rejected if it didn't). */
	    MdSidenav.prototype.open = function () {
	        return this.toggle(true);
	    };
	    /**
	     * Close this sidenav, and return a Promise that will resolve when it's fully closed (or get
	     * rejected if it didn't).
	     */
	    MdSidenav.prototype.close = function () {
	        return this.toggle(false);
	    };
	    /**
	     * Toggle this sidenav. This is equivalent to calling open() when it's already opened, or
	     * close() when it's closed.
	     * @param isOpen Whether the sidenav should be open.
	     * @returns Resolves with the result of whether the sidenav was opened or closed.
	     */
	    MdSidenav.prototype.toggle = function (isOpen) {
	        var _this = this;
	        if (isOpen === void 0) { isOpen = !this.opened; }
	        if (!this.valid) {
	            return Promise.resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', true));
	        }
	        // Shortcut it if we're already opened.
	        if (isOpen === this.opened) {
	            return this._toggleAnimationPromise ||
	                Promise.resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', true));
	        }
	        this._opened = isOpen;
	        if (isOpen) {
	            this.onOpenStart.emit();
	        }
	        else {
	            this.onCloseStart.emit();
	        }
	        if (this._toggleAnimationPromise) {
	            this._resolveToggleAnimationPromise(false);
	        }
	        this._toggleAnimationPromise = new Promise(function (resolve) {
	            _this._resolveToggleAnimationPromise = function (animationFinished) {
	                return resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', animationFinished));
	            };
	        });
	        return this._toggleAnimationPromise;
	    };
	    /**
	     * Handles the keyboard events.
	     * @docs-private
	     */
	    MdSidenav.prototype.handleKeydown = function (event) {
	        if (event.keyCode === ESCAPE && !this.disableClose) {
	            this.close();
	            event.stopPropagation();
	        }
	    };
	    /**
	     * When transition has finished, set the internal state for classes and emit the proper event.
	     * The event passed is actually of type TransitionEvent, but that type is not available in
	     * Android so we use any.
	     */
	    MdSidenav.prototype._onTransitionEnd = function (transitionEvent) {
	        if (transitionEvent.target == this._elementRef.nativeElement
	            && transitionEvent.propertyName.endsWith('transform')) {
	            if (this._opened) {
	                this.onOpen.emit();
	            }
	            else {
	                this.onClose.emit();
	            }
	            if (this._toggleAnimationPromise) {
	                this._resolveToggleAnimationPromise(true);
	                this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;
	            }
	        }
	    };
	    Object.defineProperty(MdSidenav.prototype, "_isClosing", {
	        get: function () {
	            return !this._opened && !!this._toggleAnimationPromise;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSidenav.prototype, "_isOpening", {
	        get: function () {
	            return this._opened && !!this._toggleAnimationPromise;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSidenav.prototype, "_isClosed", {
	        get: function () {
	            return !this._opened && !this._toggleAnimationPromise;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSidenav.prototype, "_isOpened", {
	        get: function () {
	            return this._opened && !this._toggleAnimationPromise;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSidenav.prototype, "_isEnd", {
	        get: function () {
	            return this.align == 'end';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSidenav.prototype, "_modeSide", {
	        get: function () {
	            return this.mode == 'side';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSidenav.prototype, "_modeOver", {
	        get: function () {
	            return this.mode == 'over';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSidenav.prototype, "_modePush", {
	        get: function () {
	            return this.mode == 'push';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSidenav.prototype, "_width", {
	        get: function () {
	            if (this._elementRef.nativeElement) {
	                return this._elementRef.nativeElement.offsetWidth;
	            }
	            return 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    __decorate$39([
	        _angular_core.ViewChild(FocusTrap), 
	        __metadata$39('design:type', FocusTrap)
	    ], MdSidenav.prototype, "_focusTrap", void 0);
	    __decorate$39([
	        _angular_core.Input(), 
	        __metadata$39('design:type', Object)
	    ], MdSidenav.prototype, "align", null);
	    __decorate$39([
	        _angular_core.Input(), 
	        __metadata$39('design:type', Object)
	    ], MdSidenav.prototype, "mode", void 0);
	    __decorate$39([
	        _angular_core.Input(), 
	        __metadata$39('design:type', Boolean)
	    ], MdSidenav.prototype, "disableClose", null);
	    __decorate$39([
	        _angular_core.Output('open-start'), 
	        __metadata$39('design:type', Object)
	    ], MdSidenav.prototype, "onOpenStart", void 0);
	    __decorate$39([
	        _angular_core.Output('open'), 
	        __metadata$39('design:type', Object)
	    ], MdSidenav.prototype, "onOpen", void 0);
	    __decorate$39([
	        _angular_core.Output('close-start'), 
	        __metadata$39('design:type', Object)
	    ], MdSidenav.prototype, "onCloseStart", void 0);
	    __decorate$39([
	        _angular_core.Output('close'), 
	        __metadata$39('design:type', Object)
	    ], MdSidenav.prototype, "onClose", void 0);
	    __decorate$39([
	        _angular_core.Output('align-changed'), 
	        __metadata$39('design:type', Object)
	    ], MdSidenav.prototype, "onAlignChanged", void 0);
	    __decorate$39([
	        _angular_core.Input(), 
	        __metadata$39('design:type', Boolean)
	    ], MdSidenav.prototype, "opened", null);
	    MdSidenav = __decorate$39([
	        _angular_core.Component({selector: 'md-sidenav, mat-sidenav',
	            // TODO(mmalerba): move template to separate file.
	            template: "<cdk-focus-trap class=\"mat-sidenav-focus-trap\" [disabled]=\"isFocusTrapDisabled\"><ng-content></ng-content></cdk-focus-trap>",
	            host: {
	                '[class.mat-sidenav]': 'true',
	                '(transitionend)': '_onTransitionEnd($event)',
	                '(keydown)': 'handleKeydown($event)',
	                // must prevent the browser from aligning text based on value
	                '[attr.align]': 'null',
	                '[class.mat-sidenav-closed]': '_isClosed',
	                '[class.mat-sidenav-closing]': '_isClosing',
	                '[class.mat-sidenav-end]': '_isEnd',
	                '[class.mat-sidenav-opened]': '_isOpened',
	                '[class.mat-sidenav-opening]': '_isOpening',
	                '[class.mat-sidenav-over]': '_modeOver',
	                '[class.mat-sidenav-push]': '_modePush',
	                '[class.mat-sidenav-side]': '_modeSide',
	                '[class.mat-sidenav-invalid]': '!valid',
	                'tabIndex': '-1'
	            },
	            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,
	            encapsulation: _angular_core.ViewEncapsulation.None,
	        }), 
	        __metadata$39('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer])
	    ], MdSidenav);
	    return MdSidenav;
	}());
	/**
	 * <md-sidenav-container> component.
	 *
	 * This is the parent component to one or two <md-sidenav>s that validates the state internally
	 * and coordinates the backdrop and content styling.
	 */
	var MdSidenavContainer = (function () {
	    function MdSidenavContainer(_dir, _element, _renderer, _ngZone) {
	        var _this = this;
	        this._dir = _dir;
	        this._element = _element;
	        this._renderer = _renderer;
	        this._ngZone = _ngZone;
	        /** Event emitted when the sidenav backdrop is clicked. */
	        this.backdropClick = new _angular_core.EventEmitter();
	        /** Whether to enable open/close trantions. */
	        this._enableTransitions = false;
	        // If a `Dir` directive exists up the tree, listen direction changes and update the left/right
	        // properties to point to the proper start/end.
	        if (_dir != null) {
	            _dir.dirChange.subscribe(function () { return _this._validateDrawers(); });
	        }
	    }
	    Object.defineProperty(MdSidenavContainer.prototype, "start", {
	        /** The sidenav child with the `start` alignment. */
	        get: function () { return this._start; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSidenavContainer.prototype, "end", {
	        /** The sidenav child with the `end` alignment. */
	        get: function () { return this._end; },
	        enumerable: true,
	        configurable: true
	    });
	    MdSidenavContainer.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        // On changes, assert on consistency.
	        this._sidenavs.changes.subscribe(function () { return _this._validateDrawers(); });
	        this._sidenavs.forEach(function (sidenav) {
	            _this._watchSidenavToggle(sidenav);
	            _this._watchSidenavAlign(sidenav);
	        });
	        this._validateDrawers();
	        // Give the view a chance to render the initial state, then enable transitions.
	        this._ngZone.onMicrotaskEmpty.first().subscribe(function () { return _this._enableTransitions = true; });
	    };
	    /**
	     * Subscribes to sidenav events in order to set a class on the main container element when the
	     * sidenav is open and the backdrop is visible. This ensures any overflow on the container element
	     * is properly hidden.
	     */
	    MdSidenavContainer.prototype._watchSidenavToggle = function (sidenav) {
	        var _this = this;
	        if (!sidenav || sidenav.mode === 'side') {
	            return;
	        }
	        sidenav.onOpen.subscribe(function () { return _this._setContainerClass(sidenav, true); });
	        sidenav.onClose.subscribe(function () { return _this._setContainerClass(sidenav, false); });
	    };
	    /**
	     * Subscribes to sidenav onAlignChanged event in order to re-validate drawers when the align
	     * changes.
	     */
	    MdSidenavContainer.prototype._watchSidenavAlign = function (sidenav) {
	        var _this = this;
	        if (!sidenav) {
	            return;
	        }
	        sidenav.onAlignChanged.subscribe(function () { return _this._validateDrawers(); });
	    };
	    /** Toggles the 'mat-sidenav-opened' class on the main 'md-sidenav-container' element. */
	    MdSidenavContainer.prototype._setContainerClass = function (sidenav, bool) {
	        this._renderer.setElementClass(this._element.nativeElement, 'mat-sidenav-opened', bool);
	    };
	    /** Sets the valid state of the drawers. */
	    MdSidenavContainer.prototype._setDrawersValid = function (valid) {
	        this._sidenavs.forEach(function (sidenav) {
	            sidenav.valid = valid;
	        });
	        if (!valid) {
	            this._start = this._end = this._left = this._right = null;
	        }
	    };
	    /** Validate the state of the sidenav children components. */
	    MdSidenavContainer.prototype._validateDrawers = function () {
	        this._start = this._end = null;
	        // Ensure that we have at most one start and one end sidenav.
	        // NOTE: We must call toArray on _sidenavs even though it's iterable
	        // (see https://github.com/Microsoft/TypeScript/issues/3164).
	        for (var _i = 0, _a = this._sidenavs.toArray(); _i < _a.length; _i++) {
	            var sidenav = _a[_i];
	            if (sidenav.align == 'end') {
	                if (this._end != null) {
	                    this._setDrawersValid(false);
	                    return;
	                }
	                this._end = sidenav;
	            }
	            else {
	                if (this._start != null) {
	                    this._setDrawersValid(false);
	                    return;
	                }
	                this._start = sidenav;
	            }
	        }
	        this._right = this._left = null;
	        // Detect if we're LTR or RTL.
	        if (this._dir == null || this._dir.value == 'ltr') {
	            this._left = this._start;
	            this._right = this._end;
	        }
	        else {
	            this._left = this._end;
	            this._right = this._start;
	        }
	        this._setDrawersValid(true);
	    };
	    MdSidenavContainer.prototype._onBackdropClicked = function () {
	        this.backdropClick.emit();
	        this._closeModalSidenav();
	    };
	    MdSidenavContainer.prototype._closeModalSidenav = function () {
	        // Close all open sidenav's where closing is not disabled and the mode is not `side`.
	        [this._start, this._end]
	            .filter(function (sidenav) { return sidenav && !sidenav.disableClose && sidenav.mode !== 'side'; })
	            .forEach(function (sidenav) { return sidenav.close(); });
	    };
	    MdSidenavContainer.prototype._isShowingBackdrop = function () {
	        return (this._isSidenavOpen(this._start) && this._start.mode != 'side')
	            || (this._isSidenavOpen(this._end) && this._end.mode != 'side');
	    };
	    MdSidenavContainer.prototype._isSidenavOpen = function (side) {
	        return side != null && side.opened;
	    };
	    /**
	     * Return the width of the sidenav, if it's in the proper mode and opened.
	     * This may relayout the view, so do not call this often.
	     * @param sidenav
	     * @param mode
	     */
	    MdSidenavContainer.prototype._getSidenavEffectiveWidth = function (sidenav, mode) {
	        return (this._isSidenavOpen(sidenav) && sidenav.mode == mode) ? sidenav._width : 0;
	    };
	    MdSidenavContainer.prototype._getMarginLeft = function () {
	        return this._getSidenavEffectiveWidth(this._left, 'side');
	    };
	    MdSidenavContainer.prototype._getMarginRight = function () {
	        return this._getSidenavEffectiveWidth(this._right, 'side');
	    };
	    MdSidenavContainer.prototype._getPositionLeft = function () {
	        return this._getSidenavEffectiveWidth(this._left, 'push');
	    };
	    MdSidenavContainer.prototype._getPositionRight = function () {
	        return this._getSidenavEffectiveWidth(this._right, 'push');
	    };
	    /**
	     * Returns the horizontal offset for the content area.  There should never be a value for both
	     * left and right, so by subtracting the right value from the left value, we should always get
	     * the appropriate offset.
	     */
	    MdSidenavContainer.prototype._getPositionOffset = function () {
	        return this._getPositionLeft() - this._getPositionRight();
	    };
	    /**
	     * This is using [ngStyle] rather than separate [style...] properties because [style.transform]
	     * doesn't seem to work right now.
	     */
	    MdSidenavContainer.prototype._getStyles = function () {
	        return {
	            marginLeft: this._getMarginLeft() + "px",
	            marginRight: this._getMarginRight() + "px",
	            transform: "translate3d(" + this._getPositionOffset() + "px, 0, 0)"
	        };
	    };
	    __decorate$39([
	        _angular_core.ContentChildren(MdSidenav), 
	        __metadata$39('design:type', _angular_core.QueryList)
	    ], MdSidenavContainer.prototype, "_sidenavs", void 0);
	    __decorate$39([
	        _angular_core.Output(), 
	        __metadata$39('design:type', Object)
	    ], MdSidenavContainer.prototype, "backdropClick", void 0);
	    MdSidenavContainer = __decorate$39([
	        _angular_core.Component({selector: 'md-sidenav-container, mat-sidenav-container',
	            // Do not use ChangeDetectionStrategy.OnPush. It does not work for this component because
	            // technically it is a sibling of MdSidenav (on the content tree) and isn't updated when MdSidenav
	            // changes its state.
	            template: "<div class=\"mat-sidenav-backdrop\" (click)=\"_onBackdropClicked()\" [class.mat-sidenav-shown]=\"_isShowingBackdrop()\"></div><ng-content select=\"md-sidenav, mat-sidenav\"></ng-content><div class=\"mat-sidenav-content\" [ngStyle]=\"_getStyles()\" cdk-scrollable><ng-content></ng-content></div>",
	            styles: [".mat-sidenav-container{position:relative;transform:translate3d(0,0,0);box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-sidenav-backdrop,.mat-sidenav-container[fullscreen]{position:absolute;top:0;bottom:0;right:0;left:0}.mat-sidenav-container[fullscreen].mat-sidenav-opened{overflow:hidden}.mat-sidenav-backdrop{display:block;z-index:2;visibility:hidden}.mat-sidenav-backdrop.mat-sidenav-shown{visibility:visible}.mat-sidenav.mat-sidenav-closed,.mat-sidenav.mat-sidenav-end.mat-sidenav-closed,[dir=rtl] .mat-sidenav.mat-sidenav-closed,[dir=rtl] .mat-sidenav.mat-sidenav-end.mat-sidenav-closed{visibility:hidden}@media screen and (-ms-high-contrast:active){.mat-sidenav-backdrop{opacity:.5}}.mat-sidenav-content{position:relative;transform:translate3d(0,0,0);display:block;height:100%;overflow:auto}.mat-sidenav{display:block;position:absolute;top:0;bottom:0;z-index:3;min-width:5%;outline:0;transform:translate3d(-100%,0,0)}.mat-sidenav.mat-sidenav-opened,.mat-sidenav.mat-sidenav-opening{transform:translate3d(0,0,0)}.mat-sidenav.mat-sidenav-side{z-index:1}.mat-sidenav.mat-sidenav-end{right:0;transform:translate3d(100%,0,0)}.mat-sidenav.mat-sidenav-end.mat-sidenav-opened,.mat-sidenav.mat-sidenav-end.mat-sidenav-opening{transform:translate3d(0,0,0)}[dir=rtl] .mat-sidenav{transform:translate3d(100%,0,0)}[dir=rtl] .mat-sidenav.mat-sidenav-opened,[dir=rtl] .mat-sidenav.mat-sidenav-opening{transform:translate3d(0,0,0)}[dir=rtl] .mat-sidenav.mat-sidenav-end{left:0;right:auto;transform:translate3d(-100%,0,0)}[dir=rtl] .mat-sidenav.mat-sidenav-end.mat-sidenav-opened,[dir=rtl] .mat-sidenav.mat-sidenav-end.mat-sidenav-opening{transform:translate3d(0,0,0)}.mat-sidenav.mat-sidenav-opened:not(.mat-sidenav-side),.mat-sidenav.mat-sidenav-opening:not(.mat-sidenav-side){box-shadow:0 8px 10px -5px rgba(0,0,0,.2),0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12)}.mat-sidenav-focus-trap{height:100%}.mat-sidenav-focus-trap>.cdk-focus-trap-content{box-sizing:border-box;height:100%;overflow-y:auto;transform:translateZ(0)}.mat-sidenav-invalid{display:none}",
	".mat-sidenav-transition .mat-sidenav{transition:transform .4s cubic-bezier(.25,.8,.25,1)}.mat-sidenav-transition .mat-sidenav-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.mat-sidenav-transition .mat-sidenav-backdrop.mat-sidenav-shown{transition:background-color .4s cubic-bezier(.25,.8,.25,1)}"],
	            host: {
	                '[class.mat-sidenav-container]': 'true',
	                '[class.mat-sidenav-transition]': '_enableTransitions',
	            },
	            encapsulation: _angular_core.ViewEncapsulation.None,
	        }),
	        __param$8(0, _angular_core.Optional()), 
	        __metadata$39('design:paramtypes', [Dir, _angular_core.ElementRef, _angular_core.Renderer, _angular_core.NgZone])
	    ], MdSidenavContainer);
	    return MdSidenavContainer;
	}());
	var MdSidenavModule = (function () {
	    function MdSidenavModule() {
	    }
	    /** @deprecated */
	    MdSidenavModule.forRoot = function () {
	        return {
	            ngModule: MdSidenavModule,
	            providers: []
	        };
	    };
	    MdSidenavModule = __decorate$39([
	        _angular_core.NgModule({
	            imports: [_angular_common.CommonModule, CompatibilityModule, A11yModule, OverlayModule],
	            exports: [MdSidenavContainer, MdSidenav, CompatibilityModule],
	            declarations: [MdSidenavContainer, MdSidenav],
	        }), 
	        __metadata$39('design:paramtypes', [])
	    ], MdSidenavModule);
	    return MdSidenavModule;
	}());
	
	var __decorate$40 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$40 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MdListDivider = (function () {
	    function MdListDivider() {
	    }
	    MdListDivider = __decorate$40([
	        _angular_core.Directive({
	            selector: 'md-divider, mat-divider'
	        }), 
	        __metadata$40('design:paramtypes', [])
	    ], MdListDivider);
	    return MdListDivider;
	}());
	var MdList = (function () {
	    function MdList() {
	    }
	    MdList = __decorate$40([
	        _angular_core.Component({selector: 'md-list, mat-list, md-nav-list, mat-nav-list',
	            host: {
	                'role': 'list' },
	            template: '<ng-content></ng-content>',
	            styles: [".mat-list,.mat-nav-list{padding-top:8px;display:block}.mat-list .mat-subheader,.mat-nav-list .mat-subheader{display:block;box-sizing:border-box;height:48px;padding:16px;margin:0;font-size:14px;font-weight:500}.mat-list .mat-subheader:first-child,.mat-nav-list .mat-subheader:first-child{margin-top:-8px}.mat-list .mat-list-item,.mat-nav-list .mat-list-item{display:block}.mat-list .mat-list-item .mat-list-item-content,.mat-nav-list .mat-list-item .mat-list-item-content{display:flex;flex-direction:row;align-items:center;font-family:Roboto,\"Helvetica Neue\",sans-serif;box-sizing:border-box;font-size:16px;height:48px;padding:0 16px}.mat-list .mat-list-item.mat-list-item-avatar .mat-list-item-content,.mat-nav-list .mat-list-item.mat-list-item-avatar .mat-list-item-content{height:56px}.mat-list .mat-list-item.mat-2-line .mat-list-item-content,.mat-nav-list .mat-list-item.mat-2-line .mat-list-item-content{height:72px}.mat-list .mat-list-item.mat-3-line .mat-list-item-content,.mat-nav-list .mat-list-item.mat-3-line .mat-list-item-content{height:88px}.mat-list .mat-list-item.mat-multi-line .mat-list-item-content,.mat-nav-list .mat-list-item.mat-multi-line .mat-list-item-content{height:100%;padding:8px 16px}.mat-list .mat-list-item .mat-list-text,.mat-nav-list .mat-list-item .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0 16px}.mat-list .mat-list-item .mat-list-text>*,.mat-nav-list .mat-list-item .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list .mat-list-item .mat-list-text:empty,.mat-nav-list .mat-list-item .mat-list-text:empty{display:none}.mat-list .mat-list-item .mat-list-text:first-child,.mat-nav-list .mat-list-item .mat-list-text:first-child{padding:0}.mat-list .mat-list-item .mat-list-avatar,.mat-nav-list .mat-list-item .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%}.mat-list .mat-list-item .mat-list-icon,.mat-nav-list .mat-list-item .mat-list-icon{width:24px;height:24px;border-radius:50%;padding:4px}.mat-list .mat-list-item .mat-line,.mat-nav-list .mat-list-item .mat-line{white-space:nowrap;overflow-x:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-list .mat-list-item .mat-line:nth-child(n+2),.mat-nav-list .mat-list-item .mat-line:nth-child(n+2){font-size:14px}.mat-list[dense],.mat-nav-list[dense]{padding-top:4px;display:block}.mat-list[dense] .mat-subheader,.mat-nav-list[dense] .mat-subheader{display:block;box-sizing:border-box;height:40px;padding:16px;margin:0;font-size:13px;font-weight:500}.mat-list[dense] .mat-subheader:first-child,.mat-nav-list[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list[dense] .mat-list-item,.mat-nav-list[dense] .mat-list-item{display:block}.mat-list[dense] .mat-list-item .mat-list-item-content,.mat-nav-list[dense] .mat-list-item .mat-list-item-content{display:flex;flex-direction:row;align-items:center;font-family:Roboto,\"Helvetica Neue\",sans-serif;box-sizing:border-box;font-size:13px;height:40px;padding:0 16px}.mat-list[dense] .mat-list-item.mat-list-item-avatar .mat-list-item-content,.mat-nav-list[dense] .mat-list-item.mat-list-item-avatar .mat-list-item-content{height:48px}.mat-list[dense] .mat-list-item.mat-2-line .mat-list-item-content,.mat-nav-list[dense] .mat-list-item.mat-2-line .mat-list-item-content{height:60px}.mat-list[dense] .mat-list-item.mat-3-line .mat-list-item-content,.mat-nav-list[dense] .mat-list-item.mat-3-line .mat-list-item-content{height:76px}.mat-list[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-nav-list[dense] .mat-list-item.mat-multi-line .mat-list-item-content{height:100%;padding:8px 16px}.mat-list[dense] .mat-list-item .mat-list-text,.mat-nav-list[dense] .mat-list-item .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0 16px}.mat-list[dense] .mat-list-item .mat-list-text>*,.mat-nav-list[dense] .mat-list-item .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list[dense] .mat-list-item .mat-list-text:empty,.mat-nav-list[dense] .mat-list-item .mat-list-text:empty{display:none}.mat-list[dense] .mat-list-item .mat-list-text:first-child,.mat-nav-list[dense] .mat-list-item .mat-list-text:first-child{padding:0}.mat-list[dense] .mat-list-item .mat-list-avatar,.mat-nav-list[dense] .mat-list-item .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%}.mat-list[dense] .mat-list-item .mat-list-icon,.mat-nav-list[dense] .mat-list-item .mat-list-icon{width:24px;height:24px;border-radius:50%;padding:4px}.mat-list[dense] .mat-list-item .mat-line,.mat-nav-list[dense] .mat-list-item .mat-line{white-space:nowrap;overflow-x:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-list[dense] .mat-list-item .mat-line:nth-child(n+2),.mat-nav-list[dense] .mat-list-item .mat-line:nth-child(n+2){font-size:13px}.mat-divider{display:block;border-top-style:solid;border-top-width:1px;margin:0}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item-content{cursor:pointer}.mat-nav-list .mat-list-item-content.mat-list-item-focus,.mat-nav-list .mat-list-item-content:hover{outline:0}"],
	            encapsulation: _angular_core.ViewEncapsulation.None
	        }), 
	        __metadata$40('design:paramtypes', [])
	    ], MdList);
	    return MdList;
	}());
	/**
	 * Directive whose purpose is to add the mat- CSS styling to this selector.
	 */
	var MdListCssMatStyler = (function () {
	    function MdListCssMatStyler() {
	    }
	    MdListCssMatStyler = __decorate$40([
	        _angular_core.Directive({
	            selector: 'md-list, mat-list',
	            host: {
	                '[class.mat-list]': 'true'
	            }
	        }), 
	        __metadata$40('design:paramtypes', [])
	    ], MdListCssMatStyler);
	    return MdListCssMatStyler;
	}());
	/**
	 * Directive whose purpose is to add the mat- CSS styling to this selector.
	 */
	var MdNavListCssMatStyler = (function () {
	    function MdNavListCssMatStyler() {
	    }
	    MdNavListCssMatStyler = __decorate$40([
	        _angular_core.Directive({
	            selector: 'md-nav-list, mat-nav-list',
	            host: {
	                '[class.mat-nav-list]': 'true'
	            }
	        }), 
	        __metadata$40('design:paramtypes', [])
	    ], MdNavListCssMatStyler);
	    return MdNavListCssMatStyler;
	}());
	/**
	 * Directive whose purpose is to add the mat- CSS styling to this selector.
	 */
	var MdDividerCssMatStyler = (function () {
	    function MdDividerCssMatStyler() {
	    }
	    MdDividerCssMatStyler = __decorate$40([
	        _angular_core.Directive({
	            selector: 'md-divider, mat-divider',
	            host: {
	                '[class.mat-divider]': 'true'
	            }
	        }), 
	        __metadata$40('design:paramtypes', [])
	    ], MdDividerCssMatStyler);
	    return MdDividerCssMatStyler;
	}());
	/* Need directive for a ContentChild query in list-item */
	var MdListAvatarCssMatStyler = (function () {
	    function MdListAvatarCssMatStyler() {
	    }
	    MdListAvatarCssMatStyler = __decorate$40([
	        _angular_core.Directive({
	            selector: '[md-list-avatar], [mat-list-avatar]',
	            host: {
	                '[class.mat-list-avatar]': 'true'
	            }
	        }), 
	        __metadata$40('design:paramtypes', [])
	    ], MdListAvatarCssMatStyler);
	    return MdListAvatarCssMatStyler;
	}());
	/* Need directive to add mat- CSS styling */
	var MdListIconCssMatStyler = (function () {
	    function MdListIconCssMatStyler() {
	    }
	    MdListIconCssMatStyler = __decorate$40([
	        _angular_core.Directive({
	            selector: '[md-list-icon], [mat-list-icon]',
	            host: {
	                '[class.mat-list-icon]': 'true'
	            }
	        }), 
	        __metadata$40('design:paramtypes', [])
	    ], MdListIconCssMatStyler);
	    return MdListIconCssMatStyler;
	}());
	/**
	 * Directive whose purpose is to add the mat- CSS styling to this selector.
	 */
	var MdListSubheaderCssMatStyler = (function () {
	    function MdListSubheaderCssMatStyler() {
	    }
	    MdListSubheaderCssMatStyler = __decorate$40([
	        _angular_core.Directive({
	            selector: '[md-subheader], [mat-subheader]',
	            host: {
	                '[class.mat-subheader]': 'true'
	            }
	        }), 
	        __metadata$40('design:paramtypes', [])
	    ], MdListSubheaderCssMatStyler);
	    return MdListSubheaderCssMatStyler;
	}());
	var MdListItem = (function () {
	    function MdListItem(_renderer, _element) {
	        this._renderer = _renderer;
	        this._element = _element;
	        this._hasFocus = false;
	    }
	    Object.defineProperty(MdListItem.prototype, "_hasAvatar", {
	        set: function (avatar) {
	            this._renderer.setElementClass(this._element.nativeElement, 'mat-list-item-avatar', avatar != null);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdListItem.prototype.ngAfterContentInit = function () {
	        this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);
	    };
	    MdListItem.prototype._handleFocus = function () {
	        this._hasFocus = true;
	    };
	    MdListItem.prototype._handleBlur = function () {
	        this._hasFocus = false;
	    };
	    __decorate$40([
	        _angular_core.ContentChildren(MdLine), 
	        __metadata$40('design:type', _angular_core.QueryList)
	    ], MdListItem.prototype, "_lines", void 0);
	    __decorate$40([
	        _angular_core.ContentChild(MdListAvatarCssMatStyler), 
	        __metadata$40('design:type', MdListAvatarCssMatStyler), 
	        __metadata$40('design:paramtypes', [MdListAvatarCssMatStyler])
	    ], MdListItem.prototype, "_hasAvatar", null);
	    MdListItem = __decorate$40([
	        _angular_core.Component({selector: 'md-list-item, mat-list-item, a[md-list-item], a[mat-list-item]',
	            host: {
	                'role': 'listitem',
	                '(focus)': '_handleFocus()',
	                '(blur)': '_handleBlur()',
	                '[class.mat-list-item]': 'true',
	            },
	            template: "<div class=\"mat-list-item-content\" [class.mat-list-item-focus]=\"_hasFocus\"><ng-content select=\"[md-list-avatar],[md-list-icon], [mat-list-avatar], [mat-list-icon]\"></ng-content><div class=\"mat-list-text\"><ng-content select=\"[md-line], [mat-line]\"></ng-content></div><ng-content></ng-content></div>",
	            encapsulation: _angular_core.ViewEncapsulation.None
	        }), 
	        __metadata$40('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef])
	    ], MdListItem);
	    return MdListItem;
	}());
	var MdListModule = (function () {
	    function MdListModule() {
	    }
	    /** @deprecated */
	    MdListModule.forRoot = function () {
	        return {
	            ngModule: MdListModule,
	            providers: []
	        };
	    };
	    MdListModule = __decorate$40([
	        _angular_core.NgModule({
	            imports: [MdLineModule, CompatibilityModule],
	            exports: [
	                MdList,
	                MdListItem,
	                MdListDivider,
	                MdListAvatarCssMatStyler,
	                MdLineModule,
	                CompatibilityModule,
	                MdListIconCssMatStyler,
	                MdListCssMatStyler,
	                MdNavListCssMatStyler,
	                MdDividerCssMatStyler,
	                MdListSubheaderCssMatStyler
	            ],
	            declarations: [
	                MdList,
	                MdListItem,
	                MdListDivider,
	                MdListAvatarCssMatStyler,
	                MdListIconCssMatStyler,
	                MdListCssMatStyler,
	                MdNavListCssMatStyler,
	                MdDividerCssMatStyler,
	                MdListSubheaderCssMatStyler
	            ],
	        }), 
	        __metadata$40('design:paramtypes', [])
	    ], MdListModule);
	    return MdListModule;
	}());
	
	/**
	 * Converts values into strings. Falsy values become empty strings.
	 * @docs-private
	 */
	function coerceToString(value) {
	    return "" + (value || '');
	}
	/**
	 * Converts a value that might be a string into a number.
	 * @docs-private
	 */
	function coerceToNumber(value) {
	    return typeof value === 'string' ? parseInt(value, 10) : value;
	}
	
	var __decorate$42 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$42 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MdGridTile = (function () {
	    function MdGridTile(_renderer, _element) {
	        this._renderer = _renderer;
	        this._element = _element;
	        this._rowspan = 1;
	        this._colspan = 1;
	    }
	    Object.defineProperty(MdGridTile.prototype, "rowspan", {
	        /** Amount of rows that the grid tile takes up. */
	        get: function () { return this._rowspan; },
	        set: function (value) { this._rowspan = coerceToNumber(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdGridTile.prototype, "colspan", {
	        /** Amount of columns that the grid tile takes up. */
	        get: function () { return this._colspan; },
	        set: function (value) { this._colspan = coerceToNumber(value); },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Sets the style of the grid-tile element.  Needs to be set manually to avoid
	     * "Changed after checked" errors that would occur with HostBinding.
	     */
	    MdGridTile.prototype._setStyle = function (property, value) {
	        this._renderer.setElementStyle(this._element.nativeElement, property, value);
	    };
	    __decorate$42([
	        _angular_core.Input(), 
	        __metadata$42('design:type', Object)
	    ], MdGridTile.prototype, "rowspan", null);
	    __decorate$42([
	        _angular_core.Input(), 
	        __metadata$42('design:type', Object)
	    ], MdGridTile.prototype, "colspan", null);
	    MdGridTile = __decorate$42([
	        _angular_core.Component({selector: 'md-grid-tile, mat-grid-tile',
	            host: {
	                'role': 'listitem',
	                '[class.mat-grid-tile]': 'true',
	            },
	            template: "<figure class=\"mat-figure\"><ng-content></ng-content></figure>",
	            styles: [".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{display:flex;position:absolute;align-items:center;justify-content:center;height:100%;top:0;right:0;bottom:0;left:0;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;font-size:16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer .mat-line,.mat-grid-tile .mat-grid-tile-header .mat-line{white-space:nowrap;overflow-x:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile .mat-grid-tile-footer .mat-line:nth-child(n+2),.mat-grid-tile .mat-grid-tile-header .mat-line:nth-child(n+2){font-size:12px}.mat-grid-tile .mat-grid-list-text>*,.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-avatar:empty,.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}"],
	            encapsulation: _angular_core.ViewEncapsulation.None,
	        }), 
	        __metadata$42('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef])
	    ], MdGridTile);
	    return MdGridTile;
	}());
	var MdGridTileText = (function () {
	    function MdGridTileText(_renderer, _element) {
	        this._renderer = _renderer;
	        this._element = _element;
	    }
	    MdGridTileText.prototype.ngAfterContentInit = function () {
	        this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);
	    };
	    __decorate$42([
	        _angular_core.ContentChildren(MdLine), 
	        __metadata$42('design:type', _angular_core.QueryList)
	    ], MdGridTileText.prototype, "_lines", void 0);
	    MdGridTileText = __decorate$42([
	        _angular_core.Component({selector: 'md-grid-tile-header, mat-grid-tile-header, md-grid-tile-footer, mat-grid-tile-footer',
	            template: "<ng-content select=\"[md-grid-avatar], [mat-grid-avatar]\"></ng-content><div class=\"mat-grid-list-text\"><ng-content select=\"[md-line], [mat-line]\"></ng-content></div><ng-content></ng-content>"
	        }), 
	        __metadata$42('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef])
	    ], MdGridTileText);
	    return MdGridTileText;
	}());
	/**
	 * Directive whose purpose is to add the mat- CSS styling to this selector.
	 */
	var MdGridAvatarCssMatStyler = (function () {
	    function MdGridAvatarCssMatStyler() {
	    }
	    MdGridAvatarCssMatStyler = __decorate$42([
	        _angular_core.Directive({
	            selector: '[md-grid-avatar], [mat-grid-avatar]',
	            host: {
	                '[class.mat-grid-avatar]': 'true'
	            }
	        }), 
	        __metadata$42('design:paramtypes', [])
	    ], MdGridAvatarCssMatStyler);
	    return MdGridAvatarCssMatStyler;
	}());
	/**
	 * Directive whose purpose is to add the mat- CSS styling to this selector.
	 */
	var MdGridTileHeaderCssMatStyler = (function () {
	    function MdGridTileHeaderCssMatStyler() {
	    }
	    MdGridTileHeaderCssMatStyler = __decorate$42([
	        _angular_core.Directive({
	            selector: 'md-grid-tile-header, mat-grid-tile-header',
	            host: {
	                '[class.mat-grid-tile-header]': 'true'
	            }
	        }), 
	        __metadata$42('design:paramtypes', [])
	    ], MdGridTileHeaderCssMatStyler);
	    return MdGridTileHeaderCssMatStyler;
	}());
	/**
	 * Directive whose purpose is to add the mat- CSS styling to this selector.
	 */
	var MdGridTileFooterCssMatStyler = (function () {
	    function MdGridTileFooterCssMatStyler() {
	    }
	    MdGridTileFooterCssMatStyler = __decorate$42([
	        _angular_core.Directive({
	            selector: 'md-grid-tile-footer, mat-grid-tile-footer',
	            host: {
	                '[class.mat-grid-tile-footer]': 'true'
	            }
	        }), 
	        __metadata$42('design:paramtypes', [])
	    ], MdGridTileFooterCssMatStyler);
	    return MdGridTileFooterCssMatStyler;
	}());
	
	var __extends$10 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * Exception thrown when cols property is missing from grid-list
	 * @docs-private
	 */
	var MdGridListColsError = (function (_super) {
	    __extends$10(MdGridListColsError, _super);
	    function MdGridListColsError() {
	        _super.call(this, "md-grid-list: must pass in number of columns. Example: <md-grid-list cols=\"3\">");
	    }
	    return MdGridListColsError;
	}(MdError));
	/**
	 * Exception thrown when a tile's colspan is longer than the number of cols in list
	 * @docs-private
	 */
	var MdGridTileTooWideError = (function (_super) {
	    __extends$10(MdGridTileTooWideError, _super);
	    function MdGridTileTooWideError(cols, listLength) {
	        _super.call(this, "md-grid-list: tile with colspan " + cols + " is wider than grid with cols=\"" + listLength + "\".");
	    }
	    return MdGridTileTooWideError;
	}(MdError));
	/**
	 * Exception thrown when an invalid ratio is passed in as a rowHeight
	 * @docs-private
	 */
	var MdGridListBadRatioError = (function (_super) {
	    __extends$10(MdGridListBadRatioError, _super);
	    function MdGridListBadRatioError(value) {
	        _super.call(this, "md-grid-list: invalid ratio given for row-height: \"" + value + "\"");
	    }
	    return MdGridListBadRatioError;
	}(MdError));
	
	/**
	 * Class for determining, from a list of tiles, the (row, col) position of each of those tiles
	 * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)
	 * because the tiles can have a rowspan.
	 *
	 * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid
	 * large enough to accommodate it so that the tiles still render in the same order in which they
	 * are given.
	 *
	 * The basis of the algorithm is the use of an array to track the already placed tiles. Each
	 * element of the array corresponds to a column, and the value indicates how many cells in that
	 * column are already occupied; zero indicates an empty cell. Moving "down" to the next row
	 * decrements each value in the tracking array (indicating that the column is one cell closer to
	 * being free).
	 *
	 * @docs-private
	 */
	var TileCoordinator = (function () {
	    function TileCoordinator(numColumns, tiles) {
	        var _this = this;
	        /** Index at which the search for the next gap will start. */
	        this.columnIndex = 0;
	        /** The current row index. */
	        this.rowIndex = 0;
	        this.tracker = new Array(numColumns);
	        this.tracker.fill(0, 0, this.tracker.length);
	        this.positions = tiles.map(function (tile) { return _this._trackTile(tile); });
	    }
	    Object.defineProperty(TileCoordinator.prototype, "rowCount", {
	        /** Gets the total number of rows occupied by tiles */
	        get: function () { return this.rowIndex + 1; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TileCoordinator.prototype, "rowspan", {
	        /** Gets the total span of rows occupied by tiles.
	         * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2. */
	        get: function () {
	            var lastRowMax = Math.max.apply(Math, this.tracker);
	            // if any of the tiles has a rowspan that pushes it beyond the total row count,
	            // add the difference to the rowcount
	            return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Calculates the row and col position of a tile. */
	    TileCoordinator.prototype._trackTile = function (tile) {
	        // Find a gap large enough for this tile.
	        var gapStartIndex = this._findMatchingGap(tile.colspan);
	        // Place tile in the resulting gap.
	        this._markTilePosition(gapStartIndex, tile);
	        // The next time we look for a gap, the search will start at columnIndex, which should be
	        // immediately after the tile that has just been placed.
	        this.columnIndex = gapStartIndex + tile.colspan;
	        return new TilePosition(this.rowIndex, gapStartIndex);
	    };
	    /** Finds the next available space large enough to fit the tile. */
	    TileCoordinator.prototype._findMatchingGap = function (tileCols) {
	        if (tileCols > this.tracker.length) {
	            throw new MdGridTileTooWideError(tileCols, this.tracker.length);
	        }
	        // Start index is inclusive, end index is exclusive.
	        var gapStartIndex = -1;
	        var gapEndIndex = -1;
	        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.
	        do {
	            // If we've reached the end of the row, go to the next row.
	            if (this.columnIndex + tileCols > this.tracker.length) {
	                this._nextRow();
	                continue;
	            }
	            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);
	            // If there are no more empty spaces in this row at all, move on to the next row.
	            if (gapStartIndex == -1) {
	                this._nextRow();
	                continue;
	            }
	            gapEndIndex = this._findGapEndIndex(gapStartIndex);
	            // If a gap large enough isn't found, we want to start looking immediately after the current
	            // gap on the next iteration.
	            this.columnIndex = gapStartIndex + 1;
	        } while (gapEndIndex - gapStartIndex < tileCols);
	        return gapStartIndex;
	    };
	    /** Move "down" to the next row. */
	    TileCoordinator.prototype._nextRow = function () {
	        this.columnIndex = 0;
	        this.rowIndex++;
	        // Decrement all spaces by one to reflect moving down one row.
	        for (var i = 0; i < this.tracker.length; i++) {
	            this.tracker[i] = Math.max(0, this.tracker[i] - 1);
	        }
	    };
	    /**
	     * Finds the end index (exclusive) of a gap given the index from which to start looking.
	     * The gap ends when a non-zero value is found.
	     */
	    TileCoordinator.prototype._findGapEndIndex = function (gapStartIndex) {
	        for (var i = gapStartIndex + 1; i < this.tracker.length; i++) {
	            if (this.tracker[i] != 0) {
	                return i;
	            }
	        }
	        // The gap ends with the end of the row.
	        return this.tracker.length;
	    };
	    /** Update the tile tracker to account for the given tile in the given space. */
	    TileCoordinator.prototype._markTilePosition = function (start, tile) {
	        for (var i = 0; i < tile.colspan; i++) {
	            this.tracker[start + i] = tile.rowspan;
	        }
	    };
	    return TileCoordinator;
	}());
	/**
	 * Simple data structure for tile position (row, col).
	 * @docs-private
	 */
	var TilePosition = (function () {
	    function TilePosition(row, col) {
	        this.row = row;
	        this.col = col;
	    }
	    return TilePosition;
	}());
	
	var __extends$11 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * Sets the style properties for an individual tile, given the position calculated by the
	 * Tile Coordinator.
	 * @docs-private
	 */
	var TileStyler = (function () {
	    function TileStyler() {
	        this._rows = 0;
	        this._rowspan = 0;
	    }
	    /**
	     * Adds grid-list layout info once it is available. Cannot be processed in the constructor
	     * because these properties haven't been calculated by that point.
	     *
	     * @param gutterSize Size of the grid's gutter.
	     * @param tracker Instance of the TileCoordinator.
	     * @param cols Amount of columns in the grid.
	     * @param direction Layout direction of the grid.
	     */
	    TileStyler.prototype.init = function (gutterSize, tracker, cols, direction) {
	        this._gutterSize = normalizeUnits(gutterSize);
	        this._rows = tracker.rowCount;
	        this._rowspan = tracker.rowspan;
	        this._cols = cols;
	        this._direction = direction;
	    };
	    /**
	     * Computes the amount of space a single 1x1 tile would take up (width or height).
	     * Used as a basis for other calculations.
	     * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.
	     * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.
	     * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().
	     */
	    TileStyler.prototype.getBaseTileSize = function (sizePercent, gutterFraction) {
	        // Take the base size percent (as would be if evenly dividing the size between cells),
	        // and then subtracting the size of one gutter. However, since there are no gutters on the
	        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter
	        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the
	        // edge evenly among the cells).
	        return "(" + sizePercent + "% - ( " + this._gutterSize + " * " + gutterFraction + " ))";
	    };
	    /**
	     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.
	     * @param offset Number of tiles that have already been rendered in the row/column.
	     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).
	     * @return Position of the tile as a CSS calc() expression.
	     */
	    TileStyler.prototype.getTilePosition = function (baseSize, offset) {
	        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the
	        // row/column (offset).
	        return calc("(" + baseSize + " + " + this._gutterSize + ") * " + offset);
	    };
	    /**
	     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.
	     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).
	     * @param span The tile's rowspan or colspan.
	     * @return Size of the tile as a CSS calc() expression.
	     */
	    TileStyler.prototype.getTileSize = function (baseSize, span) {
	        return "(" + baseSize + " * " + span + ") + (" + (span - 1) + " * " + this._gutterSize + ")";
	    };
	    /**
	     * Sets the style properties to be applied to a tile for the given row and column index.
	     * @param tile Tile to which to apply the styling.
	     * @param rowIndex Index of the tile's row.
	     * @param colIndex Index of the tile's column.
	     */
	    TileStyler.prototype.setStyle = function (tile, rowIndex, colIndex) {
	        // Percent of the available horizontal space that one column takes up.
	        var percentWidthPerTile = 100 / this._cols;
	        // Fraction of the vertical gutter size that each column takes up.
	        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.
	        var gutterWidthFractionPerTile = (this._cols - 1) / this._cols;
	        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);
	        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);
	    };
	    /** Sets the horizontal placement of the tile in the list. */
	    TileStyler.prototype.setColStyles = function (tile, colIndex, percentWidth, gutterWidth) {
	        // Base horizontal size of a column.
	        var baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);
	        // The width and horizontal position of each tile is always calculated the same way, but the
	        // height and vertical position depends on the rowMode.
	        var side = this._direction === 'ltr' ? 'left' : 'right';
	        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));
	        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));
	    };
	    /**
	     * Calculates the total size taken up by gutters across one axis of a list.
	     */
	    TileStyler.prototype.getGutterSpan = function () {
	        return this._gutterSize + " * (" + this._rowspan + " - 1)";
	    };
	    /**
	     * Calculates the total size taken up by tiles across one axis of a list.
	     * @param tileHeight Height of the tile.
	     */
	    TileStyler.prototype.getTileSpan = function (tileHeight) {
	        return this._rowspan + " * " + this.getTileSize(tileHeight, 1);
	    };
	    /**
	     * Sets the vertical placement of the tile in the list.
	     * This method will be implemented by each type of TileStyler.
	     * @docs-private
	     */
	    TileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) { };
	    /**
	     * Calculates the computed height and returns the correct style property to set.
	     * This method will be implemented by each type of TileStyler.
	     * @docs-private
	     */
	    TileStyler.prototype.getComputedHeight = function () { return null; };
	    return TileStyler;
	}());
	/**
	 * This type of styler is instantiated when the user passes in a fixed row height.
	 * Example <md-grid-list cols="3" rowHeight="100px">
	 * @docs-private
	 */
	var FixedTileStyler = (function (_super) {
	    __extends$11(FixedTileStyler, _super);
	    function FixedTileStyler(fixedRowHeight) {
	        _super.call(this);
	        this.fixedRowHeight = fixedRowHeight;
	    }
	    FixedTileStyler.prototype.init = function (gutterSize, tracker, cols, direction) {
	        _super.prototype.init.call(this, gutterSize, tracker, cols, direction);
	        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);
	    };
	    FixedTileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) {
	        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));
	        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));
	    };
	    FixedTileStyler.prototype.getComputedHeight = function () {
	        return [
	            'height', calc(this.getTileSpan(this.fixedRowHeight) + " + " + this.getGutterSpan())
	        ];
	    };
	    return FixedTileStyler;
	}(TileStyler));
	/**
	 * This type of styler is instantiated when the user passes in a width:height ratio
	 * for the row height.  Example <md-grid-list cols="3" rowHeight="3:1">
	 * @docs-private
	 */
	var RatioTileStyler = (function (_super) {
	    __extends$11(RatioTileStyler, _super);
	    function RatioTileStyler(value) {
	        _super.call(this);
	        this._parseRatio(value);
	    }
	    RatioTileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) {
	        var percentHeightPerTile = percentWidth / this.rowHeightRatio;
	        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);
	        // Use paddingTop and marginTop to maintain the given aspect ratio, as
	        // a percentage-based value for these properties is applied versus the *width* of the
	        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties
	        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));
	        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));
	    };
	    RatioTileStyler.prototype.getComputedHeight = function () {
	        return [
	            'paddingBottom', calc(this.getTileSpan(this.baseTileHeight) + " + " + this.getGutterSpan())
	        ];
	    };
	    RatioTileStyler.prototype._parseRatio = function (value) {
	        var ratioParts = value.split(':');
	        if (ratioParts.length !== 2) {
	            throw new MdGridListBadRatioError(value);
	        }
	        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);
	    };
	    return RatioTileStyler;
	}(TileStyler));
	/**
	 * This type of styler is instantiated when the user selects a "fit" row height mode.
	 * In other words, the row height will reflect the total height of the container divided
	 * by the number of rows.  Example <md-grid-list cols="3" rowHeight="fit">
	 *
	 * @docs-private
	 */
	var FitTileStyler = (function (_super) {
	    __extends$11(FitTileStyler, _super);
	    function FitTileStyler() {
	        _super.apply(this, arguments);
	    }
	    FitTileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) {
	        // Percent of the available vertical space that one row takes up.
	        var percentHeightPerTile = 100 / this._rowspan;
	        // Fraction of the horizontal gutter size that each column takes up.
	        var gutterHeightPerTile = (this._rows - 1) / this._rows;
	        // Base vertical size of a column.
	        var baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);
	        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));
	        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));
	    };
	    return FitTileStyler;
	}(TileStyler));
	/** Wraps a CSS string in a calc function */
	function calc(exp) { return "calc(" + exp + ")"; }
	/** Appends pixels to a CSS string if no units are given. */
	function normalizeUnits(value) {
	    return (value.match(/px|em|rem/)) ? value : value + 'px';
	}
	
	var __decorate$41 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$41 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$9 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	// TODO(kara): Conditional (responsive) column count / row size.
	// TODO(kara): Re-layout on window resize / media change (debounced).
	// TODO(kara): gridTileHeader and gridTileFooter.
	var MD_FIT_MODE = 'fit';
	var MdGridList = (function () {
	    function MdGridList(_renderer, _element, _dir) {
	        this._renderer = _renderer;
	        this._element = _element;
	        this._dir = _dir;
	        /** The amount of space between tiles. This will be something like '5px' or '2em'. */
	        this._gutter = '1px';
	    }
	    Object.defineProperty(MdGridList.prototype, "cols", {
	        /** Amount of columns in the grid list. */
	        get: function () { return this._cols; },
	        set: function (value) { this._cols = coerceToNumber(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdGridList.prototype, "gutterSize", {
	        /** Size of the grid list's gutter in pixels. */
	        get: function () { return this._gutter; },
	        set: function (value) { this._gutter = coerceToString(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdGridList.prototype, "rowHeight", {
	        /** Set internal representation of row height from the user-provided value. */
	        set: function (value) {
	            this._rowHeight = coerceToString(value);
	            this._setTileStyler();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdGridList.prototype.ngOnInit = function () {
	        this._checkCols();
	        this._checkRowHeight();
	    };
	    /**
	     * The layout calculation is fairly cheap if nothing changes, so there's little cost
	     * to run it frequently.
	     */
	    MdGridList.prototype.ngAfterContentChecked = function () {
	        this._layoutTiles();
	    };
	    /** Throw a friendly error if cols property is missing */
	    MdGridList.prototype._checkCols = function () {
	        if (!this.cols) {
	            throw new MdGridListColsError();
	        }
	    };
	    /** Default to equal width:height if rowHeight property is missing */
	    MdGridList.prototype._checkRowHeight = function () {
	        if (!this._rowHeight) {
	            this._tileStyler = new RatioTileStyler('1:1');
	        }
	    };
	    /** Creates correct Tile Styler subtype based on rowHeight passed in by user */
	    MdGridList.prototype._setTileStyler = function () {
	        if (this._rowHeight === MD_FIT_MODE) {
	            this._tileStyler = new FitTileStyler();
	        }
	        else if (this._rowHeight && this._rowHeight.indexOf(':') > -1) {
	            this._tileStyler = new RatioTileStyler(this._rowHeight);
	        }
	        else {
	            this._tileStyler = new FixedTileStyler(this._rowHeight);
	        }
	    };
	    /** Computes and applies the size and position for all children grid tiles. */
	    MdGridList.prototype._layoutTiles = function () {
	        var _this = this;
	        var tracker = new TileCoordinator(this.cols, this._tiles);
	        var direction = this._dir ? this._dir.value : 'ltr';
	        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);
	        this._tiles.forEach(function (tile, index) {
	            var pos = tracker.positions[index];
	            _this._tileStyler.setStyle(tile, pos.row, pos.col);
	        });
	        this._setListStyle(this._tileStyler.getComputedHeight());
	    };
	    /** Sets style on the main grid-list element, given the style name and value. */
	    MdGridList.prototype._setListStyle = function (style$$1) {
	        if (style$$1) {
	            this._renderer.setElementStyle(this._element.nativeElement, style$$1[0], style$$1[1]);
	        }
	    };
	    __decorate$41([
	        _angular_core.ContentChildren(MdGridTile), 
	        __metadata$41('design:type', _angular_core.QueryList)
	    ], MdGridList.prototype, "_tiles", void 0);
	    __decorate$41([
	        _angular_core.Input(), 
	        __metadata$41('design:type', Object)
	    ], MdGridList.prototype, "cols", null);
	    __decorate$41([
	        _angular_core.Input(), 
	        __metadata$41('design:type', Object)
	    ], MdGridList.prototype, "gutterSize", null);
	    __decorate$41([
	        _angular_core.Input(), 
	        __metadata$41('design:type', Object), 
	        __metadata$41('design:paramtypes', [Object])
	    ], MdGridList.prototype, "rowHeight", null);
	    MdGridList = __decorate$41([
	        _angular_core.Component({selector: 'md-grid-list, mat-grid-list',
	            template: "<div><ng-content></ng-content></div>",
	            styles: [".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{display:flex;position:absolute;align-items:center;justify-content:center;height:100%;top:0;right:0;bottom:0;left:0;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;font-size:16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer .mat-line,.mat-grid-tile .mat-grid-tile-header .mat-line{white-space:nowrap;overflow-x:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile .mat-grid-tile-footer .mat-line:nth-child(n+2),.mat-grid-tile .mat-grid-tile-header .mat-line:nth-child(n+2){font-size:12px}.mat-grid-tile .mat-grid-list-text>*,.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-avatar:empty,.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}"],
	            host: {
	                'role': 'list',
	                '[class.mat-grid-list]': 'true',
	            },
	            encapsulation: _angular_core.ViewEncapsulation.None,
	        }),
	        __param$9(2, _angular_core.Optional()), 
	        __metadata$41('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef, Dir])
	    ], MdGridList);
	    return MdGridList;
	}());
	var MdGridListModule = (function () {
	    function MdGridListModule() {
	    }
	    /** @deprecated */
	    MdGridListModule.forRoot = function () {
	        return {
	            ngModule: MdGridListModule,
	            providers: []
	        };
	    };
	    MdGridListModule = __decorate$41([
	        _angular_core.NgModule({
	            imports: [MdLineModule, CompatibilityModule],
	            exports: [
	                MdGridList,
	                MdGridTile,
	                MdGridTileText,
	                MdLineModule,
	                CompatibilityModule,
	                MdGridTileHeaderCssMatStyler,
	                MdGridTileFooterCssMatStyler,
	                MdGridAvatarCssMatStyler
	            ],
	            declarations: [
	                MdGridList,
	                MdGridTile,
	                MdGridTileText,
	                MdGridTileHeaderCssMatStyler,
	                MdGridTileFooterCssMatStyler,
	                MdGridAvatarCssMatStyler],
	        }), 
	        __metadata$41('design:paramtypes', [])
	    ], MdGridListModule);
	    return MdGridListModule;
	}());
	
	var __decorate$43 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$43 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Content of a card, needed as it's used as a selector in the API.
	 */
	var MdCardContent = (function () {
	    function MdCardContent() {
	    }
	    MdCardContent = __decorate$43([
	        _angular_core.Directive({
	            selector: 'md-card-content, mat-card-content',
	            host: {
	                '[class.mat-card-content]': 'true'
	            }
	        }), 
	        __metadata$43('design:paramtypes', [])
	    ], MdCardContent);
	    return MdCardContent;
	}());
	/**
	 * Title of a card, needed as it's used as a selector in the API.
	 */
	var MdCardTitle = (function () {
	    function MdCardTitle() {
	    }
	    MdCardTitle = __decorate$43([
	        _angular_core.Directive({
	            selector: 'md-card-title, mat-card-title',
	            host: {
	                '[class.mat-card-title]': 'true'
	            }
	        }), 
	        __metadata$43('design:paramtypes', [])
	    ], MdCardTitle);
	    return MdCardTitle;
	}());
	/**
	 * Sub-title of a card, needed as it's used as a selector in the API.
	 */
	var MdCardSubtitle = (function () {
	    function MdCardSubtitle() {
	    }
	    MdCardSubtitle = __decorate$43([
	        _angular_core.Directive({
	            selector: 'md-card-subtitle, mat-card-subtitle',
	            host: {
	                '[class.mat-card-subtitle]': 'true'
	            }
	        }), 
	        __metadata$43('design:paramtypes', [])
	    ], MdCardSubtitle);
	    return MdCardSubtitle;
	}());
	/**
	 * Action section of a card, needed as it's used as a selector in the API.
	 */
	var MdCardActions = (function () {
	    function MdCardActions() {
	    }
	    MdCardActions = __decorate$43([
	        _angular_core.Directive({
	            selector: 'md-card-actions, mat-card-actions',
	            host: {
	                '[class.mat-card-actions]': 'true'
	            }
	        }), 
	        __metadata$43('design:paramtypes', [])
	    ], MdCardActions);
	    return MdCardActions;
	}());
	/**
	 * Footer of a card, needed as it's used as a selector in the API.
	 */
	var MdCardFooter = (function () {
	    function MdCardFooter() {
	    }
	    MdCardFooter = __decorate$43([
	        _angular_core.Directive({
	            selector: 'md-card-footer, mat-card-footer',
	            host: {
	                '[class.mat-card-footer]': 'true'
	            }
	        }), 
	        __metadata$43('design:paramtypes', [])
	    ], MdCardFooter);
	    return MdCardFooter;
	}());
	/**
	 * Image used in a card, needed to add the mat- CSS styling.
	 */
	var MdCardSmImage = (function () {
	    function MdCardSmImage() {
	    }
	    MdCardSmImage = __decorate$43([
	        _angular_core.Directive({
	            selector: '[md-card-sm-image], [mat-card-sm-image]',
	            host: {
	                '[class.mat-card-sm-image]': 'true'
	            }
	        }), 
	        __metadata$43('design:paramtypes', [])
	    ], MdCardSmImage);
	    return MdCardSmImage;
	}());
	/**
	 * Image used in a card, needed to add the mat- CSS styling.
	 */
	var MdCardMdImage = (function () {
	    function MdCardMdImage() {
	    }
	    MdCardMdImage = __decorate$43([
	        _angular_core.Directive({
	            selector: '[md-card-md-image], [mat-card-md-image]',
	            host: {
	                '[class.mat-card-md-image]': 'true'
	            }
	        }), 
	        __metadata$43('design:paramtypes', [])
	    ], MdCardMdImage);
	    return MdCardMdImage;
	}());
	/**
	 * Image used in a card, needed to add the mat- CSS styling.
	 */
	var MdCardLgImage = (function () {
	    function MdCardLgImage() {
	    }
	    MdCardLgImage = __decorate$43([
	        _angular_core.Directive({
	            selector: '[md-card-lg-image], [mat-card-lg-image]',
	            host: {
	                'class.mat-card-lg-image': 'true'
	            }
	        }), 
	        __metadata$43('design:paramtypes', [])
	    ], MdCardLgImage);
	    return MdCardLgImage;
	}());
	/**
	 * Image used in a card, needed to add the mat- CSS styling.
	 */
	var MdCardImage = (function () {
	    function MdCardImage() {
	    }
	    MdCardImage = __decorate$43([
	        _angular_core.Directive({
	            selector: '[md-card-image], [mat-card-image]',
	            host: {
	                '[class.mat-card-image]': 'true'
	            }
	        }), 
	        __metadata$43('design:paramtypes', [])
	    ], MdCardImage);
	    return MdCardImage;
	}());
	/**
	 * Large image used in a card, needed to add the mat- CSS styling.
	 */
	var MdCardXlImage = (function () {
	    function MdCardXlImage() {
	    }
	    MdCardXlImage = __decorate$43([
	        _angular_core.Directive({
	            selector: 'md-card-xl-image, mat-card-xl-image',
	            host: {
	                '[class.mat-card-xl-image]': 'true'
	            }
	        }), 
	        __metadata$43('design:paramtypes', [])
	    ], MdCardXlImage);
	    return MdCardXlImage;
	}());
	/**
	 * Avatar image used in a card, needed to add the mat- CSS styling.
	 */
	var MdCardAvatar = (function () {
	    function MdCardAvatar() {
	    }
	    MdCardAvatar = __decorate$43([
	        _angular_core.Directive({
	            selector: 'md-card-avatar, mat-card-avatar',
	            host: {
	                '[class.mat-card-avatar]': 'true'
	            }
	        }), 
	        __metadata$43('design:paramtypes', [])
	    ], MdCardAvatar);
	    return MdCardAvatar;
	}());
	/**
	 * A basic content container component that adds the styles of a Material design card.
	 *
	 * While this component can be used alone, it also provides a number
	 * of preset styles for common card sections, including:
	 * - md-card-title
	 * - md-card-subtitle
	 * - md-card-content
	 * - md-card-actions
	 * - md-card-footer
	 */
	var MdCard = (function () {
	    function MdCard() {
	    }
	    MdCard = __decorate$43([
	        _angular_core.Component({selector: 'md-card, mat-card',
	            template: "<ng-content></ng-content>",
	            styles: [".mat-card{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);will-change:box-shadow;display:block;position:relative;padding:24px;border-radius:2px;font-family:Roboto,\"Helvetica Neue\",sans-serif}@media screen and (-ms-high-contrast:active){.mat-card{outline:solid 1px}}.mat-card-flat{box-shadow:none}.mat-card-actions,.mat-card-content,.mat-card-subtitle,.mat-card-title{display:block;margin-bottom:16px}.mat-card-title{font-size:24px;font-weight:400}.mat-card-content,.mat-card-header .mat-card-title,.mat-card-subtitle{font-size:14px}.mat-card-actions{margin-left:-16px;margin-right:-16px;padding:8px 0}.mat-card-actions[align=end]{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 48px);margin:0 -24px 16px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-footer{position:absolute;width:100%;min-height:5px;bottom:0;left:0}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button{margin:0 4px}.mat-card-header{display:flex;flex-direction:row;height:40px;margin:-8px 0 16px}.mat-card-header-text{height:40px;margin:0 8px}.mat-card-avatar{height:40px;width:40px;border-radius:50%}.mat-card-lg-image,.mat-card-md-image,.mat-card-sm-image{margin:-8px 0}.mat-card-title-group{display:flex;justify-content:space-between;margin:0 -8px}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}@media (max-width:600px){.mat-card{padding:24px 16px}.mat-card-actions{margin-left:-8px;margin-right:-8px}.mat-card-image{width:calc(100% + 32px);margin:16px -16px}.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}.mat-card-header{margin:-8px 0 0}}.mat-card-content>:first-child,.mat-card>:first-child{margin-top:0}.mat-card-content>:last-child,.mat-card>:last-child{margin-bottom:0}.mat-card-image:first-child{margin-top:-24px}.mat-card>.mat-card-actions:last-child{margin-bottom:-16px;padding-bottom:0}.mat-card-actions .mat-button:first-child,.mat-card-actions .mat-raised-button:first-child{margin-left:0;margin-right:0}.mat-card-subtitle:not(:first-child),.mat-card-title:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child),.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}"],
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,
	            host: {
	                '[class.mat-card]': 'true'
	            }
	        }), 
	        __metadata$43('design:paramtypes', [])
	    ], MdCard);
	    return MdCard;
	}());
	/**
	 * Component intended to be used within the `<md-card>` component. It adds styles for a
	 * preset header section (i.e. a title, subtitle, and avatar layout).
	 */
	var MdCardHeader = (function () {
	    function MdCardHeader() {
	    }
	    MdCardHeader = __decorate$43([
	        _angular_core.Component({selector: 'md-card-header, mat-card-header',
	            template: "<ng-content select=\"[md-card-avatar], [mat-card-avatar]\"></ng-content><div class=\"mat-card-header-text\"><ng-content select=\"md-card-title, mat-card-title, md-card-subtitle, mat-card-subtitle\"></ng-content></div><ng-content></ng-content>",
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,
	            host: {
	                '[class.mat-card-header]': 'true'
	            }
	        }), 
	        __metadata$43('design:paramtypes', [])
	    ], MdCardHeader);
	    return MdCardHeader;
	}());
	/**
	 * Component intended to be used within the <md-card> component. It adds styles for a preset
	 * layout that groups an image with a title section.
	 */
	var MdCardTitleGroup = (function () {
	    function MdCardTitleGroup() {
	    }
	    MdCardTitleGroup = __decorate$43([
	        _angular_core.Component({selector: 'md-card-title-group, mat-card-title-group',
	            template: "<div><ng-content select=\"md-card-title, mat-card-title, md-card-subtitle, mat-card-subtitle\"></ng-content></div><ng-content select=\"img\"></ng-content><ng-content></ng-content>",
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,
	            host: {
	                '[class.mat-card-title-group]': 'true'
	            }
	        }), 
	        __metadata$43('design:paramtypes', [])
	    ], MdCardTitleGroup);
	    return MdCardTitleGroup;
	}());
	var MdCardModule = (function () {
	    function MdCardModule() {
	    }
	    /** @deprecated */
	    MdCardModule.forRoot = function () {
	        return {
	            ngModule: MdCardModule,
	            providers: []
	        };
	    };
	    MdCardModule = __decorate$43([
	        _angular_core.NgModule({
	            imports: [CompatibilityModule],
	            exports: [
	                MdCard,
	                MdCardHeader,
	                MdCardTitleGroup,
	                MdCardContent,
	                MdCardTitle,
	                MdCardSubtitle,
	                MdCardActions,
	                MdCardFooter,
	                MdCardSmImage,
	                MdCardMdImage,
	                MdCardLgImage,
	                MdCardImage,
	                MdCardXlImage,
	                MdCardAvatar,
	                CompatibilityModule,
	            ],
	            declarations: [
	                MdCard, MdCardHeader, MdCardTitleGroup, MdCardContent, MdCardTitle, MdCardSubtitle,
	                MdCardActions, MdCardFooter, MdCardSmImage, MdCardMdImage, MdCardLgImage, MdCardImage,
	                MdCardXlImage, MdCardAvatar,
	            ],
	        }), 
	        __metadata$43('design:paramtypes', [])
	    ], MdCardModule);
	    return MdCardModule;
	}());
	
	var __decorate$45 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$45 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Material design styled Chip component. Used inside the MdChipList component.
	 */
	var MdChip = (function () {
	    function MdChip(_renderer, _elementRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        /** Whether or not the chip is disabled. Disabled chips cannot be focused. */
	        this._disabled = null;
	        /** Whether or not the chip is selected. */
	        this._selected = false;
	        /** The palette color of selected chips. */
	        this._color = 'primary';
	        /** Emitted when the chip is focused. */
	        this.onFocus = new _angular_core.EventEmitter();
	        /** Emitted when the chip is selected. */
	        this.select = new _angular_core.EventEmitter();
	        /** Emitted when the chip is deselected. */
	        this.deselect = new _angular_core.EventEmitter();
	        /** Emitted when the chip is destroyed. */
	        this.destroy = new _angular_core.EventEmitter();
	    }
	    MdChip.prototype.ngOnInit = function () {
	        this._addDefaultCSSClass();
	        this._updateColor(this._color);
	    };
	    MdChip.prototype.ngOnDestroy = function () {
	        this.destroy.emit({ chip: this });
	    };
	    Object.defineProperty(MdChip.prototype, "disabled", {
	        /** Whether or not the chip is disabled. */
	        get: function () {
	            return this._disabled;
	        },
	        /** Sets the disabled state of the chip. */
	        set: function (value) {
	            this._disabled = coerceBooleanProperty(value) ? true : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdChip.prototype, "_isAriaDisabled", {
	        /** A String representation of the current disabled state. */
	        get: function () {
	            return String(coerceBooleanProperty(this.disabled));
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdChip.prototype, "selected", {
	        /** Whether or not this chip is selected. */
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = coerceBooleanProperty(value);
	            if (this._selected) {
	                this.select.emit({ chip: this });
	            }
	            else {
	                this.deselect.emit({ chip: this });
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Toggles the current selected state of this chip.
	     * @return Whether the chip is selected.
	     */
	    MdChip.prototype.toggleSelected = function () {
	        this.selected = !this.selected;
	        return this.selected;
	    };
	    Object.defineProperty(MdChip.prototype, "color", {
	        /** The color of the chip. Can be `primary`, `accent`, or `warn`. */
	        get: function () {
	            return this._color;
	        },
	        set: function (value) {
	            this._updateColor(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Allows for programmatic focusing of the chip. */
	    MdChip.prototype.focus = function () {
	        this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'focus');
	        this.onFocus.emit({ chip: this });
	    };
	    /** Ensures events fire properly upon click. */
	    MdChip.prototype._handleClick = function (event) {
	        // Check disabled
	        if (this.disabled) {
	            event.preventDefault();
	            event.stopPropagation();
	        }
	        else {
	            this.focus();
	        }
	    };
	    /** Initializes the appropriate CSS classes based on the chip type (basic or standard). */
	    MdChip.prototype._addDefaultCSSClass = function () {
	        var el = this._elementRef.nativeElement;
	        // Always add the `mat-chip` class
	        el.classList.add('mat-chip');
	        // If we are a basic chip, also add the `mat-basic-chip` class for :not() targeting
	        if (el.nodeName.toLowerCase() == 'mat-basic-chip' || el.hasAttribute('mat-basic-chip') ||
	            el.nodeName.toLowerCase() == 'md-basic-chip' || el.hasAttribute('md-basic-chip')) {
	            el.classList.add('mat-basic-chip');
	        }
	    };
	    /** Updates the private _color variable and the native element. */
	    MdChip.prototype._updateColor = function (newColor) {
	        this._setElementColor(this._color, false);
	        this._setElementColor(newColor, true);
	        this._color = newColor;
	    };
	    /** Sets the mat-color on the native element. */
	    MdChip.prototype._setElementColor = function (color, isAdd) {
	        if (color != null && color != '') {
	            this._renderer.setElementClass(this._elementRef.nativeElement, "mat-" + color, isAdd);
	        }
	    };
	    __decorate$45([
	        _angular_core.Output(), 
	        __metadata$45('design:type', Object)
	    ], MdChip.prototype, "select", void 0);
	    __decorate$45([
	        _angular_core.Output(), 
	        __metadata$45('design:type', Object)
	    ], MdChip.prototype, "deselect", void 0);
	    __decorate$45([
	        _angular_core.Output(), 
	        __metadata$45('design:type', Object)
	    ], MdChip.prototype, "destroy", void 0);
	    __decorate$45([
	        _angular_core.Input(), 
	        __metadata$45('design:type', Boolean)
	    ], MdChip.prototype, "disabled", null);
	    __decorate$45([
	        _angular_core.Input(), 
	        __metadata$45('design:type', Boolean)
	    ], MdChip.prototype, "selected", null);
	    __decorate$45([
	        _angular_core.Input(), 
	        __metadata$45('design:type', String)
	    ], MdChip.prototype, "color", null);
	    MdChip = __decorate$45([
	        _angular_core.Component({
	            selector: "md-basic-chip, [md-basic-chip], md-chip, [md-chip],\n             mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]",
	            template: "<ng-content></ng-content>",
	            host: {
	                '[class.mat-chip]': 'true',
	                'tabindex': '-1',
	                'role': 'option',
	                '[class.mat-chip-selected]': 'selected',
	                '[attr.disabled]': 'disabled',
	                '[attr.aria-disabled]': '_isAriaDisabled',
	                '(click)': '_handleClick($event)'
	            }
	        }), 
	        __metadata$45('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef])
	    ], MdChip);
	    return MdChip;
	}());
	
	var __decorate$44 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$44 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * A material design chips component (named ChipList for it's similarity to the List component).
	 *
	 * Example:
	 *
	 *     <md-chip-list>
	 *       <md-chip>Chip 1<md-chip>
	 *       <md-chip>Chip 2<md-chip>
	 *     </md-chip-list>
	 */
	var MdChipList = (function () {
	    function MdChipList(_elementRef) {
	        this._elementRef = _elementRef;
	        /** Track which chips we're listening to for focus/destruction. */
	        this._subscribed = new WeakMap();
	        /** Whether or not the chip is selectable. */
	        this._selectable = true;
	    }
	    MdChipList.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        this._keyManager = new FocusKeyManager(this.chips).withWrap();
	        // Go ahead and subscribe all of the initial chips
	        this._subscribeChips(this.chips);
	        // When the list changes, re-subscribe
	        this.chips.changes.subscribe(function (chips) {
	            _this._subscribeChips(chips);
	        });
	    };
	    Object.defineProperty(MdChipList.prototype, "selectable", {
	        /**
	         * Whether or not this chip is selectable. When a chip is not selectable,
	         * it's selected state is always ignored.
	         */
	        get: function () {
	            return this._selectable;
	        },
	        set: function (value) {
	            this._selectable = coerceBooleanProperty(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Programmatically focus the chip list. This in turn focuses the first
	     * non-disabled chip in this chip list.
	     */
	    MdChipList.prototype.focus = function () {
	        // TODO: ARIA says this should focus the first `selected` chip.
	        this._keyManager.setFirstItemActive();
	    };
	    /** Passes relevant key presses to our key manager. */
	    MdChipList.prototype._keydown = function (event) {
	        var target = event.target;
	        // If they are on a chip, check for space/left/right, otherwise pass to our key manager
	        if (target && target.classList.contains('mat-chip')) {
	            switch (event.keyCode) {
	                case SPACE:
	                    // If we are selectable, toggle the focused chip
	                    if (this.selectable) {
	                        this._toggleSelectOnFocusedChip();
	                    }
	                    // Always prevent space from scrolling the page since the list has focus
	                    event.preventDefault();
	                    break;
	                case LEFT_ARROW:
	                    this._keyManager.setPreviousItemActive();
	                    event.preventDefault();
	                    break;
	                case RIGHT_ARROW:
	                    this._keyManager.setNextItemActive();
	                    event.preventDefault();
	                    break;
	                default:
	                    this._keyManager.onKeydown(event);
	            }
	        }
	    };
	    /** Toggles the selected state of the currently focused chip. */
	    MdChipList.prototype._toggleSelectOnFocusedChip = function () {
	        // Allow disabling of chip selection
	        if (!this.selectable) {
	            return;
	        }
	        var focusedIndex = this._keyManager.activeItemIndex;
	        if (this._isValidIndex(focusedIndex)) {
	            var focusedChip = this.chips.toArray()[focusedIndex];
	            if (focusedChip) {
	                focusedChip.toggleSelected();
	            }
	        }
	    };
	    /**
	     * Iterate through the list of chips and add them to our list of
	     * subscribed chips.
	     *
	     * @param chips The list of chips to be subscribed.
	     */
	    MdChipList.prototype._subscribeChips = function (chips) {
	        var _this = this;
	        chips.forEach(function (chip) { return _this._addChip(chip); });
	    };
	    /**
	     * Add a specific chip to our subscribed list. If the chip has
	     * already been subscribed, this ensures it is only subscribed
	     * once.
	     *
	     * @param chip The chip to be subscribed (or checked for existing
	     * subscription).
	     */
	    MdChipList.prototype._addChip = function (chip) {
	        var _this = this;
	        // If we've already been subscribed to a parent, do nothing
	        if (this._subscribed.has(chip)) {
	            return;
	        }
	        // Watch for focus events outside of the keyboard navigation
	        chip.onFocus.subscribe(function () {
	            var chipIndex = _this.chips.toArray().indexOf(chip);
	            if (_this._isValidIndex(chipIndex)) {
	                _this._keyManager.updateActiveItemIndex(chipIndex);
	            }
	        });
	        // On destroy, remove the item from our list, and check focus
	        chip.destroy.subscribe(function () {
	            var chipIndex = _this.chips.toArray().indexOf(chip);
	            if (_this._isValidIndex(chipIndex)) {
	                // Check whether the chip is the last item
	                if (chipIndex < _this.chips.length - 1) {
	                    _this._keyManager.setActiveItem(chipIndex);
	                }
	                else if (chipIndex - 1 >= 0) {
	                    _this._keyManager.setActiveItem(chipIndex - 1);
	                }
	            }
	            _this._subscribed.delete(chip);
	            chip.destroy.unsubscribe();
	        });
	        this._subscribed.set(chip, true);
	    };
	    /**
	     * Utility to ensure all indexes are valid.
	     *
	     * @param index The index to be checked.
	     * @returns True if the index is valid for our list of chips.
	     */
	    MdChipList.prototype._isValidIndex = function (index) {
	        return index >= 0 && index < this.chips.length;
	    };
	    __decorate$44([
	        _angular_core.Input(), 
	        __metadata$44('design:type', Boolean)
	    ], MdChipList.prototype, "selectable", null);
	    MdChipList = __decorate$44([
	        _angular_core.Component({selector: 'md-chip-list, mat-chip-list',
	            template: "<div class=\"md-chip-list-wrapper\"><ng-content></ng-content></div>",
	            host: {
	                // Properties
	                'tabindex': '0',
	                'role': 'listbox',
	                '[class.mat-chip-list]': 'true',
	                // Events
	                '(focus)': 'focus()',
	                '(keydown)': '_keydown($event)'
	            },
	            queries: {
	                chips: new _angular_core.ContentChildren(MdChip)
	            },
	            styles: [".mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:flex-start}.mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip){margin:0 3px}.mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip):first-child{margin-left:0;margin-right:3px}.mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip):last-child,[dir=rtl] .mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip):first-child{margin-left:3px;margin-right:0}[dir=rtl] .mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip):last-child{margin-left:0;margin-right:3px}.mat-chip:not(.mat-basic-chip){display:inline-block;padding:8px 12px;border-radius:24px;font-size:13px;line-height:16px}.mat-chip-list-stacked .mat-chip-list-wrapper{display:block}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip){display:block;margin:0 0 8px}[dir=rtl] .mat-chip-list-stacked .mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip){margin:0 0 8px}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip):last-child,[dir=rtl] .mat-chip-list-stacked .mat-chip-list-wrapper .mat-chip:not(.mat-basic-chip):last-child{margin-bottom:0}"],
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush
	        }), 
	        __metadata$44('design:paramtypes', [_angular_core.ElementRef])
	    ], MdChipList);
	    return MdChipList;
	}());
	var MdChipsModule = (function () {
	    function MdChipsModule() {
	    }
	    /** @deprecated */
	    MdChipsModule.forRoot = function () {
	        return {
	            ngModule: MdChipsModule,
	            providers: []
	        };
	    };
	    MdChipsModule = __decorate$44([
	        _angular_core.NgModule({
	            imports: [],
	            exports: [MdChipList, MdChip],
	            declarations: [MdChipList, MdChip]
	        }), 
	        __metadata$44('design:paramtypes', [])
	    ], MdChipsModule);
	    return MdChipsModule;
	}());
	
	var __extends$13 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate$47 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$47 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Exception thrown when attempting to load an icon with a name that cannot be found.
	 * @docs-private
	 */
	var MdIconNameNotFoundError = (function (_super) {
	    __extends$13(MdIconNameNotFoundError, _super);
	    function MdIconNameNotFoundError(iconName) {
	        _super.call(this, "Unable to find icon with the name \"" + iconName + "\"");
	    }
	    return MdIconNameNotFoundError;
	}(MdError));
	/**
	 * Exception thrown when attempting to load SVG content that does not contain the expected
	 * <svg> tag.
	 * @docs-private
	 */
	var MdIconSvgTagNotFoundError = (function (_super) {
	    __extends$13(MdIconSvgTagNotFoundError, _super);
	    function MdIconSvgTagNotFoundError() {
	        _super.call(this, '<svg> tag not found');
	    }
	    return MdIconSvgTagNotFoundError;
	}(MdError));
	/**
	 * Configuration for an icon, including the URL and possibly the cached SVG element.
	 * @docs-private
	 */
	var SvgIconConfig = (function () {
	    function SvgIconConfig(url) {
	        this.url = url;
	        this.svgElement = null;
	    }
	    return SvgIconConfig;
	}());
	/** Returns the cache key to use for an icon namespace and name. */
	var iconKey = function (namespace, name) { return namespace + ':' + name; };
	/**
	 * Service to register and display icons used by the <md-icon> component.
	 * - Registers icon URLs by namespace and name.
	 * - Registers icon set URLs by namespace.
	 * - Registers aliases for CSS classes, for use with icon fonts.
	 * - Loads icons from URLs and extracts individual icons from icon sets.
	 */
	var MdIconRegistry = (function () {
	    function MdIconRegistry(_http, _sanitizer) {
	        this._http = _http;
	        this._sanitizer = _sanitizer;
	        /**
	         * URLs and cached SVG elements for individual icons. Keys are of the format "[namespace]:[icon]".
	         */
	        this._svgIconConfigs = new Map();
	        /**
	         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.
	         * Multiple icon sets can be registered under the same namespace.
	         */
	        this._iconSetConfigs = new Map();
	        /** Cache for icons loaded by direct URLs. */
	        this._cachedIconsByUrl = new Map();
	        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */
	        this._inProgressUrlFetches = new Map();
	        /** Map from font identifiers to their CSS class names. Used for icon fonts. */
	        this._fontCssClassesByAlias = new Map();
	        /**
	         * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.
	         * The default 'material-icons' value assumes that the material icon font has been loaded as
	         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web
	         */
	        this._defaultFontSetClass = 'material-icons';
	    }
	    /**
	     * Registers an icon by URL in the default namespace.
	     * @param iconName Name under which the icon should be registered.
	     * @param url
	     */
	    MdIconRegistry.prototype.addSvgIcon = function (iconName, url) {
	        return this.addSvgIconInNamespace('', iconName, url);
	    };
	    /**
	     * Registers an icon by URL in the specified namespace.
	     * @param namespace Namespace in which the icon should be registered.
	     * @param iconName Name under which the icon should be registered.
	     * @param url
	     */
	    MdIconRegistry.prototype.addSvgIconInNamespace = function (namespace, iconName, url) {
	        var key = iconKey(namespace, iconName);
	        this._svgIconConfigs.set(key, new SvgIconConfig(url));
	        return this;
	    };
	    /**
	     * Registers an icon set by URL in the default namespace.
	     * @param url
	     */
	    MdIconRegistry.prototype.addSvgIconSet = function (url) {
	        return this.addSvgIconSetInNamespace('', url);
	    };
	    /**
	     * Registers an icon set by URL in the specified namespace.
	     * @param namespace Namespace in which to register the icon set.
	     * @param url
	     */
	    MdIconRegistry.prototype.addSvgIconSetInNamespace = function (namespace, url) {
	        var config = new SvgIconConfig(url);
	        if (this._iconSetConfigs.has(namespace)) {
	            this._iconSetConfigs.get(namespace).push(config);
	        }
	        else {
	            this._iconSetConfigs.set(namespace, [config]);
	        }
	        return this;
	    };
	    /**
	     * Defines an alias for a CSS class name to be used for icon fonts. Creating an mdIcon
	     * component with the alias as the fontSet input will cause the class name to be applied
	     * to the <md-icon> element.
	     *
	     * @param alias Alias for the font.
	     * @param className Class name override to be used instead of the alias.
	     */
	    MdIconRegistry.prototype.registerFontClassAlias = function (alias, className) {
	        if (className === void 0) { className = alias; }
	        this._fontCssClassesByAlias.set(alias, className);
	        return this;
	    };
	    /**
	     * Returns the CSS class name associated with the alias by a previous call to
	     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.
	     */
	    MdIconRegistry.prototype.classNameForFontAlias = function (alias) {
	        return this._fontCssClassesByAlias.get(alias) || alias;
	    };
	    /**
	     * Sets the CSS class name to be used for icon fonts when an <md-icon> component does not
	     * have a fontSet input value, and is not loading an icon by name or URL.
	     *
	     * @param className
	     */
	    MdIconRegistry.prototype.setDefaultFontSetClass = function (className) {
	        this._defaultFontSetClass = className;
	        return this;
	    };
	    /**
	     * Returns the CSS class name to be used for icon fonts when an <md-icon> component does not
	     * have a fontSet input value, and is not loading an icon by name or URL.
	     */
	    MdIconRegistry.prototype.getDefaultFontSetClass = function () {
	        return this._defaultFontSetClass;
	    };
	    /**
	     * Returns an Observable that produces the icon (as an <svg> DOM element) from the given URL.
	     * The response from the URL may be cached so this will not always cause an HTTP request, but
	     * the produced element will always be a new copy of the originally fetched icon. (That is,
	     * it will not contain any modifications made to elements previously returned).
	     *
	     * @param safeUrl URL from which to fetch the SVG icon.
	     */
	    MdIconRegistry.prototype.getSvgIconFromUrl = function (safeUrl) {
	        var _this = this;
	        var url = this._sanitizer.sanitize(_angular_core.SecurityContext.RESOURCE_URL, safeUrl);
	        if (this._cachedIconsByUrl.has(url)) {
	            return rxjs_Observable.Observable.of(cloneSvg(this._cachedIconsByUrl.get(url)));
	        }
	        return this._loadSvgIconFromConfig(new SvgIconConfig(url))
	            .do(function (svg) { return _this._cachedIconsByUrl.set(url, svg); })
	            .map(function (svg) { return cloneSvg(svg); });
	    };
	    /**
	     * Returns an Observable that produces the icon (as an <svg> DOM element) with the given name
	     * and namespace. The icon must have been previously registered with addIcon or addIconSet;
	     * if not, the Observable will throw an MdIconNameNotFoundError.
	     *
	     * @param name Name of the icon to be retrieved.
	     * @param namespace Namespace in which to look for the icon.
	     */
	    MdIconRegistry.prototype.getNamedSvgIcon = function (name, namespace) {
	        if (namespace === void 0) { namespace = ''; }
	        // Return (copy of) cached icon if possible.
	        var key = iconKey(namespace, name);
	        if (this._svgIconConfigs.has(key)) {
	            return this._getSvgFromConfig(this._svgIconConfigs.get(key));
	        }
	        // See if we have any icon sets registered for the namespace.
	        var iconSetConfigs = this._iconSetConfigs.get(namespace);
	        if (iconSetConfigs) {
	            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);
	        }
	        return rxjs_Observable.Observable.throw(new MdIconNameNotFoundError(key));
	    };
	    /**
	     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.
	     */
	    MdIconRegistry.prototype._getSvgFromConfig = function (config) {
	        if (config.svgElement) {
	            // We already have the SVG element for this icon, return a copy.
	            return rxjs_Observable.Observable.of(cloneSvg(config.svgElement));
	        }
	        else {
	            // Fetch the icon from the config's URL, cache it, and return a copy.
	            return this._loadSvgIconFromConfig(config)
	                .do(function (svg) { return config.svgElement = svg; })
	                .map(function (svg) { return cloneSvg(svg); });
	        }
	    };
	    /**
	     * Attempts to find an icon with the specified name in any of the SVG icon sets.
	     * First searches the available cached icons for a nested element with a matching name, and
	     * if found copies the element to a new <svg> element. If not found, fetches all icon sets
	     * that have not been cached, and searches again after all fetches are completed.
	     * The returned Observable produces the SVG element if possible, and throws
	     * MdIconNameNotFoundError if no icon with the specified name can be found.
	     */
	    MdIconRegistry.prototype._getSvgFromIconSetConfigs = function (name, iconSetConfigs) {
	        var _this = this;
	        // For all the icon set SVG elements we've fetched, see if any contain an icon with the
	        // requested name.
	        var namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);
	        if (namedIcon) {
	            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every
	            // time anyway, there's probably not much advantage compared to just always extracting
	            // it from the icon set.
	            return rxjs_Observable.Observable.of(namedIcon);
	        }
	        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't
	        // fetched, fetch them now and look for iconName in the results.
	        var iconSetFetchRequests = iconSetConfigs
	            .filter(function (iconSetConfig) { return !iconSetConfig.svgElement; })
	            .map(function (iconSetConfig) {
	            return _this._loadSvgIconSetFromConfig(iconSetConfig)
	                .catch(function (err, caught) {
	                var url = _this._sanitizer.sanitize(_angular_core.SecurityContext.RESOURCE_URL, iconSetConfig.url);
	                // Swallow errors fetching individual URLs so the combined Observable won't
	                // necessarily fail.
	                console.log("Loading icon set URL: " + url + " failed: " + err);
	                return rxjs_Observable.Observable.of(null);
	            })
	                .do(function (svg) {
	                // Cache SVG element.
	                if (svg) {
	                    iconSetConfig.svgElement = svg;
	                }
	            });
	        });
	        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a
	        // cached SVG element (unless the request failed), and we can check again for the icon.
	        return rxjs_Observable.Observable.forkJoin(iconSetFetchRequests)
	            .map(function (ignoredResults) {
	            var foundIcon = _this._extractIconWithNameFromAnySet(name, iconSetConfigs);
	            if (!foundIcon) {
	                throw new MdIconNameNotFoundError(name);
	            }
	            return foundIcon;
	        });
	    };
	    /**
	     * Searches the cached SVG elements for the given icon sets for a nested icon element whose "id"
	     * tag matches the specified name. If found, copies the nested element to a new SVG element and
	     * returns it. Returns null if no matching element is found.
	     */
	    MdIconRegistry.prototype._extractIconWithNameFromAnySet = function (iconName, iconSetConfigs) {
	        // Iterate backwards, so icon sets added later have precedence.
	        for (var i = iconSetConfigs.length - 1; i >= 0; i--) {
	            var config = iconSetConfigs[i];
	            if (config.svgElement) {
	                var foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);
	                if (foundIcon) {
	                    return foundIcon;
	                }
	            }
	        }
	        return null;
	    };
	    /**
	     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element
	     * from it.
	     */
	    MdIconRegistry.prototype._loadSvgIconFromConfig = function (config) {
	        var _this = this;
	        return this._fetchUrl(config.url)
	            .map(function (svgText) { return _this._createSvgElementForSingleIcon(svgText); });
	    };
	    /**
	     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element
	     * from it.
	     */
	    MdIconRegistry.prototype._loadSvgIconSetFromConfig = function (config) {
	        var _this = this;
	        // TODO: Document that icons should only be loaded from trusted sources.
	        return this._fetchUrl(config.url)
	            .map(function (svgText) { return _this._svgElementFromString(svgText); });
	    };
	    /**
	     * Creates a DOM element from the given SVG string, and adds default attributes.
	     */
	    MdIconRegistry.prototype._createSvgElementForSingleIcon = function (responseText) {
	        var svg = this._svgElementFromString(responseText);
	        this._setSvgAttributes(svg);
	        return svg;
	    };
	    /**
	     * Searches the cached element of the given SvgIconConfig for a nested icon element whose "id"
	     * tag matches the specified name. If found, copies the nested element to a new SVG element and
	     * returns it. Returns null if no matching element is found.
	     */
	    MdIconRegistry.prototype._extractSvgIconFromSet = function (iconSet, iconName) {
	        var iconNode = iconSet.querySelector('#' + iconName);
	        if (!iconNode) {
	            return null;
	        }
	        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as
	        // the content of a new <svg> node.
	        if (iconNode.tagName.toLowerCase() == 'svg') {
	            return this._setSvgAttributes(iconNode.cloneNode(true));
	        }
	        // createElement('SVG') doesn't work as expected; the DOM ends up with
	        // the correct nodes, but the SVG content doesn't render. Instead we
	        // have to create an empty SVG node using innerHTML and append its content.
	        // Elements created using DOMParser.parseFromString have the same problem.
	        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display
	        var svg = this._svgElementFromString('<svg></svg>');
	        // Clone the node so we don't remove it from the parent icon set element.
	        svg.appendChild(iconNode.cloneNode(true));
	        return this._setSvgAttributes(svg);
	    };
	    /**
	     * Creates a DOM element from the given SVG string.
	     */
	    MdIconRegistry.prototype._svgElementFromString = function (str) {
	        // TODO: Is there a better way than innerHTML? Renderer doesn't appear to have a method for
	        // creating an element from an HTML string.
	        var div = document.createElement('DIV');
	        div.innerHTML = str;
	        var svg = div.querySelector('svg');
	        if (!svg) {
	            throw new MdIconSvgTagNotFoundError();
	        }
	        return svg;
	    };
	    /**
	     * Sets the default attributes for an SVG element to be used as an icon.
	     */
	    MdIconRegistry.prototype._setSvgAttributes = function (svg) {
	        if (!svg.getAttribute('xmlns')) {
	            svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
	        }
	        svg.setAttribute('fit', '');
	        svg.setAttribute('height', '100%');
	        svg.setAttribute('width', '100%');
	        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
	        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.
	        return svg;
	    };
	    /**
	     * Returns an Observable which produces the string contents of the given URL. Results may be
	     * cached, so future calls with the same URL may not cause another HTTP request.
	     */
	    MdIconRegistry.prototype._fetchUrl = function (safeUrl) {
	        var _this = this;
	        var url = this._sanitizer.sanitize(_angular_core.SecurityContext.RESOURCE_URL, safeUrl);
	        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is
	        // already a request in progress for that URL. It's necessary to call share() on the
	        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.
	        if (this._inProgressUrlFetches.has(url)) {
	            return this._inProgressUrlFetches.get(url);
	        }
	        // TODO(jelbourn): for some reason, the `finally` operator "loses" the generic type on the
	        // Observable. Figure out why and fix it.
	        var req = this._http.get(url)
	            .map(function (response) { return response.text(); })
	            .finally(function () {
	            _this._inProgressUrlFetches.delete(url);
	        })
	            .share();
	        this._inProgressUrlFetches.set(url, req);
	        return req;
	    };
	    MdIconRegistry = __decorate$47([
	        _angular_core.Injectable(), 
	        __metadata$47('design:paramtypes', [_angular_http.Http, _angular_platformBrowser.DomSanitizer])
	    ], MdIconRegistry);
	    return MdIconRegistry;
	}());
	/** Clones an SVGElement while preserving type information. */
	function cloneSvg(svg) {
	    return svg.cloneNode(true);
	}
	
	var __extends$12 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate$46 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$46 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/** Exception thrown when an invalid icon name is passed to an md-icon component. */
	var MdIconInvalidNameError = (function (_super) {
	    __extends$12(MdIconInvalidNameError, _super);
	    function MdIconInvalidNameError(iconName) {
	        _super.call(this, "Invalid icon name: \"" + iconName + "\"");
	    }
	    return MdIconInvalidNameError;
	}(MdError));
	/**
	 * Component to display an icon. It can be used in the following ways:
	 * - Specify the svgSrc input to load an SVG icon from a URL. The SVG content is directly inlined
	 *   as a child of the <md-icon> component, so that CSS styles can easily be applied to it.
	 *   The URL is loaded via an XMLHttpRequest, so it must be on the same domain as the page or its
	 *   server must be configured to allow cross-domain requests.
	 *   Example:
	 *     <md-icon svgSrc="assets/arrow.svg"></md-icon>
	 *
	 * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the
	 *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of
	 *   MdIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format
	 *   "[namespace]:[name]", if not the value will be the name of an icon in the default namespace.
	 *   Examples:
	 *     <md-icon svgIcon="left-arrow"></md-icon>
	 *     <md-icon svgIcon="animals:cat"></md-icon>
	 *
	 * - Use a font ligature as an icon by putting the ligature text in the content of the <md-icon>
	 *   component. By default the Material icons font is used as described at
	 *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an
	 *   alternate font by setting the fontSet input to either the CSS class to apply to use the
	 *   desired font, or to an alias previously registered with MdIconRegistry.registerFontClassAlias.
	 *   Examples:
	 *     <md-icon>home</md-icon>
	 *     <md-icon fontSet="myfont">sun</md-icon>
	 *
	 * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the
	 *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a
	 *   CSS class which causes the glyph to be displayed via a :before selector, as in
	 *   https://fortawesome.github.io/Font-Awesome/examples/
	 *   Example:
	 *     <md-icon fontSet="fa" fontIcon="alarm"></md-icon>
	 */
	var MdIcon = (function () {
	    function MdIcon(_elementRef, _renderer, _mdIconRegistry) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this._mdIconRegistry = _mdIconRegistry;
	        /** Screenreader label for the icon. */
	        this.hostAriaLabel = '';
	    }
	    Object.defineProperty(MdIcon.prototype, "color", {
	        /** Color of the icon. */
	        get: function () { return this._color; },
	        set: function (value) { this._updateColor(value); },
	        enumerable: true,
	        configurable: true
	    });
	    MdIcon.prototype._updateColor = function (newColor) {
	        this._setElementColor(this._color, false);
	        this._setElementColor(newColor, true);
	        this._color = newColor;
	    };
	    MdIcon.prototype._setElementColor = function (color, isAdd) {
	        if (color != null && color != '') {
	            this._renderer.setElementClass(this._elementRef.nativeElement, "mat-" + color, isAdd);
	        }
	    };
	    /**
	     * Splits an svgIcon binding value into its icon set and icon name components.
	     * Returns a 2-element array of [(icon set), (icon name)].
	     * The separator for the two fields is ':'. If there is no separator, an empty
	     * string is returned for the icon set and the entire value is returned for
	     * the icon name. If the argument is falsy, returns an array of two empty strings.
	     * Throws a MdIconInvalidNameError if the name contains two or more ':' separators.
	     * Examples:
	     *   'social:cake' -> ['social', 'cake']
	     *   'penguin' -> ['', 'penguin']
	     *   null -> ['', '']
	     *   'a:b:c' -> (throws MdIconInvalidNameError)
	     */
	    MdIcon.prototype._splitIconName = function (iconName) {
	        if (!iconName) {
	            return ['', ''];
	        }
	        var parts = iconName.split(':');
	        switch (parts.length) {
	            case 1:
	                // Use default namespace.
	                return ['', parts[0]];
	            case 2:
	                return parts;
	            default:
	                throw new MdIconInvalidNameError(iconName);
	        }
	    };
	    MdIcon.prototype.ngOnChanges = function (changes) {
	        var _this = this;
	        var changedInputs = Object.keys(changes);
	        // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.
	        if (changedInputs.indexOf('svgIcon') != -1 || changedInputs.indexOf('svgSrc') != -1) {
	            if (this.svgIcon) {
	                var _a = this._splitIconName(this.svgIcon), namespace = _a[0], iconName = _a[1];
	                this._mdIconRegistry.getNamedSvgIcon(iconName, namespace).first().subscribe(function (svg) { return _this._setSvgElement(svg); }, function (err) { return console.log("Error retrieving icon: " + err); });
	            }
	        }
	        if (this._usingFontIcon()) {
	            this._updateFontIconClasses();
	        }
	        this._updateAriaLabel();
	    };
	    MdIcon.prototype.ngOnInit = function () {
	        // Update font classes because ngOnChanges won't be called if none of the inputs are present,
	        // e.g. <md-icon>arrow</md-icon>. In this case we need to add a CSS class for the default font.
	        if (this._usingFontIcon()) {
	            this._updateFontIconClasses();
	        }
	    };
	    MdIcon.prototype.ngAfterViewChecked = function () {
	        // Update aria label here because it may depend on the projected text content.
	        // (e.g. <md-icon>home</md-icon> should use 'home').
	        this._updateAriaLabel();
	    };
	    MdIcon.prototype._updateAriaLabel = function () {
	        var ariaLabel = this._getAriaLabel();
	        if (ariaLabel && ariaLabel !== this._previousAriaLabel) {
	            this._previousAriaLabel = ariaLabel;
	            this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-label', ariaLabel);
	        }
	    };
	    MdIcon.prototype._getAriaLabel = function () {
	        // If the parent provided an aria-label attribute value, use it as-is. Otherwise look for a
	        // reasonable value from the alt attribute, font icon name, SVG icon name, or (for ligatures)
	        // the text content of the directive.
	        var label = this.hostAriaLabel ||
	            this.alt ||
	            this.fontIcon ||
	            this._splitIconName(this.svgIcon)[1];
	        if (label) {
	            return label;
	        }
	        // The "content" of an SVG icon is not a useful label.
	        if (this._usingFontIcon()) {
	            var text = this._elementRef.nativeElement.textContent;
	            if (text) {
	                return text;
	            }
	        }
	        // TODO: Warn here in dev mode.
	        return null;
	    };
	    MdIcon.prototype._usingFontIcon = function () {
	        return !this.svgIcon;
	    };
	    MdIcon.prototype._setSvgElement = function (svg) {
	        var layoutElement = this._elementRef.nativeElement;
	        // Remove existing child nodes and add the new SVG element.
	        // We would use renderer.detachView(Array.from(layoutElement.childNodes)) here,
	        // but it fails in IE11: https://github.com/angular/angular/issues/6327
	        layoutElement.innerHTML = '';
	        this._renderer.projectNodes(layoutElement, [svg]);
	    };
	    MdIcon.prototype._updateFontIconClasses = function () {
	        if (!this._usingFontIcon()) {
	            return;
	        }
	        var elem = this._elementRef.nativeElement;
	        var fontSetClass = this.fontSet ?
	            this._mdIconRegistry.classNameForFontAlias(this.fontSet) :
	            this._mdIconRegistry.getDefaultFontSetClass();
	        if (fontSetClass != this._previousFontSetClass) {
	            if (this._previousFontSetClass) {
	                this._renderer.setElementClass(elem, this._previousFontSetClass, false);
	            }
	            if (fontSetClass) {
	                this._renderer.setElementClass(elem, fontSetClass, true);
	            }
	            this._previousFontSetClass = fontSetClass;
	        }
	        if (this.fontIcon != this._previousFontIconClass) {
	            if (this._previousFontIconClass) {
	                this._renderer.setElementClass(elem, this._previousFontIconClass, false);
	            }
	            if (this.fontIcon) {
	                this._renderer.setElementClass(elem, this.fontIcon, true);
	            }
	            this._previousFontIconClass = this.fontIcon;
	        }
	    };
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', String)
	    ], MdIcon.prototype, "svgIcon", void 0);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', String)
	    ], MdIcon.prototype, "fontSet", void 0);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', String)
	    ], MdIcon.prototype, "fontIcon", void 0);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', String)
	    ], MdIcon.prototype, "alt", void 0);
	    __decorate$46([
	        _angular_core.Input('aria-label'), 
	        __metadata$46('design:type', String)
	    ], MdIcon.prototype, "hostAriaLabel", void 0);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', String)
	    ], MdIcon.prototype, "color", null);
	    MdIcon = __decorate$46([
	        _angular_core.Component({template: '<ng-content></ng-content>',
	            selector: 'md-icon, mat-icon',
	            styles: [".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}"],
	            host: {
	                'role': 'img',
	                '[class.mat-icon]': 'true',
	            },
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,
	        }), 
	        __metadata$46('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer, MdIconRegistry])
	    ], MdIcon);
	    return MdIcon;
	}());
	function ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, http, sanitizer) {
	    return parentRegistry || new MdIconRegistry(http, sanitizer);
	}
	
	var ICON_REGISTRY_PROVIDER = {
	    // If there is already an MdIconRegistry available, use that. Otherwise, provide a new one.
	    provide: MdIconRegistry,
	    deps: [[new _angular_core.Optional(), new _angular_core.SkipSelf(), MdIconRegistry], _angular_http.Http, _angular_platformBrowser.DomSanitizer],
	    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,
	};
	var MdIconModule = (function () {
	    function MdIconModule() {
	    }
	    /** @deprecated */
	    MdIconModule.forRoot = function () {
	        return {
	            ngModule: MdIconModule,
	            providers: [],
	        };
	    };
	    MdIconModule = __decorate$46([
	        _angular_core.NgModule({
	            imports: [_angular_http.HttpModule, CompatibilityModule],
	            exports: [MdIcon, CompatibilityModule],
	            declarations: [MdIcon],
	            providers: [ICON_REGISTRY_PROVIDER],
	        }), 
	        __metadata$46('design:paramtypes', [])
	    ], MdIconModule);
	    return MdIconModule;
	}());
	
	var __extends$14 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate$48 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$48 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	// TODO(josephperrott): Benchpress tests.
	/** A single degree in radians. */
	var DEGREE_IN_RADIANS = Math.PI / 180;
	/** Duration of the indeterminate animation. */
	var DURATION_INDETERMINATE = 667;
	/** Duration of the indeterminate animation. */
	var DURATION_DETERMINATE = 225;
	/** Start animation value of the indeterminate animation */
	var startIndeterminate = 3;
	/** End animation value of the indeterminate animation */
	var endIndeterminate = 80;
	/* Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden. */
	var MAX_ANGLE = 359.99 / 100;
	/**
	 * Directive whose purpose is to add the mat- CSS styling to this selector.
	 */
	var MdProgressSpinnerCssMatStyler = (function () {
	    function MdProgressSpinnerCssMatStyler() {
	    }
	    MdProgressSpinnerCssMatStyler = __decorate$48([
	        _angular_core.Directive({
	            selector: 'md-progress-spinner, mat-progress-spinner',
	            host: {
	                '[class.mat-progress-spinner]': 'true'
	            }
	        }), 
	        __metadata$48('design:paramtypes', [])
	    ], MdProgressSpinnerCssMatStyler);
	    return MdProgressSpinnerCssMatStyler;
	}());
	/**
	 * Directive whose purpose is to add the mat- CSS styling to this selector.
	 */
	var MdProgressCircleCssMatStyler = (function () {
	    function MdProgressCircleCssMatStyler() {
	    }
	    MdProgressCircleCssMatStyler = __decorate$48([
	        _angular_core.Directive({
	            selector: 'md-progress-circle, mat-progress-circle',
	            host: {
	                '[class.mat-progress-circle]': 'true'
	            }
	        }), 
	        __metadata$48('design:paramtypes', [])
	    ], MdProgressCircleCssMatStyler);
	    return MdProgressCircleCssMatStyler;
	}());
	/**
	 * <md-progress-spinner> component.
	 */
	var MdProgressSpinner = (function () {
	    function MdProgressSpinner(_ngZone, _elementRef, _renderer) {
	        this._ngZone = _ngZone;
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        /** The id of the last requested animation. */
	        this._lastAnimationId = 0;
	        this._mode = 'determinate';
	        this._color = 'primary';
	    }
	    Object.defineProperty(MdProgressSpinner.prototype, "_ariaValueMin", {
	        /**
	         * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this
	         * because voiceover does not report the progress indicator as indeterminate if the aria min
	         * and/or max value are number values.
	         */
	        get: function () {
	            return this.mode == 'determinate' ? 0 : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdProgressSpinner.prototype, "_ariaValueMax", {
	        get: function () {
	            return this.mode == 'determinate' ? 100 : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdProgressSpinner.prototype, "interdeterminateInterval", {
	        /** @docs-private */
	        get: function () {
	            return this._interdeterminateInterval;
	        },
	        /** @docs-private */
	        set: function (interval) {
	            clearInterval(this._interdeterminateInterval);
	            this._interdeterminateInterval = interval;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Clean up any animations that were running.
	     */
	    MdProgressSpinner.prototype.ngOnDestroy = function () {
	        this._cleanupIndeterminateAnimation();
	    };
	    Object.defineProperty(MdProgressSpinner.prototype, "color", {
	        /** The color of the progress-spinner. Can be primary, accent, or warn. */
	        get: function () { return this._color; },
	        set: function (value) {
	            this._updateColor(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdProgressSpinner.prototype, "value", {
	        /** Value of the progress circle. It is bound to the host as the attribute aria-valuenow. */
	        get: function () {
	            if (this.mode == 'determinate') {
	                return this._value;
	            }
	        },
	        set: function (v) {
	            if (v != null && this.mode == 'determinate') {
	                var newValue = clamp(v);
	                this._animateCircle((this.value || 0), newValue, linearEase, DURATION_DETERMINATE, 0);
	                this._value = newValue;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdProgressSpinner.prototype, "mode", {
	        /**
	         * Mode of the progress circle
	         *
	         * Input must be one of the values from ProgressMode, defaults to 'determinate'.
	         * mode is bound to the host as the attribute host.
	         */
	        get: function () {
	            return this._mode;
	        },
	        set: function (m) {
	            if (m == 'indeterminate') {
	                this._startIndeterminateAnimation();
	            }
	            else {
	                this._cleanupIndeterminateAnimation();
	            }
	            this._mode = m;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Animates the circle from one percentage value to another.
	     *
	     * @param animateFrom The percentage of the circle filled starting the animation.
	     * @param animateTo The percentage of the circle filled ending the animation.
	     * @param ease The easing function to manage the pace of change in the animation.
	     * @param duration The length of time to show the animation, in milliseconds.
	     * @param rotation The starting angle of the circle fill, with 0° represented at the top center
	     *    of the circle.
	     */
	    MdProgressSpinner.prototype._animateCircle = function (animateFrom, animateTo, ease, duration, rotation) {
	        var _this = this;
	        var id = ++this._lastAnimationId;
	        var startTime = Date.now();
	        var changeInValue = animateTo - animateFrom;
	        // No need to animate it if the values are the same
	        if (animateTo === animateFrom) {
	            this._renderArc(animateTo, rotation);
	        }
	        else {
	            var animation_1 = function () {
	                var elapsedTime = Math.max(0, Math.min(Date.now() - startTime, duration));
	                _this._renderArc(ease(elapsedTime, animateFrom, changeInValue, duration), rotation);
	                // Prevent overlapping animations by checking if a new animation has been called for and
	                // if the animation has lasted longer than the animation duration.
	                if (id === _this._lastAnimationId && elapsedTime < duration) {
	                    requestAnimationFrame(animation_1);
	                }
	            };
	            // Run the animation outside of Angular's zone, in order to avoid
	            // hitting ZoneJS and change detection on each frame.
	            this._ngZone.runOutsideAngular(animation_1);
	        }
	    };
	    /**
	     * Starts the indeterminate animation interval, if it is not already running.
	     */
	    MdProgressSpinner.prototype._startIndeterminateAnimation = function () {
	        var _this = this;
	        var rotationStartPoint = 0;
	        var start = startIndeterminate;
	        var end = endIndeterminate;
	        var duration = DURATION_INDETERMINATE;
	        var animate$$1 = function () {
	            _this._animateCircle(start, end, materialEase, duration, rotationStartPoint);
	            // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.
	            rotationStartPoint = (rotationStartPoint + end) % 100;
	            var temp = start;
	            start = -end;
	            end = -temp;
	        };
	        if (!this.interdeterminateInterval) {
	            this._ngZone.runOutsideAngular(function () {
	                _this.interdeterminateInterval = setInterval(animate$$1, duration + 50, 0, false);
	                animate$$1();
	            });
	        }
	    };
	    /**
	     * Removes interval, ending the animation.
	     */
	    MdProgressSpinner.prototype._cleanupIndeterminateAnimation = function () {
	        this.interdeterminateInterval = null;
	    };
	    /**
	     * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper
	     * DOM attribute on the `<path>`.
	     */
	    MdProgressSpinner.prototype._renderArc = function (currentValue, rotation) {
	        // Caches the path reference so it doesn't have to be looked up every time.
	        var path = this._path = this._path || this._elementRef.nativeElement.querySelector('path');
	        // Ensure that the path was found. This may not be the case if the
	        // animation function fires too early.
	        if (path) {
	            path.setAttribute('d', getSvgArc(currentValue, rotation));
	        }
	    };
	    /**
	     * Updates the color of the progress-spinner by adding the new palette class to the element
	     * and removing the old one.
	     */
	    MdProgressSpinner.prototype._updateColor = function (newColor) {
	        this._setElementColor(this._color, false);
	        this._setElementColor(newColor, true);
	        this._color = newColor;
	    };
	    /** Sets the given palette class on the component element. */
	    MdProgressSpinner.prototype._setElementColor = function (color, isAdd) {
	        if (color != null && color != '') {
	            this._renderer.setElementClass(this._elementRef.nativeElement, "mat-" + color, isAdd);
	        }
	    };
	    __decorate$48([
	        _angular_core.Input(), 
	        __metadata$48('design:type', String)
	    ], MdProgressSpinner.prototype, "color", null);
	    __decorate$48([
	        _angular_core.Input(),
	        _angular_core.HostBinding('attr.aria-valuenow'), 
	        __metadata$48('design:type', Object)
	    ], MdProgressSpinner.prototype, "value", null);
	    __decorate$48([
	        _angular_core.HostBinding('attr.mode'),
	        _angular_core.Input(), 
	        __metadata$48('design:type', Object)
	    ], MdProgressSpinner.prototype, "mode", null);
	    MdProgressSpinner = __decorate$48([
	        _angular_core.Component({selector: 'md-progress-spinner, mat-progress-spinner, md-progress-circle, mat-progress-circle',
	            host: {
	                'role': 'progressbar',
	                '[attr.aria-valuemin]': '_ariaValueMin',
	                '[attr.aria-valuemax]': '_ariaValueMax'
	            },
	            template: "<svg viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid meet\"><path></path></svg>",
	            styles: [":host{display:block;height:100px;width:100px;overflow:hidden}:host svg{height:100%;width:100%;transform-origin:center}:host path{fill:transparent;stroke-width:10px}:host[mode=indeterminate] svg{animation-duration:5.25s,2.887s;animation-name:mat-progress-spinner-sporadic-rotate,mat-progress-spinner-linear-rotate;animation-timing-function:cubic-bezier(.35,0,.25,1),linear;animation-iteration-count:infinite;transition:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-sporadic-rotate{12.5%{transform:rotate(135deg)}25%{transform:rotate(270deg)}37.5%{transform:rotate(405deg)}50%{transform:rotate(540deg)}62.5%{transform:rotate(675deg)}75%{transform:rotate(810deg)}87.5%{transform:rotate(945deg)}100%{transform:rotate(1080deg)}}"],
	            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,
	        }), 
	        __metadata$48('design:paramtypes', [_angular_core.NgZone, _angular_core.ElementRef, _angular_core.Renderer])
	    ], MdProgressSpinner);
	    return MdProgressSpinner;
	}());
	/**
	 * <md-spinner> component.
	 *
	 * This is a component definition to be used as a convenience reference to create an
	 * indeterminate <md-progress-spinner> instance.
	 */
	var MdSpinner = (function (_super) {
	    __extends$14(MdSpinner, _super);
	    function MdSpinner(elementRef, ngZone, renderer) {
	        _super.call(this, ngZone, elementRef, renderer);
	        this.mode = 'indeterminate';
	    }
	    MdSpinner.prototype.ngOnDestroy = function () {
	        // The `ngOnDestroy` from `MdProgressSpinner` should be called explicitly, because
	        // in certain cases Angular won't call it (e.g. when using AoT and in unit tests).
	        _super.prototype.ngOnDestroy.call(this);
	    };
	    MdSpinner = __decorate$48([
	        _angular_core.Component({selector: 'md-spinner, mat-spinner',
	            host: {
	                'role': 'progressbar',
	                'mode': 'indeterminate',
	                '[class.mat-spinner]': 'true',
	            },
	            template: "<svg viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid meet\"><path></path></svg>",
	            styles: [":host{display:block;height:100px;width:100px;overflow:hidden}:host svg{height:100%;width:100%;transform-origin:center}:host path{fill:transparent;stroke-width:10px}:host[mode=indeterminate] svg{animation-duration:5.25s,2.887s;animation-name:mat-progress-spinner-sporadic-rotate,mat-progress-spinner-linear-rotate;animation-timing-function:cubic-bezier(.35,0,.25,1),linear;animation-iteration-count:infinite;transition:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-sporadic-rotate{12.5%{transform:rotate(135deg)}25%{transform:rotate(270deg)}37.5%{transform:rotate(405deg)}50%{transform:rotate(540deg)}62.5%{transform:rotate(675deg)}75%{transform:rotate(810deg)}87.5%{transform:rotate(945deg)}100%{transform:rotate(1080deg)}}"],
	        }), 
	        __metadata$48('design:paramtypes', [_angular_core.ElementRef, _angular_core.NgZone, _angular_core.Renderer])
	    ], MdSpinner);
	    return MdSpinner;
	}(MdProgressSpinner));
	/**
	 * Module functions.
	 */
	/** Clamps a value to be between 0 and 100. */
	function clamp(v) {
	    return Math.max(0, Math.min(100, v));
	}
	/**
	 * Converts Polar coordinates to Cartesian.
	 */
	function polarToCartesian(radius, pathRadius, angleInDegrees) {
	    var angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;
	    return (radius + (pathRadius * Math.cos(angleInRadians))) +
	        ',' + (radius + (pathRadius * Math.sin(angleInRadians)));
	}
	/**
	 * Easing function for linear animation.
	 */
	function linearEase(currentTime, startValue, changeInValue, duration) {
	    return changeInValue * currentTime / duration + startValue;
	}
	/**
	 * Easing function to match material design indeterminate animation.
	 */
	function materialEase(currentTime, startValue, changeInValue, duration) {
	    var time = currentTime / duration;
	    var timeCubed = Math.pow(time, 3);
	    var timeQuad = Math.pow(time, 4);
	    var timeQuint = Math.pow(time, 5);
	    return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));
	}
	/**
	 * Determines the path value to define the arc.  Converting percentage values to to polar
	 * coordinates on the circle, and then to cartesian coordinates in the viewport.
	 *
	 * @param currentValue The current percentage value of the progress circle, the percentage of the
	 *    circle to fill.
	 * @param rotation The starting point of the circle with 0 being the 0 degree point.
	 * @return A string for an SVG path representing a circle filled from the starting point to the
	 *    percentage value provided.
	 */
	function getSvgArc(currentValue, rotation) {
	    var startPoint = rotation || 0;
	    var radius = 50;
	    var pathRadius = 40;
	    var startAngle = startPoint * MAX_ANGLE;
	    var endAngle = currentValue * MAX_ANGLE;
	    var start = polarToCartesian(radius, pathRadius, startAngle);
	    var end = polarToCartesian(radius, pathRadius, endAngle + startAngle);
	    var arcSweep = endAngle < 0 ? 0 : 1;
	    var largeArcFlag;
	    if (endAngle < 0) {
	        largeArcFlag = endAngle >= -180 ? 0 : 1;
	    }
	    else {
	        largeArcFlag = endAngle <= 180 ? 0 : 1;
	    }
	    return "M" + start + "A" + pathRadius + "," + pathRadius + " 0 " + largeArcFlag + "," + arcSweep + " " + end;
	}
	var MdProgressSpinnerModule = (function () {
	    function MdProgressSpinnerModule() {
	    }
	    /** @deprecated */
	    MdProgressSpinnerModule.forRoot = function () {
	        return {
	            ngModule: MdProgressSpinnerModule,
	            providers: []
	        };
	    };
	    MdProgressSpinnerModule = __decorate$48([
	        _angular_core.NgModule({
	            imports: [CompatibilityModule],
	            exports: [
	                MdProgressSpinner,
	                MdSpinner,
	                CompatibilityModule,
	                MdProgressSpinnerCssMatStyler,
	                MdProgressCircleCssMatStyler
	            ],
	            declarations: [
	                MdProgressSpinner,
	                MdSpinner,
	                MdProgressSpinnerCssMatStyler,
	                MdProgressCircleCssMatStyler
	            ],
	        }), 
	        __metadata$48('design:paramtypes', [])
	    ], MdProgressSpinnerModule);
	    return MdProgressSpinnerModule;
	}());
	
	/** @deprecated */
	
	var __decorate$49 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$49 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	// TODO(josephperrott): Benchpress tests.
	// TODO(josephperrott): Add ARIA attributes for progressbar "for".
	/**
	 * <md-progress-bar> component.
	 */
	var MdProgressBar = (function () {
	    function MdProgressBar() {
	        /** Color of the progress bar. */
	        this.color = 'primary';
	        this._value = 0;
	        this._bufferValue = 0;
	        /**
	         * Mode of the progress bar.
	         *
	         * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to
	         * 'determinate'.
	         * Mirrored to mode attribute.
	         */
	        this.mode = 'determinate';
	    }
	    Object.defineProperty(MdProgressBar.prototype, "value", {
	        /** Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow. */
	        get: function () { return this._value; },
	        set: function (v) { this._value = clamp$1(v || 0); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdProgressBar.prototype, "bufferValue", {
	        /** Buffer value of the progress bar. Defaults to zero. */
	        get: function () { return this._bufferValue; },
	        set: function (v) { this._bufferValue = clamp$1(v || 0); },
	        enumerable: true,
	        configurable: true
	    });
	    /** Gets the current transform value for the progress bar's primary indicator. */
	    MdProgressBar.prototype._primaryTransform = function () {
	        var scale = this.value / 100;
	        return { transform: "scaleX(" + scale + ")" };
	    };
	    /**
	     * Gets the current transform value for the progress bar's buffer indicator.  Only used if the
	     * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.
	     */
	    MdProgressBar.prototype._bufferTransform = function () {
	        if (this.mode == 'buffer') {
	            var scale = this.bufferValue / 100;
	            return { transform: "scaleX(" + scale + ")" };
	        }
	    };
	    __decorate$49([
	        _angular_core.Input(), 
	        __metadata$49('design:type', Object)
	    ], MdProgressBar.prototype, "color", void 0);
	    __decorate$49([
	        _angular_core.Input(),
	        _angular_core.HostBinding('attr.aria-valuenow'), 
	        __metadata$49('design:type', Object)
	    ], MdProgressBar.prototype, "value", null);
	    __decorate$49([
	        _angular_core.Input(), 
	        __metadata$49('design:type', Object)
	    ], MdProgressBar.prototype, "bufferValue", null);
	    __decorate$49([
	        _angular_core.Input(),
	        _angular_core.HostBinding('attr.mode'), 
	        __metadata$49('design:type', Object)
	    ], MdProgressBar.prototype, "mode", void 0);
	    MdProgressBar = __decorate$49([
	        _angular_core.Component({selector: 'md-progress-bar, mat-progress-bar',
	            host: {
	                'role': 'progressbar',
	                'aria-valuemin': '0',
	                'aria-valuemax': '100',
	                '[class.mat-primary]': 'color == "primary"',
	                '[class.mat-accent]': 'color == "accent"',
	                '[class.mat-warn]': 'color == "warn"',
	                '[class.mat-progress-bar]': 'true',
	            },
	            template: "<div class=\"mat-progress-bar-background mat-progress-bar-element\"></div><div class=\"mat-progress-bar-buffer mat-progress-bar-element\" [ngStyle]=\"_bufferTransform()\"></div><div class=\"mat-progress-bar-primary mat-progress-bar-fill mat-progress-bar-element\" [ngStyle]=\"_primaryTransform()\"></div><div class=\"mat-progress-bar-secondary mat-progress-bar-fill mat-progress-bar-element\"></div>",
	            styles: [":host{display:block;height:5px;overflow:hidden;position:relative;transform:translateZ(0);transition:opacity 250ms linear;width:100%}:host .mat-progress-bar-element,:host .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}:host .mat-progress-bar-background{background-repeat:repeat-x;background-size:10px 4px;display:none}:host .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}:host .mat-progress-bar-secondary{display:none}:host .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}:host .mat-progress-bar-fill::after{animation:none;content:'';display:inline-block;left:0}:host[mode=query]{transform:rotateZ(180deg)}:host[mode=query] .mat-progress-bar-fill,:host[mode=indeterminate] .mat-progress-bar-fill{transition:none}:host[mode=query] .mat-progress-bar-primary,:host[mode=indeterminate] .mat-progress-bar-primary{animation:mat-progress-bar-primary-indeterminate-translate 2s infinite linear;left:-145.166611%}:host[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after,:host[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after{animation:mat-progress-bar-primary-indeterminate-scale 2s infinite linear}:host[mode=query] .mat-progress-bar-secondary,:host[mode=indeterminate] .mat-progress-bar-secondary{animation:mat-progress-bar-secondary-indeterminate-translate 2s infinite linear;left:-54.888891%;display:block}:host[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after,:host[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after{animation:mat-progress-bar-secondary-indeterminate-scale 2s infinite linear}:host[mode=buffer] .mat-progress-bar-background{animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}:host-context([dir=rtl]){transform:rotateY(180deg)}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(.5,0,.70173,.49582);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(.30244,.38135,.55,.95635);transform:translateX(83.67142%)}100%{transform:translateX(200.61106%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(.08)}36.65%{animation-timing-function:cubic-bezier(.33473,.12482,.78584,1);transform:scaleX(.08)}69.15%{animation-timing-function:cubic-bezier(.06,.11,.6,1);transform:scaleX(.66148)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:translateX(37.65191%)}48.35%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:translateX(84.38617%)}100%{transform:translateX(160.27778%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:scaleX(.08)}19.15%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:scaleX(.4571)}44.15%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:scaleX(.72796)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-10px)}}"],
	            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,
	        }), 
	        __metadata$49('design:paramtypes', [])
	    ], MdProgressBar);
	    return MdProgressBar;
	}());
	/** Clamps a value to be between two numbers, by default 0 and 100. */
	function clamp$1(v, min, max) {
	    if (min === void 0) { min = 0; }
	    if (max === void 0) { max = 100; }
	    return Math.max(min, Math.min(max, v));
	}
	var MdProgressBarModule = (function () {
	    function MdProgressBarModule() {
	    }
	    /** @deprecated */
	    MdProgressBarModule.forRoot = function () {
	        return {
	            ngModule: MdProgressBarModule,
	            providers: []
	        };
	    };
	    MdProgressBarModule = __decorate$49([
	        _angular_core.NgModule({
	            imports: [_angular_common.CommonModule, CompatibilityModule],
	            exports: [MdProgressBar, CompatibilityModule],
	            declarations: [MdProgressBar],
	        }), 
	        __metadata$49('design:paramtypes', [])
	    ], MdProgressBarModule);
	    return MdProgressBarModule;
	}());
	
	var __extends$15 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/** @docs-private */
	var MdInputContainerPlaceholderConflictError = (function (_super) {
	    __extends$15(MdInputContainerPlaceholderConflictError, _super);
	    function MdInputContainerPlaceholderConflictError() {
	        _super.call(this, 'Placeholder attribute and child element were both specified.');
	    }
	    return MdInputContainerPlaceholderConflictError;
	}(MdError));
	/** @docs-private */
	var MdInputContainerUnsupportedTypeError = (function (_super) {
	    __extends$15(MdInputContainerUnsupportedTypeError, _super);
	    function MdInputContainerUnsupportedTypeError(type) {
	        _super.call(this, "Input type \"" + type + "\" isn't supported by md-input-container.");
	    }
	    return MdInputContainerUnsupportedTypeError;
	}(MdError));
	/** @docs-private */
	var MdInputContainerDuplicatedHintError = (function (_super) {
	    __extends$15(MdInputContainerDuplicatedHintError, _super);
	    function MdInputContainerDuplicatedHintError(align) {
	        _super.call(this, "A hint was already declared for 'align=\"" + align + "\"'.");
	    }
	    return MdInputContainerDuplicatedHintError;
	}(MdError));
	/** @docs-private */
	var MdInputContainerMissingMdInputError = (function (_super) {
	    __extends$15(MdInputContainerMissingMdInputError, _super);
	    function MdInputContainerMissingMdInputError() {
	        _super.call(this, 'md-input-container must contain an mdInput directive. Did you forget to add mdInput ' +
	            'to the native input or textarea element?');
	    }
	    return MdInputContainerMissingMdInputError;
	}(MdError));
	
	var __decorate$51 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$51 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$10 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	// Invalid input type. Using one of these will throw an MdInputContainerUnsupportedTypeError.
	var MD_INPUT_INVALID_TYPES = [
	    'button',
	    'checkbox',
	    'color',
	    'file',
	    'hidden',
	    'image',
	    'radio',
	    'range',
	    'reset',
	    'submit'
	];
	var nextUniqueId$1 = 0;
	/**
	 * The placeholder directive. The content can declare this to implement more
	 * complex placeholders.
	 */
	var MdPlaceholder = (function () {
	    function MdPlaceholder() {
	    }
	    MdPlaceholder = __decorate$51([
	        _angular_core.Directive({
	            selector: 'md-placeholder, mat-placeholder'
	        }), 
	        __metadata$51('design:paramtypes', [])
	    ], MdPlaceholder);
	    return MdPlaceholder;
	}());
	/** The hint directive, used to tag content as hint labels (going under the input). */
	var MdHint = (function () {
	    function MdHint() {
	        // Whether to align the hint label at the start or end of the line.
	        this.align = 'start';
	        // Unique ID for the hint. Used for the aria-describedby on the input.
	        this.id = "md-input-hint-" + nextUniqueId$1++;
	    }
	    __decorate$51([
	        _angular_core.Input(), 
	        __metadata$51('design:type', Object)
	    ], MdHint.prototype, "align", void 0);
	    __decorate$51([
	        _angular_core.Input(), 
	        __metadata$51('design:type', String)
	    ], MdHint.prototype, "id", void 0);
	    MdHint = __decorate$51([
	        _angular_core.Directive({
	            selector: 'md-hint, mat-hint',
	            host: {
	                '[class.mat-hint]': 'true',
	                '[class.mat-right]': 'align == "end"',
	                '[attr.id]': 'id',
	            }
	        }), 
	        __metadata$51('design:paramtypes', [])
	    ], MdHint);
	    return MdHint;
	}());
	/** The input directive, used to mark the input that `MdInputContainer` is wrapping. */
	var MdInputDirective = (function () {
	    function MdInputDirective(_elementRef, _renderer, _ngControl) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this._ngControl = _ngControl;
	        /** Variables used as cache for getters and setters. */
	        this._type = 'text';
	        this._placeholder = '';
	        this._disabled = false;
	        this._required = false;
	        /** Whether the element is focused or not. */
	        this.focused = false;
	        /**
	         * Emits an event when the placeholder changes so that the `md-input-container` can re-validate.
	         */
	        this._placeholderChange = new _angular_core.EventEmitter();
	        this._neverEmptyInputTypes = [
	            'date',
	            'datetime',
	            'datetime-local',
	            'month',
	            'time',
	            'week'
	        ].filter(function (t) { return getSupportedInputTypes().has(t); });
	        // Force setter to be called in case id was not specified.
	        this.id = this.id;
	    }
	    Object.defineProperty(MdInputDirective.prototype, "disabled", {
	        /** Whether the element is disabled. */
	        get: function () {
	            return this._ngControl ? this._ngControl.disabled : this._disabled;
	        },
	        set: function (value) {
	            this._disabled = coerceBooleanProperty(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInputDirective.prototype, "id", {
	        /** Unique id of the element. */
	        get: function () { return this._id; },
	        set: function (value) { this._id = value || this._uid; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    Object.defineProperty(MdInputDirective.prototype, "placeholder", {
	        /** Placeholder attribute of the element. */
	        get: function () { return this._placeholder; },
	        set: function (value) {
	            if (this._placeholder !== value) {
	                this._placeholder = value;
	                this._placeholderChange.emit(this._placeholder);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInputDirective.prototype, "required", {
	        /** Whether the element is required. */
	        get: function () { return this._required; },
	        set: function (value) { this._required = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInputDirective.prototype, "type", {
	        /** Input type of the element. */
	        get: function () { return this._type; },
	        set: function (value) {
	            this._type = value || 'text';
	            this._validateType();
	            // When using Angular inputs, developers are no longer able to set the properties on the native
	            // input element. To ensure that bindings for `type` work, we need to sync the setter
	            // with the native property. Textarea elements don't support the type property or attribute.
	            if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {
	                this._renderer.setElementProperty(this._elementRef.nativeElement, 'type', this._type);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInputDirective.prototype, "value", {
	        /** The input element's value. */
	        get: function () { return this._elementRef.nativeElement.value; },
	        set: function (value) { this._elementRef.nativeElement.value = value; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInputDirective.prototype, "empty", {
	        get: function () {
	            return !this._isNeverEmpty() &&
	                (this.value == null || this.value === '') &&
	                // Check if the input contains bad input. If so, we know that it only appears empty because
	                // the value failed to parse. From the user's perspective it is not empty.
	                // TODO(mmalerba): Add e2e test for bad input case.
	                !this._isBadInput();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInputDirective.prototype, "_uid", {
	        get: function () { return this._cachedUid = this._cachedUid || "md-input-" + nextUniqueId$1++; },
	        enumerable: true,
	        configurable: true
	    });
	    /** Focuses the input element. */
	    MdInputDirective.prototype.focus = function () { this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'focus'); };
	    MdInputDirective.prototype._onFocus = function () { this.focused = true; };
	    MdInputDirective.prototype._onBlur = function () { this.focused = false; };
	    MdInputDirective.prototype._onInput = function () {
	        // This is a noop function and is used to let Angular know whenever the value changes.
	        // Angular will run a new change detection each time the `input` event has been dispatched.
	        // It's necessary that Angular recognizes the value change, because when floatingLabel
	        // is set to false and Angular forms aren't used, the placeholder won't recognize the
	        // value changes and will not disappear.
	        // Listening to the input event wouldn't be necessary when the input is using the
	        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.
	    };
	    /** Make sure the input is a supported type. */
	    MdInputDirective.prototype._validateType = function () {
	        if (MD_INPUT_INVALID_TYPES.indexOf(this._type) !== -1) {
	            throw new MdInputContainerUnsupportedTypeError(this._type);
	        }
	    };
	    MdInputDirective.prototype._isNeverEmpty = function () { return this._neverEmptyInputTypes.indexOf(this._type) !== -1; };
	    MdInputDirective.prototype._isBadInput = function () {
	        return this._elementRef.nativeElement.validity.badInput;
	    };
	    /** Determines if the component host is a textarea. If not recognizable it returns false. */
	    MdInputDirective.prototype._isTextarea = function () {
	        var nativeElement = this._elementRef.nativeElement;
	        return nativeElement ? nativeElement.nodeName.toLowerCase() === 'textarea' : false;
	    };
	    __decorate$51([
	        _angular_core.Input(), 
	        __metadata$51('design:type', Object)
	    ], MdInputDirective.prototype, "disabled", null);
	    __decorate$51([
	        _angular_core.Input(), 
	        __metadata$51('design:type', Object)
	    ], MdInputDirective.prototype, "id", null);
	    __decorate$51([
	        _angular_core.Input(), 
	        __metadata$51('design:type', Object)
	    ], MdInputDirective.prototype, "placeholder", null);
	    __decorate$51([
	        _angular_core.Input(), 
	        __metadata$51('design:type', Object)
	    ], MdInputDirective.prototype, "required", null);
	    __decorate$51([
	        _angular_core.Input(), 
	        __metadata$51('design:type', Object)
	    ], MdInputDirective.prototype, "type", null);
	    __decorate$51([
	        _angular_core.Output(), 
	        __metadata$51('design:type', Object)
	    ], MdInputDirective.prototype, "_placeholderChange", void 0);
	    MdInputDirective = __decorate$51([
	        _angular_core.Directive({
	            selector: "input[mdInput], textarea[mdInput], input[matInput], textarea[matInput]",
	            host: {
	                '[class.mat-input-element]': 'true',
	                // Native input properties that are overwritten by Angular inputs need to be synced with
	                // the native input element. Otherwise property bindings for those don't work.
	                '[id]': 'id',
	                '[placeholder]': 'placeholder',
	                '[disabled]': 'disabled',
	                '[required]': 'required',
	                '[attr.aria-describedby]': 'ariaDescribedby',
	                '(blur)': '_onBlur()',
	                '(focus)': '_onFocus()',
	                '(input)': '_onInput()',
	            }
	        }),
	        __param$10(2, _angular_core.Optional()), 
	        __metadata$51('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer, _angular_forms.NgControl])
	    ], MdInputDirective);
	    return MdInputDirective;
	}());
	/**
	 * Component that represents a text input. It encapsulates the <input> HTMLElement and
	 * improve on its behaviour, along with styling it according to the Material Design.
	 */
	var MdInputContainer = (function () {
	    function MdInputContainer() {
	        /** Alignment of the input container's content. */
	        this.align = 'start';
	        /** Color of the input divider, based on the theme. */
	        this.dividerColor = 'primary';
	        this._hintLabel = '';
	        // Unique id for the hint label.
	        this._hintLabelId = "md-input-hint-" + nextUniqueId$1++;
	        this._floatPlaceholder = 'auto';
	    }
	    Object.defineProperty(MdInputContainer.prototype, "_shouldAlwaysFloat", {
	        /** Whether the floating label should always float or not. */
	        get: function () { return this._floatPlaceholder === 'always'; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    Object.defineProperty(MdInputContainer.prototype, "_canPlaceholderFloat", {
	        /** Whether the placeholder can float or not. */
	        get: function () { return this._floatPlaceholder !== 'never'; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInputContainer.prototype, "hintLabel", {
	        /** Text for the input hint. */
	        get: function () { return this._hintLabel; },
	        set: function (value) {
	            this._hintLabel = value;
	            this._processHints();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInputContainer.prototype, "floatPlaceholder", {
	        /** Whether the placeholder should always float, never float or float as the user types. */
	        get: function () { return this._floatPlaceholder; },
	        set: function (value) {
	            this._floatPlaceholder = value || 'auto';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdInputContainer.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        if (!this._mdInputChild) {
	            throw new MdInputContainerMissingMdInputError();
	        }
	        this._processHints();
	        this._validatePlaceholders();
	        // Re-validate when things change.
	        this._hintChildren.changes.subscribe(function () { return _this._processHints(); });
	        this._mdInputChild._placeholderChange.subscribe(function () { return _this._validatePlaceholders(); });
	    };
	    /** Determines whether a class from the NgControl should be forwarded to the host element. */
	    MdInputContainer.prototype._shouldForward = function (prop) {
	        var control = this._mdInputChild ? this._mdInputChild._ngControl : null;
	        return control && control[prop];
	    };
	    /** Whether the input has a placeholder. */
	    MdInputContainer.prototype._hasPlaceholder = function () { return !!(this._mdInputChild.placeholder || this._placeholderChild); };
	    /** Focuses the underlying input. */
	    MdInputContainer.prototype._focusInput = function () { this._mdInputChild.focus(); };
	    /**
	     * Ensure that there is only one placeholder (either `input` attribute or child element with the
	     * `md-placeholder` attribute.
	     */
	    MdInputContainer.prototype._validatePlaceholders = function () {
	        if (this._mdInputChild.placeholder && this._placeholderChild) {
	            throw new MdInputContainerPlaceholderConflictError();
	        }
	    };
	    /**
	     * Does any extra processing that is required when handling the hints.
	     */
	    MdInputContainer.prototype._processHints = function () {
	        this._validateHints();
	        this._syncAriaDescribedby();
	    };
	    /**
	     * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the
	     * attribute being considered as `align="start"`.
	     */
	    MdInputContainer.prototype._validateHints = function () {
	        var _this = this;
	        if (this._hintChildren) {
	            var startHint_1 = null;
	            var endHint_1 = null;
	            this._hintChildren.forEach(function (hint) {
	                if (hint.align == 'start') {
	                    if (startHint_1 || _this.hintLabel) {
	                        throw new MdInputContainerDuplicatedHintError('start');
	                    }
	                    startHint_1 = hint;
	                }
	                else if (hint.align == 'end') {
	                    if (endHint_1) {
	                        throw new MdInputContainerDuplicatedHintError('end');
	                    }
	                    endHint_1 = hint;
	                }
	            });
	        }
	    };
	    /**
	     * Sets the child input's `aria-describedby` to a space-separated list of the ids
	     * of the currently-specified hints, as well as a generated id for the hint label.
	     */
	    MdInputContainer.prototype._syncAriaDescribedby = function () {
	        var ids = [];
	        var startHint = this._hintChildren ?
	            this._hintChildren.find(function (hint) { return hint.align === 'start'; }) : null;
	        var endHint = this._hintChildren ?
	            this._hintChildren.find(function (hint) { return hint.align === 'end'; }) : null;
	        if (startHint) {
	            ids.push(startHint.id);
	        }
	        else if (this._hintLabel) {
	            ids.push(this._hintLabelId);
	        }
	        if (endHint) {
	            ids.push(endHint.id);
	        }
	        this._mdInputChild.ariaDescribedby = ids.join(' ');
	    };
	    __decorate$51([
	        _angular_core.Input(), 
	        __metadata$51('design:type', Object)
	    ], MdInputContainer.prototype, "align", void 0);
	    __decorate$51([
	        _angular_core.Input(), 
	        __metadata$51('design:type', Object)
	    ], MdInputContainer.prototype, "dividerColor", void 0);
	    __decorate$51([
	        _angular_core.Input(), 
	        __metadata$51('design:type', Object)
	    ], MdInputContainer.prototype, "hintLabel", null);
	    __decorate$51([
	        _angular_core.Input(), 
	        __metadata$51('design:type', Object)
	    ], MdInputContainer.prototype, "floatPlaceholder", null);
	    __decorate$51([
	        _angular_core.ContentChild(MdInputDirective), 
	        __metadata$51('design:type', MdInputDirective)
	    ], MdInputContainer.prototype, "_mdInputChild", void 0);
	    __decorate$51([
	        _angular_core.ContentChild(MdPlaceholder), 
	        __metadata$51('design:type', MdPlaceholder)
	    ], MdInputContainer.prototype, "_placeholderChild", void 0);
	    __decorate$51([
	        _angular_core.ContentChildren(MdHint), 
	        __metadata$51('design:type', _angular_core.QueryList)
	    ], MdInputContainer.prototype, "_hintChildren", void 0);
	    MdInputContainer = __decorate$51([
	        _angular_core.Component({selector: 'md-input-container, mat-input-container',
	            template: "<div class=\"mat-input-wrapper\"><div class=\"mat-input-table\"><div class=\"mat-input-prefix\"><ng-content select=\"[mdPrefix], [matPrefix], [md-prefix]\"></ng-content></div><div class=\"mat-input-infix\" [class.mat-end]=\"align == 'end'\"><ng-content selector=\"input, textarea\"></ng-content><span class=\"mat-input-placeholder-wrapper\"><label class=\"mat-input-placeholder\" [attr.for]=\"_mdInputChild.id\" [class.mat-empty]=\"_mdInputChild.empty && !_shouldAlwaysFloat\" [class.mat-focused]=\"_mdInputChild.focused\" [class.mat-float]=\"_canPlaceholderFloat\" [class.mat-accent]=\"dividerColor == 'accent'\" [class.mat-warn]=\"dividerColor == 'warn'\" *ngIf=\"_hasPlaceholder()\"><ng-content select=\"md-placeholder, mat-placeholder\"></ng-content>{{_mdInputChild.placeholder}} <span class=\"mat-placeholder-required\" *ngIf=\"_mdInputChild.required\">*</span></label></span></div><div class=\"mat-input-suffix\"><ng-content select=\"[mdSuffix], [matSuffix], [md-suffix]\"></ng-content></div></div><div class=\"mat-input-underline\" [class.mat-disabled]=\"_mdInputChild.disabled\"><span class=\"mat-input-ripple\" [class.mat-focused]=\"_mdInputChild.focused\" [class.mat-accent]=\"dividerColor == 'accent'\" [class.mat-warn]=\"dividerColor == 'warn'\"></span></div><div *ngIf=\"hintLabel != ''\" [attr.id]=\"_hintLabelId\" class=\"mat-hint\">{{hintLabel}}</div><ng-content select=\"md-hint, mat-hint\"></ng-content></div>",
	            styles: [".mat-input-container{display:inline-block;position:relative;font-family:Roboto,\"Helvetica Neue\",sans-serif;line-height:normal;text-align:left}.mat-end .mat-input-element,[dir=rtl] .mat-input-container{text-align:right}.mat-input-wrapper{margin:1em 0;padding-bottom:6px}.mat-input-table{display:inline-table;flex-flow:column;vertical-align:bottom;width:100%}.mat-input-table>*{display:table-cell}.mat-input-infix{position:relative}.mat-input-element{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;width:100%}.mat-input-placeholder,.mat-input-placeholder-wrapper{padding-top:1em;pointer-events:none;position:absolute}[dir=rtl] .mat-end .mat-input-element{text-align:left}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element:-webkit-autofill+.mat-input-placeholder.mat-float{display:block;transform:translateY(-1.35em) scale(.75);width:133.33333%}.mat-input-element::placeholder{color:transparent}.mat-input-element::-moz-placeholder{color:transparent}.mat-input-element::-webkit-input-placeholder{color:transparent}.mat-input-element:-ms-input-placeholder{color:transparent}.mat-input-placeholder{left:0;top:0;font-size:100%;z-index:1;width:100%;display:none;white-space:nowrap;text-overflow:ellipsis;overflow-x:hidden;transform:translateY(0);transform-origin:bottom left;transition:transform .4s cubic-bezier(.25,.8,.25,1),color .4s cubic-bezier(.25,.8,.25,1),width .4s cubic-bezier(.25,.8,.25,1)}.mat-input-placeholder.mat-empty{display:block;cursor:text}.mat-input-placeholder.mat-float.mat-focused,.mat-input-placeholder.mat-float:not(.mat-empty){display:block;transform:translateY(-1.35em) scale(.75);width:133.33333%}[dir=rtl] .mat-input-placeholder{transform-origin:bottom right;left:auto;right:0}.mat-input-placeholder-wrapper{left:0;top:-1em;width:100%;overflow:hidden}.mat-input-placeholder-wrapper::after{content:'';display:inline-table}.mat-input-underline{position:absolute;height:1px;width:100%;margin-top:4px;border-top-width:1px;border-top-style:solid}.mat-input-underline.mat-disabled{background-image:linear-gradient(to right,rgba(0,0,0,.26) 0,rgba(0,0,0,.26) 33%,transparent 0);background-size:4px 1px;background-repeat:repeat-x;border-top:0;background-position:0}.mat-input-underline .mat-input-ripple{position:absolute;height:2px;z-index:1;top:-1px;width:100%;transform-origin:top;opacity:0;transform:scaleY(0);transition:transform .4s cubic-bezier(.25,.8,.25,1),opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-input-underline .mat-input-ripple.mat-focused{opacity:1;transform:scaleY(1)}.mat-hint{display:block;position:absolute;font-size:75%;bottom:0}.mat-hint.mat-right{right:0}[dir=rtl] .mat-hint{right:0;left:auto}[dir=rtl] .mat-hint.mat-right{right:auto;left:0}.mat-input-prefix,.mat-input-suffix{width:.1px;white-space:nowrap}"],
	            host: {
	                '[class.mat-input-container]': 'true',
	                // Remove align attribute to prevent it from interfering with layout.
	                '[attr.align]': 'null',
	                '[class.ng-untouched]': '_shouldForward("untouched")',
	                '[class.ng-touched]': '_shouldForward("touched")',
	                '[class.ng-pristine]': '_shouldForward("pristine")',
	                '[class.ng-dirty]': '_shouldForward("dirty")',
	                '[class.ng-valid]': '_shouldForward("valid")',
	                '[class.ng-invalid]': '_shouldForward("invalid")',
	                '[class.ng-pending]': '_shouldForward("pending")',
	                '(click)': '_focusInput()',
	            },
	            encapsulation: _angular_core.ViewEncapsulation.None,
	        }), 
	        __metadata$51('design:paramtypes', [])
	    ], MdInputContainer);
	    return MdInputContainer;
	}());
	
	var __decorate$52 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$52 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Directive to automatically resize a textarea to fit its content.
	 */
	var MdTextareaAutosize = (function () {
	    function MdTextareaAutosize(_elementRef) {
	        this._elementRef = _elementRef;
	    }
	    Object.defineProperty(MdTextareaAutosize.prototype, "mdAutosizeMinRows", {
	        get: function () {
	            return this.minRows;
	        },
	        set: function (value) {
	            this.minRows = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTextareaAutosize.prototype, "mdAutosizeMaxRows", {
	        get: function () {
	            return this.maxRows;
	        },
	        set: function (value) {
	            this.maxRows = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTextareaAutosize.prototype, "_minHeight", {
	        /** The minimum height of the textarea as determined by minRows. */
	        get: function () {
	            return this.minRows ? this.minRows * this._cachedLineHeight + "px" : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTextareaAutosize.prototype, "_maxHeight", {
	        /** The maximum height of the textarea as determined by maxRows. */
	        get: function () {
	            return this.maxRows ? this.maxRows * this._cachedLineHeight + "px" : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdTextareaAutosize.prototype.ngOnInit = function () {
	        this._cacheTextareaLineHeight();
	        this.resizeToFitContent();
	    };
	    /**
	     * Cache the height of a single-row textarea.
	     *
	     * We need to know how large a single "row" of a textarea is in order to apply minRows and
	     * maxRows. For the initial version, we will assume that the height of a single line in the
	     * textarea does not ever change.
	     */
	    MdTextareaAutosize.prototype._cacheTextareaLineHeight = function () {
	        var textarea = this._elementRef.nativeElement;
	        // Use a clone element because we have to override some styles.
	        var textareaClone = textarea.cloneNode(false);
	        textareaClone.rows = 1;
	        // Use `position: absolute` so that this doesn't cause a browser layout and use
	        // `visibility: hidden` so that nothing is rendered. Clear any other styles that
	        // would affect the height.
	        textareaClone.style.position = 'absolute';
	        textareaClone.style.visibility = 'hidden';
	        textareaClone.style.border = 'none';
	        textareaClone.style.padding = '';
	        textareaClone.style.height = '';
	        textareaClone.style.minHeight = '';
	        textareaClone.style.maxHeight = '';
	        textarea.parentNode.appendChild(textareaClone);
	        this._cachedLineHeight = textareaClone.offsetHeight;
	        textarea.parentNode.removeChild(textareaClone);
	    };
	    /** Resize the textarea to fit its content. */
	    MdTextareaAutosize.prototype.resizeToFitContent = function () {
	        var textarea = this._elementRef.nativeElement;
	        // Reset the textarea height to auto in order to shrink back to its default size.
	        textarea.style.height = 'auto';
	        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.
	        textarea.style.height = textarea.scrollHeight + "px";
	    };
	    __decorate$52([
	        _angular_core.Input(), 
	        __metadata$52('design:type', Number)
	    ], MdTextareaAutosize.prototype, "minRows", void 0);
	    __decorate$52([
	        _angular_core.Input(), 
	        __metadata$52('design:type', Number)
	    ], MdTextareaAutosize.prototype, "mdAutosizeMinRows", null);
	    __decorate$52([
	        _angular_core.Input(), 
	        __metadata$52('design:type', Number)
	    ], MdTextareaAutosize.prototype, "maxRows", void 0);
	    __decorate$52([
	        _angular_core.Input(), 
	        __metadata$52('design:type', Number)
	    ], MdTextareaAutosize.prototype, "mdAutosizeMaxRows", null);
	    MdTextareaAutosize = __decorate$52([
	        _angular_core.Directive({
	            selector: 'textarea[md-autosize], textarea[mdTextareaAutosize],' +
	                'textarea[mat-autosize], textarea[matTextareaAutosize]',
	            exportAs: 'mdTextareaAutosize',
	            host: {
	                '(input)': 'resizeToFitContent()',
	                '[style.min-height]': '_minHeight',
	                '[style.max-height]': '_maxHeight',
	            },
	        }), 
	        __metadata$52('design:paramtypes', [_angular_core.ElementRef])
	    ], MdTextareaAutosize);
	    return MdTextareaAutosize;
	}());
	
	var __decorate$50 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$50 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MdInputModule = (function () {
	    function MdInputModule() {
	    }
	    /** @deprecated */
	    MdInputModule.forRoot = function () {
	        return {
	            ngModule: MdInputModule,
	            providers: [],
	        };
	    };
	    MdInputModule = __decorate$50([
	        _angular_core.NgModule({
	            declarations: [
	                MdPlaceholder,
	                MdInputContainer,
	                MdHint,
	                MdTextareaAutosize,
	                MdInputDirective
	            ],
	            imports: [
	                _angular_common.CommonModule,
	                _angular_forms.FormsModule,
	                PlatformModule,
	            ],
	            exports: [
	                MdPlaceholder,
	                MdInputContainer,
	                MdHint,
	                MdTextareaAutosize,
	                MdInputDirective
	            ],
	        }), 
	        __metadata$50('design:paramtypes', [])
	    ], MdInputModule);
	    return MdInputModule;
	}());
	
	/**
	 * Configuration used when opening a snack-bar.
	 */
	var MdSnackBarConfig = (function () {
	    function MdSnackBarConfig() {
	        /** The politeness level for the MdAriaLiveAnnouncer announcement. */
	        this.politeness = 'assertive';
	        /** Message to be announced by the MdAriaLiveAnnouncer */
	        this.announcementMessage = '';
	        /** The view container to place the overlay for the snack bar into. */
	        this.viewContainerRef = null;
	        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */
	        this.duration = 0;
	    }
	    return MdSnackBarConfig;
	}());
	
	// TODO(josephperrott): Implement onAction observable.
	/**
	 * Reference to a snack bar dispatched from the snack bar service.
	 */
	var MdSnackBarRef = (function () {
	    function MdSnackBarRef(instance, containerInstance, _overlayRef) {
	        var _this = this;
	        this._overlayRef = _overlayRef;
	        /** Subject for notifying the user that the snack bar has closed. */
	        this._afterClosed = new rxjs_Subject.Subject();
	        /** Subject for notifying the user that the snack bar action was called. */
	        this._onAction = new rxjs_Subject.Subject();
	        // Sets the readonly instance of the snack bar content component.
	        this._instance = instance;
	        this.containerInstance = containerInstance;
	        // Dismiss snackbar on action.
	        this.onAction().subscribe(function () { return _this.dismiss(); });
	        containerInstance._onExit().subscribe(function () { return _this._finishDismiss(); });
	    }
	    Object.defineProperty(MdSnackBarRef.prototype, "instance", {
	        /** The instance of the component making up the content of the snack bar. */
	        get: function () {
	            return this._instance;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Dismisses the snack bar. */
	    MdSnackBarRef.prototype.dismiss = function () {
	        if (!this._afterClosed.closed) {
	            this.containerInstance.exit();
	        }
	    };
	    /** Marks the snackbar action clicked. */
	    MdSnackBarRef.prototype._action = function () {
	        if (!this._onAction.closed) {
	            this._onAction.next();
	            this._onAction.complete();
	        }
	    };
	    /** Marks the snackbar as opened */
	    MdSnackBarRef.prototype._open = function () {
	        if (!this._afterOpened.closed) {
	            this._afterOpened.next();
	            this._afterOpened.complete();
	        }
	    };
	    /** Cleans up the DOM after closing. */
	    MdSnackBarRef.prototype._finishDismiss = function () {
	        this._overlayRef.dispose();
	        this._afterClosed.next();
	        this._afterClosed.complete();
	    };
	    /** Gets an observable that is notified when the snack bar is finished closing. */
	    MdSnackBarRef.prototype.afterDismissed = function () {
	        return this._afterClosed.asObservable();
	    };
	    /** Gets an observable that is notified when the snack bar has opened and appeared. */
	    MdSnackBarRef.prototype.afterOpened = function () {
	        return this.containerInstance._onEnter();
	    };
	    /** Gets an observable that is notified when the snack bar action is called. */
	    MdSnackBarRef.prototype.onAction = function () {
	        return this._onAction.asObservable();
	    };
	    return MdSnackBarRef;
	}());
	
	var __extends$17 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * Error that is thrown when attempting to attach a snack bar that is already attached.
	 * @docs-private
	 */
	var MdSnackBarContentAlreadyAttached = (function (_super) {
	    __extends$17(MdSnackBarContentAlreadyAttached, _super);
	    function MdSnackBarContentAlreadyAttached() {
	        _super.call(this, 'Attempting to attach snack bar content after content is already attached');
	    }
	    return MdSnackBarContentAlreadyAttached;
	}(MdError));
	
	var __extends$16 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate$55 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$55 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	// TODO(jelbourn): we can't use constants from animation.ts here because you can't use
	// a text interpolation in anything that is analyzed statically with ngc (for AoT compile).
	var SHOW_ANIMATION = '225ms cubic-bezier(0.4,0.0,1,1)';
	var HIDE_ANIMATION = '195ms cubic-bezier(0.0,0.0,0.2,1)';
	/**
	 * Internal component that wraps user-provided snack bar content.
	 * @docs-private
	 */
	var MdSnackBarContainer = (function (_super) {
	    __extends$16(MdSnackBarContainer, _super);
	    function MdSnackBarContainer(_ngZone, _renderer, _elementRef) {
	        _super.call(this);
	        this._ngZone = _ngZone;
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        /** Subject for notifying that the snack bar has exited from view. */
	        this.onExit = new rxjs_Subject.Subject();
	        /** Subject for notifying that the snack bar has finished entering the view. */
	        this.onEnter = new rxjs_Subject.Subject();
	        /** The state of the snack bar animations. */
	        this.animationState = 'initial';
	    }
	    /** Attach a component portal as content to this snack bar container. */
	    MdSnackBarContainer.prototype.attachComponentPortal = function (portal) {
	        if (this._portalHost.hasAttached()) {
	            throw new MdSnackBarContentAlreadyAttached();
	        }
	        if (this.snackBarConfig.extraClasses) {
	            // Not the most efficient way of adding classes, but the renderer doesn't allow us
	            // to pass in an array or a space-separated list.
	            for (var _i = 0, _a = this.snackBarConfig.extraClasses; _i < _a.length; _i++) {
	                var cssClass = _a[_i];
	                this._renderer.setElementClass(this._elementRef.nativeElement, cssClass, true);
	            }
	        }
	        return this._portalHost.attachComponentPortal(portal);
	    };
	    /** Attach a template portal as content to this snack bar container. */
	    MdSnackBarContainer.prototype.attachTemplatePortal = function (portal) {
	        throw Error('Not yet implemented');
	    };
	    /** Handle end of animations, updating the state of the snackbar. */
	    MdSnackBarContainer.prototype.onAnimationEnd = function (event) {
	        var _this = this;
	        if (event.toState === 'void' || event.toState === 'complete') {
	            this._completeExit();
	        }
	        if (event.toState === 'visible') {
	            this._ngZone.run(function () {
	                _this.onEnter.next();
	                _this.onEnter.complete();
	            });
	        }
	    };
	    /** Begin animation of snack bar entrance into view. */
	    MdSnackBarContainer.prototype.enter = function () {
	        this.animationState = 'visible';
	    };
	    /** Returns an observable resolving when the enter animation completes.  */
	    MdSnackBarContainer.prototype._onEnter = function () {
	        this.animationState = 'visible';
	        return this.onEnter.asObservable();
	    };
	    /** Begin animation of the snack bar exiting from view. */
	    MdSnackBarContainer.prototype.exit = function () {
	        this.animationState = 'complete';
	        return this._onExit();
	    };
	    /** Returns an observable that completes after the closing animation is done. */
	    MdSnackBarContainer.prototype._onExit = function () {
	        return this.onExit.asObservable();
	    };
	    /**
	     * Makes sure the exit callbacks have been invoked when the element is destroyed.
	     */
	    MdSnackBarContainer.prototype.ngOnDestroy = function () {
	        this._completeExit();
	    };
	    /**
	     * Waits for the zone to settle before removing the element. Helps prevent
	     * errors where we end up removing an element which is in the middle of an animation.
	     */
	    MdSnackBarContainer.prototype._completeExit = function () {
	        var _this = this;
	        this._ngZone.onMicrotaskEmpty.first().subscribe(function () {
	            _this.onExit.next();
	            _this.onExit.complete();
	        });
	    };
	    __decorate$55([
	        _angular_core.ViewChild(PortalHostDirective), 
	        __metadata$55('design:type', PortalHostDirective)
	    ], MdSnackBarContainer.prototype, "_portalHost", void 0);
	    MdSnackBarContainer = __decorate$55([
	        _angular_core.Component({selector: 'snack-bar-container',
	            template: "<template cdkPortalHost></template>",
	            styles: [":host{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12);background:#323232;border-radius:2px;box-sizing:content-box;display:block;height:20px;max-width:568px;min-width:288px;overflow:hidden;padding:14px 24px;transform:translateY(100%)}@media screen and (-ms-high-contrast:active){:host{border:1px solid}}"],
	            host: {
	                'role': 'alert',
	                '[@state]': 'animationState',
	                '(@state.done)': 'onAnimationEnd($event)'
	            },
	            animations: [
	                _angular_core.trigger('state', [
	                    _angular_core.state('initial', _angular_core.style({ transform: 'translateY(100%)' })),
	                    _angular_core.state('visible', _angular_core.style({ transform: 'translateY(0%)' })),
	                    _angular_core.state('complete', _angular_core.style({ transform: 'translateY(100%)' })),
	                    _angular_core.transition('visible => complete', _angular_core.animate(HIDE_ANIMATION)),
	                    _angular_core.transition('initial => visible, void => visible', _angular_core.animate(SHOW_ANIMATION)),
	                ])
	            ],
	        }), 
	        __metadata$55('design:paramtypes', [_angular_core.NgZone, _angular_core.Renderer, _angular_core.ElementRef])
	    ], MdSnackBarContainer);
	    return MdSnackBarContainer;
	}(BasePortalHost));
	
	var __decorate$56 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$56 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * A component used to open as the default snack bar, matching material spec.
	 * This should only be used internally by the snack bar service.
	 */
	var SimpleSnackBar = (function () {
	    function SimpleSnackBar() {
	    }
	    /** Dismisses the snack bar. */
	    SimpleSnackBar.prototype.dismiss = function () {
	        this.snackBarRef._action();
	    };
	    Object.defineProperty(SimpleSnackBar.prototype, "hasAction", {
	        /** If the action button should be shown. */
	        get: function () { return !!this.action; },
	        enumerable: true,
	        configurable: true
	    });
	    SimpleSnackBar = __decorate$56([
	        _angular_core.Component({selector: 'simple-snack-bar',
	            template: "<span class=\"mat-simple-snackbar-message\">{{message}}</span> <button class=\"mat-simple-snackbar-action\" *ngIf=\"hasAction\" (click)=\"dismiss()\">{{action}}</button>",
	            styles: [":host{display:flex;justify-content:space-between;color:#fff;line-height:20px;font-size:14px;font-family:Roboto,\"Helvetica Neue\",sans-serif}.mat-simple-snackbar-message{white-space:nowrap;overflow-x:hidden;text-overflow:ellipsis}.mat-simple-snackbar-action{cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:0;border:none;background:0 0;margin:-5px 0 0;padding:5px;text-transform:uppercase;color:inherit;line-height:inherit;flex-shrink:0;font-family:inherit;font-size:inherit;font-weight:600}"],
	            host: {
	                '[class.mat-simple-snackbar]': 'true',
	            }
	        }), 
	        __metadata$56('design:paramtypes', [])
	    ], SimpleSnackBar);
	    return SimpleSnackBar;
	}());
	
	/**
	 * Extends an object with the *enumerable* and *own* properties of one or more source objects,
	 * similar to Object.assign.
	 *
	 * @param dest The object which will have properties copied to it.
	 * @param sources The source objects from which properties will be copied.
	 */
	function extendObject(dest) {
	    var sources = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        sources[_i - 1] = arguments[_i];
	    }
	    if (dest == null) {
	        throw TypeError('Cannot convert undefined or null to object');
	    }
	    for (var _a = 0, sources_1 = sources; _a < sources_1.length; _a++) {
	        var source = sources_1[_a];
	        if (source != null) {
	            for (var key in source) {
	                if (source.hasOwnProperty(key)) {
	                    dest[key] = source[key];
	                }
	            }
	        }
	    }
	    return dest;
	}
	
	var __decorate$54 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$54 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$11 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	/**
	 * Service to dispatch Material Design snack bar messages.
	 */
	var MdSnackBar = (function () {
	    function MdSnackBar(_overlay, _live, _parentSnackBar) {
	        this._overlay = _overlay;
	        this._live = _live;
	        this._parentSnackBar = _parentSnackBar;
	    }
	    Object.defineProperty(MdSnackBar.prototype, "_openedSnackBarRef", {
	        /** Reference to the currently opened snackbar at *any* level. */
	        get: function () {
	            return this._parentSnackBar ?
	                this._parentSnackBar._openedSnackBarRef : this._snackBarRefAtThisLevel;
	        },
	        set: function (value) {
	            if (this._parentSnackBar) {
	                this._parentSnackBar._openedSnackBarRef = value;
	            }
	            else {
	                this._snackBarRefAtThisLevel = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Creates and dispatches a snack bar with a custom component for the content, removing any
	     * currently opened snack bars.
	     *
	     * @param component Component to be instantiated.
	     * @param config Extra configuration for the snack bar.
	     */
	    MdSnackBar.prototype.openFromComponent = function (component, config) {
	        var _this = this;
	        config = _applyConfigDefaults(config);
	        var overlayRef = this._createOverlay();
	        var snackBarContainer = this._attachSnackBarContainer(overlayRef, config);
	        var snackBarRef = this._attachSnackbarContent(component, snackBarContainer, overlayRef);
	        // When the snackbar is dismissed, clear the reference to it.
	        snackBarRef.afterDismissed().subscribe(function () {
	            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.
	            if (_this._openedSnackBarRef == snackBarRef) {
	                _this._openedSnackBarRef = null;
	            }
	        });
	        // If a snack bar is already in view, dismiss it and enter the new snack bar after exit
	        // animation is complete.
	        if (this._openedSnackBarRef) {
	            this._openedSnackBarRef.afterDismissed().subscribe(function () {
	                snackBarRef.containerInstance.enter();
	            });
	            this._openedSnackBarRef.dismiss();
	        }
	        else {
	            snackBarRef.containerInstance.enter();
	        }
	        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.
	        if (config.duration > 0) {
	            snackBarRef.afterOpened().subscribe(function () {
	                setTimeout(function () { return snackBarRef.dismiss(); }, config.duration);
	            });
	        }
	        this._live.announce(config.announcementMessage, config.politeness);
	        this._openedSnackBarRef = snackBarRef;
	        return this._openedSnackBarRef;
	    };
	    /**
	     * Opens a snackbar with a message and an optional action.
	     * @param message The message to show in the snackbar.
	     * @param action The label for the snackbar action.
	     * @param config Additional configuration options for the snackbar.
	     */
	    MdSnackBar.prototype.open = function (message, action, config) {
	        if (action === void 0) { action = ''; }
	        if (config === void 0) { config = {}; }
	        config.announcementMessage = message;
	        var simpleSnackBarRef = this.openFromComponent(SimpleSnackBar, config);
	        simpleSnackBarRef.instance.snackBarRef = simpleSnackBarRef;
	        simpleSnackBarRef.instance.message = message;
	        simpleSnackBarRef.instance.action = action;
	        return simpleSnackBarRef;
	    };
	    /**
	     * Attaches the snack bar container component to the overlay.
	     */
	    MdSnackBar.prototype._attachSnackBarContainer = function (overlayRef, config) {
	        var containerPortal = new ComponentPortal(MdSnackBarContainer, config.viewContainerRef);
	        var containerRef = overlayRef.attach(containerPortal);
	        containerRef.instance.snackBarConfig = config;
	        return containerRef.instance;
	    };
	    /**
	     * Places a new component as the content of the snack bar container.
	     */
	    MdSnackBar.prototype._attachSnackbarContent = function (component, container, overlayRef) {
	        var portal = new ComponentPortal(component);
	        var contentRef = container.attachComponentPortal(portal);
	        return new MdSnackBarRef(contentRef.instance, container, overlayRef);
	    };
	    /**
	     * Creates a new overlay and places it in the correct location.
	     */
	    MdSnackBar.prototype._createOverlay = function () {
	        var state$$1 = new OverlayState();
	        state$$1.positionStrategy = this._overlay.position().global()
	            .centerHorizontally()
	            .bottom('0');
	        return this._overlay.create(state$$1);
	    };
	    MdSnackBar = __decorate$54([
	        _angular_core.Injectable(),
	        __param$11(2, _angular_core.Optional()),
	        __param$11(2, _angular_core.SkipSelf()), 
	        __metadata$54('design:paramtypes', [Overlay, LiveAnnouncer, MdSnackBar])
	    ], MdSnackBar);
	    return MdSnackBar;
	}());
	/**
	 * Applies default options to the snackbar config.
	 * @param config The configuration to which the defaults will be applied.
	 * @returns The new configuration object with defaults applied.
	 */
	function _applyConfigDefaults(config) {
	    return extendObject(new MdSnackBarConfig(), config);
	}
	
	var __decorate$53 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$53 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MdSnackBarModule = (function () {
	    function MdSnackBarModule() {
	    }
	    /** @deprecated */
	    MdSnackBarModule.forRoot = function () {
	        return {
	            ngModule: MdSnackBarModule,
	            providers: []
	        };
	    };
	    MdSnackBarModule = __decorate$53([
	        _angular_core.NgModule({
	            imports: [OverlayModule, PortalModule, _angular_common.CommonModule, CompatibilityModule],
	            exports: [MdSnackBarContainer, CompatibilityModule],
	            declarations: [MdSnackBarContainer, SimpleSnackBar],
	            entryComponents: [MdSnackBarContainer, SimpleSnackBar],
	            providers: [MdSnackBar, LIVE_ANNOUNCER_PROVIDER]
	        }), 
	        __metadata$53('design:paramtypes', [])
	    ], MdSnackBarModule);
	    return MdSnackBarModule;
	}());
	
	var __extends$18 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate$58 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$58 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/** Used to flag tab labels for use with the portal directive */
	var MdTabLabel = (function (_super) {
	    __extends$18(MdTabLabel, _super);
	    function MdTabLabel(templateRef, viewContainerRef) {
	        _super.call(this, templateRef, viewContainerRef);
	    }
	    MdTabLabel = __decorate$58([
	        _angular_core.Directive({
	            selector: '[md-tab-label], [mat-tab-label]',
	        }), 
	        __metadata$58('design:paramtypes', [_angular_core.TemplateRef, _angular_core.ViewContainerRef])
	    ], MdTabLabel);
	    return MdTabLabel;
	}(TemplatePortalDirective));
	
	var __decorate$59 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$59 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/** Used in the `md-tab-group` view to display tab labels */
	var MdTabLabelWrapper = (function () {
	    function MdTabLabelWrapper(elementRef, _renderer) {
	        this.elementRef = elementRef;
	        this._renderer = _renderer;
	        /** Whether the tab label is disabled.  */
	        this._disabled = false;
	    }
	    Object.defineProperty(MdTabLabelWrapper.prototype, "disabled", {
	        /** Whether the element is disabled. */
	        get: function () { return this._disabled; },
	        set: function (value) { this._disabled = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    /** Sets focus on the wrapper element */
	    MdTabLabelWrapper.prototype.focus = function () {
	        this._renderer.invokeElementMethod(this.elementRef.nativeElement, 'focus');
	    };
	    MdTabLabelWrapper.prototype.getOffsetLeft = function () {
	        return this.elementRef.nativeElement.offsetLeft;
	    };
	    MdTabLabelWrapper.prototype.getOffsetWidth = function () {
	        return this.elementRef.nativeElement.offsetWidth;
	    };
	    __decorate$59([
	        _angular_core.Input(), 
	        __metadata$59('design:type', Object)
	    ], MdTabLabelWrapper.prototype, "disabled", null);
	    MdTabLabelWrapper = __decorate$59([
	        _angular_core.Directive({
	            selector: '[md-tab-label-wrapper], [mat-tab-label-wrapper]',
	            host: {
	                '[class.mat-tab-disabled]': 'disabled'
	            }
	        }), 
	        __metadata$59('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer])
	    ], MdTabLabelWrapper);
	    return MdTabLabelWrapper;
	}());
	
	var __decorate$61 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$61 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/** The ink-bar is used to display and animate the line underneath the current active tab label. */
	var MdInkBar = (function () {
	    function MdInkBar(_renderer, _elementRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	    }
	    /**
	     * Calculates the styles from the provided element in order to align the ink-bar to that element.
	     * Shows the ink bar if previously set as hidden.
	     * @param element
	     */
	    MdInkBar.prototype.alignToElement = function (element) {
	        this.show();
	        this._renderer.setElementStyle(this._elementRef.nativeElement, 'left', this._getLeftPosition(element));
	        this._renderer.setElementStyle(this._elementRef.nativeElement, 'width', this._getElementWidth(element));
	    };
	    /** Shows the ink bar. */
	    MdInkBar.prototype.show = function () {
	        this._renderer.setElementStyle(this._elementRef.nativeElement, 'visibility', 'visible');
	    };
	    /** Hides the ink bar. */
	    MdInkBar.prototype.hide = function () {
	        this._renderer.setElementStyle(this._elementRef.nativeElement, 'visibility', 'hidden');
	    };
	    /**
	     * Generates the pixel distance from the left based on the provided element in string format.
	     * @param element
	     */
	    MdInkBar.prototype._getLeftPosition = function (element) {
	        return element ? element.offsetLeft + 'px' : '0';
	    };
	    /**
	     * Generates the pixel width from the provided element in string format.
	     * @param element
	     */
	    MdInkBar.prototype._getElementWidth = function (element) {
	        return element ? element.offsetWidth + 'px' : '0';
	    };
	    MdInkBar = __decorate$61([
	        _angular_core.Directive({
	            selector: 'md-ink-bar, mat-ink-bar',
	            host: {
	                '[class.mat-ink-bar]': 'true',
	            },
	        }), 
	        __metadata$61('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef])
	    ], MdInkBar);
	    return MdInkBar;
	}());
	
	var __extends$19 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate$60 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$60 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Navigation component matching the styles of the tab group header.
	 * Provides anchored navigation with animated ink bar.
	 */
	var MdTabNavBar = (function () {
	    function MdTabNavBar() {
	    }
	    /** Notifies the component that the active link has been changed. */
	    MdTabNavBar.prototype.updateActiveLink = function (element) {
	        this._activeLinkChanged = this._activeLinkElement != element;
	        this._activeLinkElement = element;
	    };
	    /** Checks if the active link has been changed and, if so, will update the ink bar. */
	    MdTabNavBar.prototype.ngAfterContentChecked = function () {
	        if (this._activeLinkChanged) {
	            this._inkBar.alignToElement(this._activeLinkElement.nativeElement);
	            this._activeLinkChanged = false;
	        }
	    };
	    __decorate$60([
	        _angular_core.ViewChild(MdInkBar), 
	        __metadata$60('design:type', MdInkBar)
	    ], MdTabNavBar.prototype, "_inkBar", void 0);
	    MdTabNavBar = __decorate$60([
	        _angular_core.Component({selector: '[md-tab-nav-bar], [mat-tab-nav-bar]',
	            template: "<div class=\"mat-tab-links\"><ng-content></ng-content></div><md-ink-bar></md-ink-bar>",
	            styles: [".mat-tab-link,.mat-tab-nav-bar{position:relative;overflow:hidden}.mat-tab-nav-bar{flex-shrink:0}.mat-tab-links{display:flex;position:relative}.mat-tab-link{line-height:48px;height:48px;padding:0 12px;font-size:14px;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-weight:500;cursor:pointer;box-sizing:border-box;color:currentColor;opacity:.6;min-width:160px;text-align:center;text-decoration:none}.mat-tab-link:focus{outline:0;opacity:1}@media (max-width:600px){.mat-tab-link{min-width:72px}}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}"],
	            host: {
	                '[class.mat-tab-nav-bar]': 'true',
	            },
	            encapsulation: _angular_core.ViewEncapsulation.None,
	        }), 
	        __metadata$60('design:paramtypes', [])
	    ], MdTabNavBar);
	    return MdTabNavBar;
	}());
	/**
	 * Link inside of a `md-tab-nav-bar`.
	 */
	var MdTabLink = (function () {
	    function MdTabLink(_mdTabNavBar, _elementRef) {
	        this._mdTabNavBar = _mdTabNavBar;
	        this._elementRef = _elementRef;
	        this._isActive = false;
	    }
	    Object.defineProperty(MdTabLink.prototype, "active", {
	        /** Whether the link is active. */
	        get: function () { return this._isActive; },
	        set: function (value) {
	            this._isActive = value;
	            if (value) {
	                this._mdTabNavBar.updateActiveLink(this._elementRef);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    __decorate$60([
	        _angular_core.Input(), 
	        __metadata$60('design:type', Boolean)
	    ], MdTabLink.prototype, "active", null);
	    MdTabLink = __decorate$60([
	        _angular_core.Directive({
	            selector: '[md-tab-link], [mat-tab-link]',
	            host: {
	                '[class.mat-tab-link]': 'true',
	            }
	        }), 
	        __metadata$60('design:paramtypes', [MdTabNavBar, _angular_core.ElementRef])
	    ], MdTabLink);
	    return MdTabLink;
	}());
	/**
	 * Simple directive that extends the ripple and matches the selector of the MdTabLink. This
	 * adds the ripple behavior to nav bar labels.
	 */
	var MdTabLinkRipple = (function (_super) {
	    __extends$19(MdTabLinkRipple, _super);
	    function MdTabLinkRipple(elementRef, ngZone, ruler) {
	        _super.call(this, elementRef, ngZone, ruler);
	    }
	    MdTabLinkRipple = __decorate$60([
	        _angular_core.Directive({
	            selector: '[md-tab-link], [mat-tab-link]',
	            host: {
	                '[class.mat-tab-link]': 'true',
	            },
	        }), 
	        __metadata$60('design:paramtypes', [_angular_core.ElementRef, _angular_core.NgZone, ViewportRuler])
	    ], MdTabLinkRipple);
	    return MdTabLinkRipple;
	}(MdRipple));
	
	var __decorate$62 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$62 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MdTab = (function () {
	    function MdTab(_viewContainerRef) {
	        this._viewContainerRef = _viewContainerRef;
	        /** The plain text label for the tab, used when there is no template label. */
	        this.textLabel = '';
	        /** The portal that will be the hosted content of the tab */
	        this._contentPortal = null;
	        /**
	         * The relatively indexed position where 0 represents the center, negative is left, and positive
	         * represents the right.
	         */
	        this.position = null;
	        /**
	         * The initial relatively index origin of the tab if it was created and selected after there
	         * was already a selected tab. Provides context of what position the tab should originate from.
	         */
	        this.origin = null;
	        this._disabled = false;
	    }
	    Object.defineProperty(MdTab.prototype, "content", {
	        get: function () { return this._contentPortal; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTab.prototype, "disabled", {
	        get: function () { return this._disabled; },
	        /** Whether the tab is disabled */
	        set: function (value) { this._disabled = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    MdTab.prototype.ngOnInit = function () {
	        this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);
	    };
	    __decorate$62([
	        _angular_core.ContentChild(MdTabLabel), 
	        __metadata$62('design:type', MdTabLabel)
	    ], MdTab.prototype, "templateLabel", void 0);
	    __decorate$62([
	        _angular_core.ViewChild(_angular_core.TemplateRef), 
	        __metadata$62('design:type', _angular_core.TemplateRef)
	    ], MdTab.prototype, "_content", void 0);
	    __decorate$62([
	        _angular_core.Input('label'), 
	        __metadata$62('design:type', String)
	    ], MdTab.prototype, "textLabel", void 0);
	    __decorate$62([
	        _angular_core.Input(), 
	        __metadata$62('design:type', Boolean), 
	        __metadata$62('design:paramtypes', [Boolean])
	    ], MdTab.prototype, "disabled", null);
	    MdTab = __decorate$62([
	        _angular_core.Component({selector: 'md-tab, mat-tab',
	            template: "<template><ng-content></ng-content></template>",
	        }), 
	        __metadata$62('design:paramtypes', [_angular_core.ViewContainerRef])
	    ], MdTab);
	    return MdTab;
	}());
	
	var __decorate$63 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$63 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$12 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	/**
	 * Wrapper for the contents of a tab.
	 */
	var MdTabBody = (function () {
	    function MdTabBody(_dir, _elementRef, _changeDetectorRef) {
	        this._dir = _dir;
	        this._elementRef = _elementRef;
	        this._changeDetectorRef = _changeDetectorRef;
	        /** Event emitted when the tab begins to animate towards the center as the active tab. */
	        this.onCentering = new _angular_core.EventEmitter();
	        /** Event emitted when the tab completes its animation towards the center. */
	        this.onCentered = new _angular_core.EventEmitter(true);
	        /** Whether the element is allowed to be animated. */
	        this._canBeAnimated = false;
	    }
	    Object.defineProperty(MdTabBody.prototype, "position", {
	        set: function (position) {
	            if (position < 0) {
	                this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';
	            }
	            else if (position > 0) {
	                this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';
	            }
	            else {
	                this._position = 'center';
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTabBody.prototype, "origin", {
	        /** The origin position from which this tab should appear when it is centered into view. */
	        set: function (origin) {
	            if (origin == null) {
	                return;
	            }
	            var dir = this._getLayoutDirection();
	            if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {
	                this._origin = 'left';
	            }
	            else {
	                this._origin = 'right';
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * After initialized, check if the content is centered and has an origin. If so, set the
	     * special position states that transition the tab from the left or right before centering.
	     */
	    MdTabBody.prototype.ngOnInit = function () {
	        if (this._position == 'center' && this._origin) {
	            this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';
	        }
	    };
	    /**
	     * After the view has been set, check if the tab content is set to the center and attach the
	     * content if it is not already attached.
	     */
	    MdTabBody.prototype.ngAfterViewChecked = function () {
	        if (this._isCenterPosition(this._position) && !this._portalHost.hasAttached()) {
	            this._portalHost.attach(this._content);
	        }
	    };
	    /**
	     * After the content has been checked, determines whether the element should be allowed to
	     * animate. This has to be limited, because under a specific set of circumstances (see #2151),
	     * the animations can be triggered too early, which either crashes Chrome by putting it into an
	     * infinite loop (with Angular < 2.3.0) or throws an error because the element doesn't have a
	     * computed style (with Angular > 2.3.0). This can alternatively be determined by checking the
	     * transform: canBeAnimated = getComputedStyle(element) !== '', however document.contains should
	     * be faster since it doesn't cause a reflow.
	     *
	     * TODO: This can safely be removed after we stop supporting Angular < 2.4.2. The fix landed via
	     * https://github.com/angular/angular/commit/21030e9a1cf30e8101399d8535ed72d847a23ba6
	     */
	    MdTabBody.prototype.ngAfterContentChecked = function () {
	        if (!this._canBeAnimated) {
	            this._canBeAnimated = document.body.contains(this._elementRef.nativeElement);
	            if (this._canBeAnimated) {
	                this._changeDetectorRef.markForCheck();
	            }
	        }
	    };
	    MdTabBody.prototype._onTranslateTabStarted = function (e) {
	        if (this._isCenterPosition(e.toState)) {
	            this.onCentering.emit(this._elementRef.nativeElement.clientHeight);
	        }
	    };
	    MdTabBody.prototype._onTranslateTabComplete = function (e) {
	        // If the end state is that the tab is not centered, then detach the content.
	        if (!this._isCenterPosition(e.toState) && !this._isCenterPosition(this._position)) {
	            this._portalHost.detach();
	        }
	        // If the transition to the center is complete, emit an event.
	        if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {
	            this.onCentered.emit();
	        }
	    };
	    /** The text direction of the containing app. */
	    MdTabBody.prototype._getLayoutDirection = function () {
	        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
	    };
	    /** Whether the provided position state is considered center, regardless of origin. */
	    MdTabBody.prototype._isCenterPosition = function (position) {
	        return position == 'center' ||
	            position == 'left-origin-center' ||
	            position == 'right-origin-center';
	    };
	    __decorate$63([
	        _angular_core.ViewChild(PortalHostDirective), 
	        __metadata$63('design:type', PortalHostDirective)
	    ], MdTabBody.prototype, "_portalHost", void 0);
	    __decorate$63([
	        _angular_core.Output(), 
	        __metadata$63('design:type', _angular_core.EventEmitter)
	    ], MdTabBody.prototype, "onCentering", void 0);
	    __decorate$63([
	        _angular_core.Output(), 
	        __metadata$63('design:type', _angular_core.EventEmitter)
	    ], MdTabBody.prototype, "onCentered", void 0);
	    __decorate$63([
	        _angular_core.Input('content'), 
	        __metadata$63('design:type', TemplatePortal)
	    ], MdTabBody.prototype, "_content", void 0);
	    __decorate$63([
	        _angular_core.Input('position'), 
	        __metadata$63('design:type', Number), 
	        __metadata$63('design:paramtypes', [Number])
	    ], MdTabBody.prototype, "position", null);
	    __decorate$63([
	        _angular_core.Input('origin'), 
	        __metadata$63('design:type', Number), 
	        __metadata$63('design:paramtypes', [Number])
	    ], MdTabBody.prototype, "origin", null);
	    MdTabBody = __decorate$63([
	        _angular_core.Component({selector: 'md-tab-body, mat-tab-body',
	            template: "<div class=\"mat-tab-body-content\" #content [@translateTab]=\"_canBeAnimated ? _position : null\" (@translateTab.start)=\"_onTranslateTabStarted($event)\" (@translateTab.done)=\"_onTranslateTabComplete($event)\"><template cdkPortalHost></template></div>",
	            host: {
	                '[class.mat-tab-body]': 'true',
	            },
	            animations: [
	                _angular_core.trigger('translateTab', [
	                    _angular_core.state('left', _angular_core.style({ transform: 'translate3d(-100%, 0, 0)' })),
	                    _angular_core.state('left-origin-center', _angular_core.style({ transform: 'translate3d(0, 0, 0)' })),
	                    _angular_core.state('right-origin-center', _angular_core.style({ transform: 'translate3d(0, 0, 0)' })),
	                    _angular_core.state('center', _angular_core.style({ transform: 'translate3d(0, 0, 0)' })),
	                    _angular_core.state('right', _angular_core.style({ transform: 'translate3d(100%, 0, 0)' })),
	                    _angular_core.transition('* => left, * => right, left => center, right => center', _angular_core.animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),
	                    _angular_core.transition('void => left-origin-center', [
	                        _angular_core.style({ transform: 'translate3d(-100%, 0, 0)' }),
	                        _angular_core.animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')
	                    ]),
	                    _angular_core.transition('void => right-origin-center', [
	                        _angular_core.style({ transform: 'translate3d(100%, 0, 0)' }),
	                        _angular_core.animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')
	                    ])
	                ])
	            ]
	        }),
	        __param$12(0, _angular_core.Optional()), 
	        __metadata$63('design:paramtypes', [Dir, _angular_core.ElementRef, _angular_core.ChangeDetectorRef])
	    ], MdTabBody);
	    return MdTabBody;
	}());
	
	var __decorate$64 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$64 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$13 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	/**
	 * The distance in pixels that will be overshot when scrolling a tab label into view. This helps
	 * provide a small affordance to the label next to it.
	 */
	var EXAGGERATED_OVERSCROLL = 60;
	/**
	 * The header of the tab group which displays a list of all the tabs in the tab group. Includes
	 * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the
	 * width of the header container, then arrows will be displayed to allow the user to scroll
	 * left and right across the header.
	 */
	var MdTabHeader = (function () {
	    function MdTabHeader(_zone, _elementRef, _dir) {
	        this._zone = _zone;
	        this._elementRef = _elementRef;
	        this._dir = _dir;
	        /** The tab index that is focused. */
	        this._focusIndex = 0;
	        /** The distance in pixels that the tab labels should be translated to the left. */
	        this._scrollDistance = 0;
	        /** Whether the header should scroll to the selected index after the view has been checked. */
	        this._selectedIndexChanged = false;
	        /** Whether the controls for pagination should be displayed */
	        this._showPaginationControls = false;
	        /** Whether the tab list can be scrolled more towards the end of the tab label list. */
	        this._disableScrollAfter = true;
	        /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */
	        this._disableScrollBefore = true;
	        this._selectedIndex = 0;
	        /** Event emitted when the option is selected. */
	        this.selectFocusedIndex = new _angular_core.EventEmitter();
	        /** Event emitted when a label is focused. */
	        this.indexFocused = new _angular_core.EventEmitter();
	    }
	    Object.defineProperty(MdTabHeader.prototype, "selectedIndex", {
	        get: function () { return this._selectedIndex; },
	        /** The index of the active tab. */
	        set: function (value) {
	            this._selectedIndexChanged = this._selectedIndex != value;
	            this._selectedIndex = value;
	            this._focusIndex = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdTabHeader.prototype.ngAfterContentChecked = function () {
	        // If the number of tab labels have changed, check if scrolling should be enabled
	        if (this._tabLabelCount != this._labelWrappers.length) {
	            this._updatePagination();
	            this._tabLabelCount = this._labelWrappers.length;
	        }
	        // If the selected index has changed, scroll to the label and check if the scrolling controls
	        // should be disabled.
	        if (this._selectedIndexChanged) {
	            this._scrollToLabel(this._selectedIndex);
	            this._checkScrollingControls();
	            this._alignInkBarToSelectedTab();
	            this._selectedIndexChanged = false;
	        }
	        // If the scroll distance has been changed (tab selected, focused, scroll controls activated),
	        // then translate the header to reflect this.
	        if (this._scrollDistanceChanged) {
	            this._updateTabScrollPosition();
	            this._scrollDistanceChanged = false;
	        }
	    };
	    MdTabHeader.prototype._handleKeydown = function (event) {
	        switch (event.keyCode) {
	            case RIGHT_ARROW:
	                this._focusNextTab();
	                break;
	            case LEFT_ARROW:
	                this._focusPreviousTab();
	                break;
	            case ENTER:
	                this.selectFocusedIndex.emit(this.focusIndex);
	                break;
	        }
	    };
	    /**
	     * Aligns the ink bar to the selected tab on load.
	     */
	    MdTabHeader.prototype.ngAfterContentInit = function () {
	        this._alignInkBarToSelectedTab();
	    };
	    /**
	     * Callback for when the MutationObserver detects that the content has changed.
	     */
	    MdTabHeader.prototype._onContentChanges = function () {
	        this._updatePagination();
	        this._alignInkBarToSelectedTab();
	    };
	    /**
	     * Updating the view whether pagination should be enabled or not
	     */
	    MdTabHeader.prototype._updatePagination = function () {
	        this._checkPaginationEnabled();
	        this._checkScrollingControls();
	        this._updateTabScrollPosition();
	    };
	    Object.defineProperty(MdTabHeader.prototype, "focusIndex", {
	        /** Tracks which element has focus; used for keyboard navigation */
	        get: function () { return this._focusIndex; },
	        /** When the focus index is set, we must manually send focus to the correct label */
	        set: function (value) {
	            if (!this._isValidIndex(value) || this._focusIndex == value) {
	                return;
	            }
	            this._focusIndex = value;
	            this.indexFocused.emit(value);
	            this._setTabFocus(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is
	     * providing a valid index and return true.
	     */
	    MdTabHeader.prototype._isValidIndex = function (index) {
	        if (!this._labelWrappers) {
	            return true;
	        }
	        var tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;
	        return tab && !tab.disabled;
	    };
	    /**
	     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if
	     * scrolling is enabled.
	     */
	    MdTabHeader.prototype._setTabFocus = function (tabIndex) {
	        if (this._showPaginationControls) {
	            this._scrollToLabel(tabIndex);
	        }
	        if (this._labelWrappers && this._labelWrappers.length) {
	            this._labelWrappers.toArray()[tabIndex].focus();
	            // Do not let the browser manage scrolling to focus the element, this will be handled
	            // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width
	            // should be the full width minus the offset width.
	            var containerEl = this._tabListContainer.nativeElement;
	            var dir = this._getLayoutDirection();
	            if (dir == 'ltr') {
	                containerEl.scrollLeft = 0;
	            }
	            else {
	                containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;
	            }
	        }
	    };
	    /**
	     * Moves the focus towards the beginning or the end of the list depending on the offset provided.
	     * Valid offsets are 1 and -1.
	     */
	    MdTabHeader.prototype._moveFocus = function (offset) {
	        if (this._labelWrappers) {
	            var tabs = this._labelWrappers.toArray();
	            for (var i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {
	                if (this._isValidIndex(i)) {
	                    this.focusIndex = i;
	                    return;
	                }
	            }
	        }
	    };
	    /** Increment the focus index by 1 until a valid tab is found. */
	    MdTabHeader.prototype._focusNextTab = function () {
	        this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);
	    };
	    /** Decrement the focus index by 1 until a valid tab is found. */
	    MdTabHeader.prototype._focusPreviousTab = function () {
	        this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);
	    };
	    /** The layout direction of the containing app. */
	    MdTabHeader.prototype._getLayoutDirection = function () {
	        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
	    };
	    /** Performs the CSS transformation on the tab list that will cause the list to scroll. */
	    MdTabHeader.prototype._updateTabScrollPosition = function () {
	        var translateX = this.scrollDistance + 'px';
	        if (this._getLayoutDirection() == 'ltr') {
	            translateX = '-' + translateX;
	        }
	        applyCssTransform(this._tabList.nativeElement, "translate3d(" + translateX + ", 0, 0)");
	    };
	    Object.defineProperty(MdTabHeader.prototype, "scrollDistance", {
	        get: function () { return this._scrollDistance; },
	        /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */
	        set: function (v) {
	            this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));
	            // Mark that the scroll distance has changed so that after the view is checked, the CSS
	            // transformation can move the header.
	            this._scrollDistanceChanged = true;
	            this._checkScrollingControls();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or
	     * the end of the list, respectively). The distance to scroll is computed to be a third of the
	     * length of the tab list view window.
	     *
	     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
	     * should be called sparingly.
	     */
	    MdTabHeader.prototype._scrollHeader = function (scrollDir) {
	        var viewLength = this._tabListContainer.nativeElement.offsetWidth;
	        // Move the scroll distance one-third the length of the tab list's viewport.
	        this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;
	    };
	    /**
	     * Moves the tab list such that the desired tab label (marked by index) is moved into view.
	     *
	     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
	     * should be called sparingly.
	     */
	    MdTabHeader.prototype._scrollToLabel = function (labelIndex) {
	        var selectedLabel = this._labelWrappers
	            ? this._labelWrappers.toArray()[labelIndex]
	            : null;
	        if (!selectedLabel) {
	            return;
	        }
	        // The view length is the visible width of the tab labels.
	        var viewLength = this._tabListContainer.nativeElement.offsetWidth;
	        var labelBeforePos, labelAfterPos;
	        if (this._getLayoutDirection() == 'ltr') {
	            labelBeforePos = selectedLabel.getOffsetLeft();
	            labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();
	        }
	        else {
	            labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();
	            labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();
	        }
	        var beforeVisiblePos = this.scrollDistance;
	        var afterVisiblePos = this.scrollDistance + viewLength;
	        if (labelBeforePos < beforeVisiblePos) {
	            // Scroll header to move label to the before direction
	            this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;
	        }
	        else if (labelAfterPos > afterVisiblePos) {
	            // Scroll header to move label to the after direction
	            this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;
	        }
	    };
	    /**
	     * Evaluate whether the pagination controls should be displayed. If the scroll width of the
	     * tab list is wider than the size of the header container, then the pagination controls should
	     * be shown.
	     *
	     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
	     * should be called sparingly.
	     */
	    MdTabHeader.prototype._checkPaginationEnabled = function () {
	        this._showPaginationControls =
	            this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;
	        if (!this._showPaginationControls) {
	            this.scrollDistance = 0;
	        }
	    };
	    /**
	     * Evaluate whether the before and after controls should be enabled or disabled.
	     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the
	     * before button. If the header is at the end of the list (scroll distance is equal to the
	     * maximum distance we can scroll), then disable the after button.
	     *
	     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
	     * should be called sparingly.
	     */
	    MdTabHeader.prototype._checkScrollingControls = function () {
	        // Check if the pagination arrows should be activated.
	        this._disableScrollBefore = this.scrollDistance == 0;
	        this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();
	    };
	    /**
	     * Determines what is the maximum length in pixels that can be set for the scroll distance. This
	     * is equal to the difference in width between the tab list container and tab header container.
	     *
	     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
	     * should be called sparingly.
	     */
	    MdTabHeader.prototype._getMaxScrollDistance = function () {
	        var lengthOfTabList = this._tabList.nativeElement.scrollWidth;
	        var viewLength = this._tabListContainer.nativeElement.offsetWidth;
	        return lengthOfTabList - viewLength;
	    };
	    /** Tells the ink-bar to align itself to the current label wrapper */
	    MdTabHeader.prototype._alignInkBarToSelectedTab = function () {
	        var _this = this;
	        var selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length
	            ? this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement
	            : null;
	        this._zone.runOutsideAngular(function () {
	            requestAnimationFrame(function () {
	                _this._inkBar.alignToElement(selectedLabelWrapper);
	            });
	        });
	    };
	    __decorate$64([
	        _angular_core.ContentChildren(MdTabLabelWrapper), 
	        __metadata$64('design:type', _angular_core.QueryList)
	    ], MdTabHeader.prototype, "_labelWrappers", void 0);
	    __decorate$64([
	        _angular_core.ViewChild(MdInkBar), 
	        __metadata$64('design:type', MdInkBar)
	    ], MdTabHeader.prototype, "_inkBar", void 0);
	    __decorate$64([
	        _angular_core.ViewChild('tabListContainer'), 
	        __metadata$64('design:type', _angular_core.ElementRef)
	    ], MdTabHeader.prototype, "_tabListContainer", void 0);
	    __decorate$64([
	        _angular_core.ViewChild('tabList'), 
	        __metadata$64('design:type', _angular_core.ElementRef)
	    ], MdTabHeader.prototype, "_tabList", void 0);
	    __decorate$64([
	        _angular_core.Input(), 
	        __metadata$64('design:type', Number), 
	        __metadata$64('design:paramtypes', [Number])
	    ], MdTabHeader.prototype, "selectedIndex", null);
	    __decorate$64([
	        _angular_core.Output(), 
	        __metadata$64('design:type', Object)
	    ], MdTabHeader.prototype, "selectFocusedIndex", void 0);
	    __decorate$64([
	        _angular_core.Output(), 
	        __metadata$64('design:type', Object)
	    ], MdTabHeader.prototype, "indexFocused", void 0);
	    MdTabHeader = __decorate$64([
	        _angular_core.Component({selector: 'md-tab-header, mat-tab-header',
	            template: "<div class=\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\" aria-hidden=\"true\" md-ripple [mdRippleDisabled]=\"_disableScrollBefore\" [class.mat-tab-header-pagination-disabled]=\"_disableScrollBefore\" (click)=\"_scrollHeader('before')\"><div class=\"mat-tab-header-pagination-chevron\"></div></div><div class=\"mat-tab-label-container\" #tabListContainer (keydown)=\"_handleKeydown($event)\"><div class=\"mat-tab-list\" #tabList role=\"tablist\" (cdkObserveContent)=\"_onContentChanges()\"><div class=\"mat-tab-labels\"><ng-content></ng-content></div><md-ink-bar></md-ink-bar></div></div><div class=\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\" aria-hidden=\"true\" md-ripple [mdRippleDisabled]=\"_disableScrollAfter\" [class.mat-tab-header-pagination-disabled]=\"_disableScrollAfter\" (click)=\"_scrollHeader('after')\"><div class=\"mat-tab-header-pagination-chevron\"></div></div>",
	            styles: [".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-label{line-height:48px;height:48px;padding:0 12px;font-size:14px;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-weight:500;cursor:pointer;box-sizing:border-box;color:currentColor;opacity:.6;min-width:160px;text-align:center;position:relative}.mat-tab-label:focus{outline:0;opacity:1}@media (max-width:600px){.mat-tab-label{min-width:72px}}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}.mat-tab-header-pagination{position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination,.mat-tab-labels{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-pagination-after,.mat-tab-header-rtl .mat-tab-header-pagination-before{padding-right:4px}.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:'';height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron{border-color:#ccc}.mat-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}.mat-tab-list{flex-grow:1;position:relative;transition:transform .5s cubic-bezier(.35,0,.25,1)}"],
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            host: {
	                'class': 'mat-tab-header',
	                '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',
	                '[class.mat-tab-header-rtl]': "_getLayoutDirection() == 'rtl'",
	            }
	        }),
	        __param$13(2, _angular_core.Optional()), 
	        __metadata$64('design:paramtypes', [_angular_core.NgZone, _angular_core.ElementRef, Dir])
	    ], MdTabHeader);
	    return MdTabHeader;
	}());
	
	var __decorate$57 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$57 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/** Used to generate unique ID's for each tab component */
	var nextId$2 = 0;
	/** A simple change event emitted on focus or selection changes. */
	var MdTabChangeEvent = (function () {
	    function MdTabChangeEvent() {
	    }
	    return MdTabChangeEvent;
	}());
	/**
	 * Material design tab-group component.  Supports basic tab pairs (label + content) and includes
	 * animated ink-bar, keyboard navigation, and screen reader.
	 * See: https://www.google.com/design/spec/components/tabs.html
	 */
	var MdTabGroup = (function () {
	    function MdTabGroup(_renderer) {
	        this._renderer = _renderer;
	        /** Whether this component has been initialized. */
	        this._isInitialized = false;
	        /** The tab index that should be selected after the content has been checked. */
	        this._indexToSelect = 0;
	        /** Snapshot of the height of the tab body wrapper before another tab is activated. */
	        this._tabBodyWrapperHeight = null;
	        /** Whether the tab group should grow to the size of the active tab */
	        this._dynamicHeight = false;
	        this._selectedIndex = null;
	        /** Position of the tab header. */
	        this.headerPosition = 'above';
	        this._onFocusChange = new _angular_core.EventEmitter();
	        this._onSelectChange = new _angular_core.EventEmitter(true);
	        this._groupId = nextId$2++;
	    }
	    Object.defineProperty(MdTabGroup.prototype, "dynamicHeight", {
	        get: function () { return this._dynamicHeight; },
	        set: function (value) { this._dynamicHeight = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTabGroup.prototype, "_dynamicHeightDeprecated", {
	        /** @deprecated */
	        get: function () { return this._dynamicHeight; },
	        set: function (value) { this._dynamicHeight = value; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTabGroup.prototype, "selectedIndex", {
	        get: function () { return this._selectedIndex; },
	        /** The index of the active tab. */
	        set: function (value) { this._indexToSelect = value; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTabGroup.prototype, "selectedIndexChange", {
	        /** Output to enable support for two-way binding on `selectedIndex`. */
	        get: function () {
	            return this.selectChange.map(function (event) { return event.index; });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTabGroup.prototype, "focusChange", {
	        /** Event emitted when focus has changed within a tab group. */
	        get: function () {
	            return this._onFocusChange.asObservable();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTabGroup.prototype, "selectChange", {
	        /** Event emitted when the tab selection has changed. */
	        get: function () {
	            return this._onSelectChange.asObservable();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * After the content is checked, this component knows what tabs have been defined
	     * and what the selected index should be. This is where we can know exactly what position
	     * each tab should be in according to the new selected index, and additionally we know how
	     * a new selected tab should transition in (from the left or right).
	     */
	    MdTabGroup.prototype.ngAfterContentChecked = function () {
	        var _this = this;
	        // Clamp the next selected index to the bounds of 0 and the tabs length. Note the `|| 0`, which
	        // ensures that values like NaN can't get through and which would otherwise throw the
	        // component into an infinite loop (since Math.max(NaN, 0) === NaN).
	        this._indexToSelect =
	            Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));
	        // If there is a change in selected index, emit a change event. Should not trigger if
	        // the selected index has not yet been initialized.
	        if (this._selectedIndex != this._indexToSelect && this._selectedIndex != null) {
	            this._onSelectChange.emit(this._createChangeEvent(this._indexToSelect));
	        }
	        // Setup the position for each tab and optionally setup an origin on the next selected tab.
	        this._tabs.forEach(function (tab, index) {
	            tab.position = index - _this._indexToSelect;
	            // If there is already a selected tab, then set up an origin for the next selected tab
	            // if it doesn't have one already.
	            if (_this._selectedIndex != null && tab.position == 0 && !tab.origin) {
	                tab.origin = _this._indexToSelect - _this._selectedIndex;
	            }
	        });
	        this._selectedIndex = this._indexToSelect;
	    };
	    /**
	     * Waits one frame for the view to update, then updates the ink bar
	     * Note: This must be run outside of the zone or it will create an infinite change detection loop.
	     */
	    MdTabGroup.prototype.ngAfterViewChecked = function () {
	        this._isInitialized = true;
	    };
	    MdTabGroup.prototype._focusChanged = function (index) {
	        this._onFocusChange.emit(this._createChangeEvent(index));
	    };
	    MdTabGroup.prototype._createChangeEvent = function (index) {
	        var event = new MdTabChangeEvent;
	        event.index = index;
	        if (this._tabs && this._tabs.length) {
	            event.tab = this._tabs.toArray()[index];
	        }
	        return event;
	    };
	    /** Returns a unique id for each tab label element */
	    MdTabGroup.prototype._getTabLabelId = function (i) {
	        return "md-tab-label-" + this._groupId + "-" + i;
	    };
	    /** Returns a unique id for each tab content element */
	    MdTabGroup.prototype._getTabContentId = function (i) {
	        return "md-tab-content-" + this._groupId + "-" + i;
	    };
	    /**
	     * Sets the height of the body wrapper to the height of the activating tab if dynamic
	     * height property is true.
	     */
	    MdTabGroup.prototype._setTabBodyWrapperHeight = function (tabHeight) {
	        if (!this._dynamicHeight || !this._tabBodyWrapperHeight) {
	            return;
	        }
	        this._renderer.setElementStyle(this._tabBodyWrapper.nativeElement, 'height', this._tabBodyWrapperHeight + 'px');
	        // This conditional forces the browser to paint the height so that
	        // the animation to the new height can have an origin.
	        if (this._tabBodyWrapper.nativeElement.offsetHeight) {
	            this._renderer.setElementStyle(this._tabBodyWrapper.nativeElement, 'height', tabHeight + 'px');
	        }
	    };
	    /** Removes the height of the tab body wrapper. */
	    MdTabGroup.prototype._removeTabBodyWrapperHeight = function () {
	        this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;
	        this._renderer.setElementStyle(this._tabBodyWrapper.nativeElement, 'height', '');
	    };
	    __decorate$57([
	        _angular_core.ContentChildren(MdTab), 
	        __metadata$57('design:type', _angular_core.QueryList)
	    ], MdTabGroup.prototype, "_tabs", void 0);
	    __decorate$57([
	        _angular_core.ViewChild('tabBodyWrapper'), 
	        __metadata$57('design:type', _angular_core.ElementRef)
	    ], MdTabGroup.prototype, "_tabBodyWrapper", void 0);
	    __decorate$57([
	        _angular_core.Input(), 
	        __metadata$57('design:type', Boolean)
	    ], MdTabGroup.prototype, "dynamicHeight", null);
	    __decorate$57([
	        _angular_core.Input('md-dynamic-height'), 
	        __metadata$57('design:type', Boolean)
	    ], MdTabGroup.prototype, "_dynamicHeightDeprecated", null);
	    __decorate$57([
	        _angular_core.Input(), 
	        __metadata$57('design:type', Number), 
	        __metadata$57('design:paramtypes', [Number])
	    ], MdTabGroup.prototype, "selectedIndex", null);
	    __decorate$57([
	        _angular_core.Input(), 
	        __metadata$57('design:type', String)
	    ], MdTabGroup.prototype, "headerPosition", void 0);
	    __decorate$57([
	        _angular_core.Output(), 
	        __metadata$57('design:type', rxjs_Observable.Observable)
	    ], MdTabGroup.prototype, "selectedIndexChange", null);
	    __decorate$57([
	        _angular_core.Output(), 
	        __metadata$57('design:type', rxjs_Observable.Observable)
	    ], MdTabGroup.prototype, "focusChange", null);
	    __decorate$57([
	        _angular_core.Output(), 
	        __metadata$57('design:type', rxjs_Observable.Observable)
	    ], MdTabGroup.prototype, "selectChange", null);
	    MdTabGroup = __decorate$57([
	        _angular_core.Component({selector: 'md-tab-group, mat-tab-group',
	            template: "<md-tab-header [selectedIndex]=\"selectedIndex\" #tabHeader (indexFocused)=\"_focusChanged($event)\" (selectFocusedIndex)=\"selectedIndex = $event\"><div class=\"mat-tab-label\" role=\"tab\" md-tab-label-wrapper md-ripple *ngFor=\"let tab of _tabs; let i = index\" [id]=\"_getTabLabelId(i)\" [tabIndex]=\"selectedIndex == i ? 0 : -1\" [attr.aria-controls]=\"_getTabContentId(i)\" [attr.aria-selected]=\"selectedIndex == i\" [class.mat-tab-label-active]=\"selectedIndex == i\" [disabled]=\"tab.disabled\" (click)=\"tabHeader.focusIndex = selectedIndex = i\"><template [ngIf]=\"tab.templateLabel\"><template [cdkPortalHost]=\"tab.templateLabel\"></template></template><template [ngIf]=\"!tab.templateLabel\">{{tab.textLabel}}</template></div></md-tab-header><div class=\"mat-tab-body-wrapper\" #tabBodyWrapper><md-tab-body role=\"tabpanel\" *ngFor=\"let tab of _tabs; let i = index\" [id]=\"_getTabContentId(i)\" [attr.aria-labelledby]=\"_getTabLabelId(i)\" [class.mat-tab-body-active]=\"selectedIndex == i\" [content]=\"tab.content\" [position]=\"tab.position\" [origin]=\"tab.origin\" (onCentered)=\"_removeTabBodyWrapperHeight()\" (onCentering)=\"_setTabBodyWrapperHeight($event)\"></md-tab-body></div>",
	            styles: [":host{display:flex;flex-direction:column;font-family:Roboto,\"Helvetica Neue\",sans-serif}:host.mat-tab-group-inverted-header{flex-direction:column-reverse}.mat-tab-label{line-height:48px;height:48px;padding:0 12px;font-size:14px;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-weight:500;cursor:pointer;box-sizing:border-box;color:currentColor;opacity:.6;min-width:160px;text-align:center;position:relative}.mat-tab-label:focus{outline:0;opacity:1}@media (max-width:600px){.mat-tab-label{min-width:72px}}:host[mat-stretch-tabs] .mat-tab-label,:host[md-stretch-tabs] .mat-tab-label{flex-basis:0;flex-grow:1}.mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height .5s cubic-bezier(.35,0,.25,1)}.mat-tab-body{position:absolute;top:0;left:0;right:0;bottom:0;display:block;overflow:hidden}.mat-tab-body.mat-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}:host.mat-tab-group-dynamic-height .mat-tab-body.mat-tab-body-active{overflow-y:hidden}.mat-tab-disabled{cursor:default;pointer-events:none}"],
	            host: {
	                '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',
	                '[class.mat-tab-group-inverted-header]': 'headerPosition === "below"',
	            }
	        }), 
	        __metadata$57('design:paramtypes', [_angular_core.Renderer])
	    ], MdTabGroup);
	    return MdTabGroup;
	}());
	var MdTabsModule = (function () {
	    function MdTabsModule() {
	    }
	    /** @deprecated */
	    MdTabsModule.forRoot = function () {
	        return {
	            ngModule: MdTabsModule,
	            providers: []
	        };
	    };
	    MdTabsModule = __decorate$57([
	        _angular_core.NgModule({
	            imports: [_angular_common.CommonModule, PortalModule, MdRippleModule, ObserveContentModule],
	            // Don't export all components because some are only to be used internally.
	            exports: [MdTabGroup, MdTabLabel, MdTab, MdTabNavBar, MdTabLink, MdTabLinkRipple],
	            declarations: [MdTabGroup, MdTabLabel, MdTab, MdInkBar, MdTabLabelWrapper,
	                MdTabNavBar, MdTabLink, MdTabBody, MdTabLinkRipple, MdTabHeader],
	            providers: [VIEWPORT_RULER_PROVIDER, SCROLL_DISPATCHER_PROVIDER],
	        }), 
	        __metadata$57('design:paramtypes', [])
	    ], MdTabsModule);
	    return MdTabsModule;
	}());
	
	var __decorate$65 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$65 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MdToolbarRow = (function () {
	    function MdToolbarRow() {
	    }
	    MdToolbarRow = __decorate$65([
	        _angular_core.Directive({
	            selector: 'md-toolbar-row, mat-toolbar-row',
	            host: {
	                '[class.mat-toolbar-row]': 'true',
	            },
	        }), 
	        __metadata$65('design:paramtypes', [])
	    ], MdToolbarRow);
	    return MdToolbarRow;
	}());
	var MdToolbar = (function () {
	    function MdToolbar(elementRef, renderer) {
	        this.elementRef = elementRef;
	        this.renderer = renderer;
	    }
	    Object.defineProperty(MdToolbar.prototype, "color", {
	        /** The color of the toolbar. Can be primary, accent, or warn. */
	        get: function () {
	            return this._color;
	        },
	        set: function (value) {
	            this._updateColor(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdToolbar.prototype._updateColor = function (newColor) {
	        this._setElementColor(this._color, false);
	        this._setElementColor(newColor, true);
	        this._color = newColor;
	    };
	    MdToolbar.prototype._setElementColor = function (color, isAdd) {
	        if (color != null && color != '') {
	            this.renderer.setElementClass(this.elementRef.nativeElement, "mat-" + color, isAdd);
	        }
	    };
	    __decorate$65([
	        _angular_core.Input(), 
	        __metadata$65('design:type', String)
	    ], MdToolbar.prototype, "color", null);
	    MdToolbar = __decorate$65([
	        _angular_core.Component({selector: 'md-toolbar, mat-toolbar',
	            template: "<div class=\"mat-toolbar-layout\"><md-toolbar-row><ng-content></ng-content></md-toolbar-row><ng-content select=\"md-toolbar-row, mat-toolbar-row\"></ng-content></div>",
	            styles: [".mat-toolbar,.mat-toolbar .mat-toolbar-row{display:flex;box-sizing:border-box;width:100%}.mat-toolbar{font-size:20px;font-weight:500;font-family:Roboto,\"Helvetica Neue\",sans-serif;padding:0 16px;flex-direction:column;min-height:64px}.mat-toolbar .mat-toolbar-row{flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-row{height:64px}@media (max-width:600px) and (orientation:portrait){.mat-toolbar{min-height:56px}.mat-toolbar-row{height:56px}}@media (max-width:960px) and (orientation:landscape){.mat-toolbar{min-height:48px}.mat-toolbar-row{height:48px}}"],
	            host: {
	                '[class.mat-toolbar]': 'true',
	                'role': 'toolbar'
	            },
	            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,
	            encapsulation: _angular_core.ViewEncapsulation.None
	        }), 
	        __metadata$65('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer])
	    ], MdToolbar);
	    return MdToolbar;
	}());
	var MdToolbarModule = (function () {
	    function MdToolbarModule() {
	    }
	    /** @deprecated */
	    MdToolbarModule.forRoot = function () {
	        return {
	            ngModule: MdToolbarModule,
	            providers: []
	        };
	    };
	    MdToolbarModule = __decorate$65([
	        _angular_core.NgModule({
	            imports: [CompatibilityModule],
	            exports: [MdToolbar, MdToolbarRow, CompatibilityModule],
	            declarations: [MdToolbar, MdToolbarRow],
	        }), 
	        __metadata$65('design:paramtypes', [])
	    ], MdToolbarModule);
	    return MdToolbarModule;
	}());
	
	var __extends$20 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * Exception thrown when a tooltip has an invalid position.
	 * @docs-private
	 */
	var MdTooltipInvalidPositionError = (function (_super) {
	    __extends$20(MdTooltipInvalidPositionError, _super);
	    function MdTooltipInvalidPositionError(position) {
	        _super.call(this, "Tooltip position \"" + position + "\" is invalid.");
	    }
	    return MdTooltipInvalidPositionError;
	}(MdError));
	
	var __decorate$66 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$66 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$14 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	/** Time in ms to delay before changing the tooltip visibility to hidden */
	var TOUCHEND_HIDE_DELAY = 1500;
	/** Time in ms to throttle repositioning after scroll events. */
	var SCROLL_THROTTLE_MS = 20;
	/**
	 * Directive that attaches a material design tooltip to the host element. Animates the showing and
	 * hiding of a tooltip provided position (defaults to below the element).
	 *
	 * https://material.google.com/components/tooltips.html
	 */
	var MdTooltip = (function () {
	    function MdTooltip(_overlay, _scrollDispatcher, _elementRef, _viewContainerRef, _ngZone, _dir) {
	        this._overlay = _overlay;
	        this._scrollDispatcher = _scrollDispatcher;
	        this._elementRef = _elementRef;
	        this._viewContainerRef = _viewContainerRef;
	        this._ngZone = _ngZone;
	        this._dir = _dir;
	        this._position = 'below';
	        /** The default delay in ms before showing the tooltip after show is called */
	        this.showDelay = 0;
	        /** The default delay in ms before hiding the tooltip after hide is called */
	        this.hideDelay = 0;
	    }
	    Object.defineProperty(MdTooltip.prototype, "position", {
	        /** Allows the user to define the position of the tooltip relative to the parent element */
	        get: function () { return this._position; },
	        set: function (value) {
	            if (value !== this._position) {
	                this._position = value;
	                // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy
	                // the tooltip.
	                if (this._tooltipInstance) {
	                    this._disposeTooltip();
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTooltip.prototype, "_positionDeprecated", {
	        /** @deprecated */
	        get: function () { return this._position; },
	        set: function (value) { this._position = value; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTooltip.prototype, "message", {
	        /** The message to be displayed in the tooltip */
	        get: function () { return this._message; },
	        set: function (value) {
	            this._message = value;
	            if (this._tooltipInstance) {
	                this._setTooltipMessage(this._message);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTooltip.prototype, "_deprecatedMessage", {
	        /** @deprecated */
	        get: function () { return this.message; },
	        set: function (v) { this.message = v; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTooltip.prototype, "_matMessage", {
	        // Properties with `mat-` prefix for noconflict mode.
	        get: function () { return this.message; },
	        set: function (v) { this.message = v; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTooltip.prototype, "_matPosition", {
	        // Properties with `mat-` prefix for noconflict mode.
	        get: function () { return this.position; },
	        set: function (v) { this.position = v; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTooltip.prototype, "_matHideDelay", {
	        // Properties with `mat-` prefix for noconflict mode.
	        get: function () { return this.hideDelay; },
	        set: function (v) { this.hideDelay = v; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTooltip.prototype, "_matShowDelay", {
	        // Properties with `mat-` prefix for noconflict mode.
	        get: function () { return this.showDelay; },
	        set: function (v) { this.showDelay = v; },
	        enumerable: true,
	        configurable: true
	    });
	    MdTooltip.prototype.ngOnInit = function () {
	        var _this = this;
	        // When a scroll on the page occurs, update the position in case this tooltip needs
	        // to be repositioned.
	        this.scrollSubscription = this._scrollDispatcher.scrolled(SCROLL_THROTTLE_MS).subscribe(function () {
	            if (_this._overlayRef) {
	                _this._overlayRef.updatePosition();
	            }
	        });
	    };
	    /**
	     * Dispose the tooltip when destroyed.
	     */
	    MdTooltip.prototype.ngOnDestroy = function () {
	        if (this._tooltipInstance) {
	            this._disposeTooltip();
	        }
	        this.scrollSubscription.unsubscribe();
	    };
	    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */
	    MdTooltip.prototype.show = function (delay) {
	        if (delay === void 0) { delay = this.showDelay; }
	        if (!this._message || !this._message.trim()) {
	            return;
	        }
	        if (!this._tooltipInstance) {
	            this._createTooltip();
	        }
	        this._setTooltipMessage(this._message);
	        this._tooltipInstance.show(this._position, delay);
	    };
	    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */
	    MdTooltip.prototype.hide = function (delay) {
	        if (delay === void 0) { delay = this.hideDelay; }
	        if (this._tooltipInstance) {
	            this._tooltipInstance.hide(delay);
	        }
	    };
	    /** Shows/hides the tooltip */
	    MdTooltip.prototype.toggle = function () {
	        this._isTooltipVisible() ? this.hide() : this.show();
	    };
	    /** Returns true if the tooltip is currently visible to the user */
	    MdTooltip.prototype._isTooltipVisible = function () {
	        return this._tooltipInstance && this._tooltipInstance.isVisible();
	    };
	    /** Create the tooltip to display */
	    MdTooltip.prototype._createTooltip = function () {
	        var _this = this;
	        this._createOverlay();
	        var portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);
	        this._tooltipInstance = this._overlayRef.attach(portal).instance;
	        // Dispose the overlay when finished the shown tooltip.
	        this._tooltipInstance.afterHidden().subscribe(function () {
	            // Check first if the tooltip has already been removed through this components destroy.
	            if (_this._tooltipInstance) {
	                _this._disposeTooltip();
	            }
	        });
	    };
	    /** Create the overlay config and position strategy */
	    MdTooltip.prototype._createOverlay = function () {
	        var _this = this;
	        var origin = this._getOrigin();
	        var position = this._getOverlayPosition();
	        // Create connected position strategy that listens for scroll events to reposition.
	        // After position changes occur and the overlay is clipped by a parent scrollable then
	        // close the tooltip.
	        var strategy = this._overlay.position().connectedTo(this._elementRef, origin, position);
	        strategy.withScrollableContainers(this._scrollDispatcher.getScrollContainers(this._elementRef));
	        strategy.onPositionChange.subscribe(function (change) {
	            if (change.scrollableViewProperties.isOverlayClipped &&
	                _this._tooltipInstance && _this._tooltipInstance.isVisible()) {
	                _this.hide(0);
	            }
	        });
	        var config = new OverlayState();
	        config.positionStrategy = strategy;
	        this._overlayRef = this._overlay.create(config);
	    };
	    /** Disposes the current tooltip and the overlay it is attached to */
	    MdTooltip.prototype._disposeTooltip = function () {
	        this._overlayRef.dispose();
	        this._overlayRef = null;
	        this._tooltipInstance = null;
	    };
	    /** Returns the origin position based on the user's position preference */
	    MdTooltip.prototype._getOrigin = function () {
	        if (this.position == 'above' || this.position == 'below') {
	            return { originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom' };
	        }
	        var isDirectionLtr = !this._dir || this._dir.value == 'ltr';
	        if (this.position == 'left' ||
	            this.position == 'before' && isDirectionLtr ||
	            this.position == 'after' && !isDirectionLtr) {
	            return { originX: 'start', originY: 'center' };
	        }
	        if (this.position == 'right' ||
	            this.position == 'after' && isDirectionLtr ||
	            this.position == 'before' && !isDirectionLtr) {
	            return { originX: 'end', originY: 'center' };
	        }
	        throw new MdTooltipInvalidPositionError(this.position);
	    };
	    /** Returns the overlay position based on the user's preference */
	    MdTooltip.prototype._getOverlayPosition = function () {
	        if (this.position == 'above') {
	            return { overlayX: 'center', overlayY: 'bottom' };
	        }
	        if (this.position == 'below') {
	            return { overlayX: 'center', overlayY: 'top' };
	        }
	        var isLtr = !this._dir || this._dir.value == 'ltr';
	        if (this.position == 'left' ||
	            this.position == 'before' && isLtr ||
	            this.position == 'after' && !isLtr) {
	            return { overlayX: 'end', overlayY: 'center' };
	        }
	        if (this.position == 'right' ||
	            this.position == 'after' && isLtr ||
	            this.position == 'before' && !isLtr) {
	            return { overlayX: 'start', overlayY: 'center' };
	        }
	        throw new MdTooltipInvalidPositionError(this.position);
	    };
	    /** Updates the tooltip message and repositions the overlay according to the new message length */
	    MdTooltip.prototype._setTooltipMessage = function (message) {
	        var _this = this;
	        // Must wait for the message to be painted to the tooltip so that the overlay can properly
	        // calculate the correct positioning based on the size of the text.
	        this._tooltipInstance.message = message;
	        this._ngZone.onMicrotaskEmpty.first().subscribe(function () {
	            if (_this._tooltipInstance) {
	                _this._overlayRef.updatePosition();
	            }
	        });
	    };
	    __decorate$66([
	        _angular_core.Input('mdTooltipPosition'), 
	        __metadata$66('design:type', String)
	    ], MdTooltip.prototype, "position", null);
	    __decorate$66([
	        _angular_core.Input('tooltip-position'), 
	        __metadata$66('design:type', String)
	    ], MdTooltip.prototype, "_positionDeprecated", null);
	    __decorate$66([
	        _angular_core.Input('mdTooltipShowDelay'), 
	        __metadata$66('design:type', Object)
	    ], MdTooltip.prototype, "showDelay", void 0);
	    __decorate$66([
	        _angular_core.Input('mdTooltipHideDelay'), 
	        __metadata$66('design:type', Object)
	    ], MdTooltip.prototype, "hideDelay", void 0);
	    __decorate$66([
	        _angular_core.Input('mdTooltip'), 
	        __metadata$66('design:type', Object)
	    ], MdTooltip.prototype, "message", null);
	    __decorate$66([
	        _angular_core.Input('md-tooltip'), 
	        __metadata$66('design:type', String)
	    ], MdTooltip.prototype, "_deprecatedMessage", null);
	    __decorate$66([
	        _angular_core.Input('matTooltip'), 
	        __metadata$66('design:type', Object)
	    ], MdTooltip.prototype, "_matMessage", null);
	    __decorate$66([
	        _angular_core.Input('matTooltipPosition'), 
	        __metadata$66('design:type', Object)
	    ], MdTooltip.prototype, "_matPosition", null);
	    __decorate$66([
	        _angular_core.Input('matTooltipHideDelay'), 
	        __metadata$66('design:type', Object)
	    ], MdTooltip.prototype, "_matHideDelay", null);
	    __decorate$66([
	        _angular_core.Input('matTooltipShowDelay'), 
	        __metadata$66('design:type', Object)
	    ], MdTooltip.prototype, "_matShowDelay", null);
	    MdTooltip = __decorate$66([
	        _angular_core.Directive({
	            selector: '[md-tooltip], [mdTooltip], [mat-tooltip], [matTooltip]',
	            host: {
	                '(longpress)': 'show()',
	                '(touchend)': 'hide(' + TOUCHEND_HIDE_DELAY + ')',
	                '(mouseenter)': 'show()',
	                '(mouseleave)': 'hide()',
	            },
	            exportAs: 'mdTooltip',
	        }),
	        __param$14(5, _angular_core.Optional()), 
	        __metadata$66('design:paramtypes', [Overlay, ScrollDispatcher, _angular_core.ElementRef, _angular_core.ViewContainerRef, _angular_core.NgZone, Dir])
	    ], MdTooltip);
	    return MdTooltip;
	}());
	/**
	 * Internal component that wraps the tooltip's content.
	 * @docs-private
	 */
	var TooltipComponent = (function () {
	    function TooltipComponent(_dir, _changeDetectorRef) {
	        this._dir = _dir;
	        this._changeDetectorRef = _changeDetectorRef;
	        /** Property watched by the animation framework to show or hide the tooltip */
	        this._visibility = 'initial';
	        /** Whether interactions on the page should close the tooltip */
	        this._closeOnInteraction = false;
	        /** The transform origin used in the animation for showing and hiding the tooltip */
	        this._transformOrigin = 'bottom';
	        /** Subject for notifying that the tooltip has been hidden from the view */
	        this._onHide = new rxjs_Subject.Subject();
	    }
	    /**
	     * Shows the tooltip with an animation originating from the provided origin
	     * @param position Position of the tooltip.
	     * @param delay Amount of milliseconds to the delay showing the tooltip.
	     */
	    TooltipComponent.prototype.show = function (position, delay) {
	        var _this = this;
	        // Cancel the delayed hide if it is scheduled
	        if (this._hideTimeoutId) {
	            clearTimeout(this._hideTimeoutId);
	        }
	        // Body interactions should cancel the tooltip if there is a delay in showing.
	        this._closeOnInteraction = true;
	        this._setTransformOrigin(position);
	        this._showTimeoutId = setTimeout(function () {
	            _this._visibility = 'visible';
	            // If this was set to true immediately, then a body click that triggers show() would
	            // trigger interaction and close the tooltip right after it was displayed.
	            _this._closeOnInteraction = false;
	            // Mark for check so if any parent component has set the
	            // ChangeDetectionStrategy to OnPush it will be checked anyways
	            _this._changeDetectorRef.markForCheck();
	            setTimeout(function () { _this._closeOnInteraction = true; }, 0);
	        }, delay);
	    };
	    /**
	     * Begins the animation to hide the tooltip after the provided delay in ms.
	     * @param delay Amount of milliseconds to delay showing the tooltip.
	     */
	    TooltipComponent.prototype.hide = function (delay) {
	        var _this = this;
	        // Cancel the delayed show if it is scheduled
	        if (this._showTimeoutId) {
	            clearTimeout(this._showTimeoutId);
	        }
	        this._hideTimeoutId = setTimeout(function () {
	            _this._visibility = 'hidden';
	            _this._closeOnInteraction = false;
	            // Mark for check so if any parent component has set the
	            // ChangeDetectionStrategy to OnPush it will be checked anyways
	            _this._changeDetectorRef.markForCheck();
	        }, delay);
	    };
	    /**
	     * Returns an observable that notifies when the tooltip has been hidden from view
	     */
	    TooltipComponent.prototype.afterHidden = function () {
	        return this._onHide.asObservable();
	    };
	    /**
	     * Whether the tooltip is being displayed
	     */
	    TooltipComponent.prototype.isVisible = function () {
	        return this._visibility === 'visible';
	    };
	    /** Sets the tooltip transform origin according to the tooltip position */
	    TooltipComponent.prototype._setTransformOrigin = function (value) {
	        var isLtr = !this._dir || this._dir.value == 'ltr';
	        switch (value) {
	            case 'before':
	                this._transformOrigin = isLtr ? 'right' : 'left';
	                break;
	            case 'after':
	                this._transformOrigin = isLtr ? 'left' : 'right';
	                break;
	            case 'left':
	                this._transformOrigin = 'right';
	                break;
	            case 'right':
	                this._transformOrigin = 'left';
	                break;
	            case 'above':
	                this._transformOrigin = 'bottom';
	                break;
	            case 'below':
	                this._transformOrigin = 'top';
	                break;
	            default: throw new MdTooltipInvalidPositionError(value);
	        }
	    };
	    TooltipComponent.prototype._afterVisibilityAnimation = function (e) {
	        if (e.toState === 'hidden' && !this.isVisible()) {
	            this._onHide.next();
	        }
	    };
	    /**
	     * Interactions on the HTML body should close the tooltip immediately as defined in the
	     * material design spec.
	     * https://material.google.com/components/tooltips.html#tooltips-interaction
	     */
	    TooltipComponent.prototype._handleBodyInteraction = function () {
	        if (this._closeOnInteraction) {
	            this.hide(0);
	        }
	    };
	    TooltipComponent = __decorate$66([
	        _angular_core.Component({selector: 'md-tooltip-component, mat-tooltip-component',
	            template: "<div class=\"mat-tooltip\" [style.transform-origin]=\"_transformOrigin\" [@state]=\"_visibility\" (@state.done)=\"_afterVisibilityAnimation($event)\">{{message}}</div>",
	            styles: [":host{pointer-events:none}.mat-tooltip{color:#fff;padding:6px 8px;border-radius:2px;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-size:10px;margin:14px;max-width:250px}@media screen and (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}}"],
	            animations: [
	                _angular_core.trigger('state', [
	                    _angular_core.state('void', _angular_core.style({ transform: 'scale(0)' })),
	                    _angular_core.state('initial', _angular_core.style({ transform: 'scale(0)' })),
	                    _angular_core.state('visible', _angular_core.style({ transform: 'scale(1)' })),
	                    _angular_core.state('hidden', _angular_core.style({ transform: 'scale(0)' })),
	                    _angular_core.transition('* => visible', _angular_core.animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),
	                    _angular_core.transition('* => hidden', _angular_core.animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),
	                ])
	            ],
	            host: {
	                '(body:click)': 'this._handleBodyInteraction()'
	            }
	        }),
	        __param$14(0, _angular_core.Optional()), 
	        __metadata$66('design:paramtypes', [Dir, _angular_core.ChangeDetectorRef])
	    ], TooltipComponent);
	    return TooltipComponent;
	}());
	var MdTooltipModule = (function () {
	    function MdTooltipModule() {
	    }
	    /** @deprecated */
	    MdTooltipModule.forRoot = function () {
	        return {
	            ngModule: MdTooltipModule,
	            providers: []
	        };
	    };
	    MdTooltipModule = __decorate$66([
	        _angular_core.NgModule({
	            imports: [OverlayModule, CompatibilityModule],
	            exports: [MdTooltip, TooltipComponent, CompatibilityModule],
	            declarations: [MdTooltip, TooltipComponent],
	            entryComponents: [TooltipComponent],
	        }), 
	        __metadata$66('design:paramtypes', [])
	    ], MdTooltipModule);
	    return MdTooltipModule;
	}());
	
	var __extends$21 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * Exception thrown when menu trigger doesn't have a valid md-menu instance
	 * @docs-private
	 */
	var MdMenuMissingError = (function (_super) {
	    __extends$21(MdMenuMissingError, _super);
	    function MdMenuMissingError() {
	        _super.call(this, "md-menu-trigger: must pass in an md-menu instance.\n\n    Example:\n      <md-menu #menu=\"mdMenu\"></md-menu>\n      <button [mdMenuTriggerFor]=\"menu\"></button>\n    ");
	    }
	    return MdMenuMissingError;
	}(MdError));
	/**
	 * Exception thrown when menu's x-position value isn't valid.
	 * In other words, it doesn't match 'before' or 'after'.
	 * @docs-private
	 */
	var MdMenuInvalidPositionX = (function (_super) {
	    __extends$21(MdMenuInvalidPositionX, _super);
	    function MdMenuInvalidPositionX() {
	        _super.call(this, "x-position value must be either 'before' or after'.\n      Example: <md-menu x-position=\"before\" #menu=\"mdMenu\"></md-menu>\n    ");
	    }
	    return MdMenuInvalidPositionX;
	}(MdError));
	/**
	 * Exception thrown when menu's y-position value isn't valid.
	 * In other words, it doesn't match 'above' or 'below'.
	 * @docs-private
	 */
	var MdMenuInvalidPositionY = (function (_super) {
	    __extends$21(MdMenuInvalidPositionY, _super);
	    function MdMenuInvalidPositionY() {
	        _super.call(this, "y-position value must be either 'above' or below'.\n      Example: <md-menu y-position=\"above\" #menu=\"mdMenu\"></md-menu>\n    ");
	    }
	    return MdMenuInvalidPositionY;
	}(MdError));
	
	var __decorate$69 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$69 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * This directive is intended to be used inside an md-menu tag.
	 * It exists mostly to set the role attribute.
	 */
	var MdMenuItem = (function () {
	    function MdMenuItem(_renderer, _elementRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	    }
	    MdMenuItem.prototype.focus = function () {
	        this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'focus');
	    };
	    Object.defineProperty(MdMenuItem.prototype, "disabled", {
	        // this is necessary to support anchors
	        /** Whether the menu item is disabled. */
	        get: function () { return this._disabled; },
	        set: function (value) {
	            this._disabled = (value === false || value === undefined) ? null : true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdMenuItem.prototype, "isAriaDisabled", {
	        /** Sets the aria-disabled property on the menu item. */
	        get: function () { return String(!!this.disabled); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdMenuItem.prototype, "_tabindex", {
	        get: function () { return this.disabled ? '-1' : '0'; },
	        enumerable: true,
	        configurable: true
	    });
	    MdMenuItem.prototype._getHostElement = function () {
	        return this._elementRef.nativeElement;
	    };
	    MdMenuItem.prototype._checkDisabled = function (event) {
	        if (this.disabled) {
	            event.preventDefault();
	            event.stopPropagation();
	        }
	    };
	    __decorate$69([
	        _angular_core.HostBinding('attr.disabled'),
	        _angular_core.Input(), 
	        __metadata$69('design:type', Boolean)
	    ], MdMenuItem.prototype, "disabled", null);
	    __decorate$69([
	        _angular_core.HostBinding('attr.aria-disabled'), 
	        __metadata$69('design:type', String)
	    ], MdMenuItem.prototype, "isAriaDisabled", null);
	    MdMenuItem = __decorate$69([
	        _angular_core.Component({selector: '[md-menu-item], [mat-menu-item]',
	            host: {
	                'role': 'menuitem',
	                '[class.mat-menu-item]': 'true',
	                '(click)': '_checkDisabled($event)',
	                '[attr.tabindex]': '_tabindex'
	            },
	            template: "<ng-content></ng-content><div class=\"mat-menu-ripple\" *ngIf=\"!disabled\" md-ripple [mdRippleTrigger]=\"_getHostElement()\"></div>",
	            exportAs: 'mdMenuItem'
	        }), 
	        __metadata$69('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef])
	    ], MdMenuItem);
	    return MdMenuItem;
	}());
	
	/**
	 * Below are all the animations for the md-menu component.
	 * Animation duration and timing values are based on AngularJS Material.
	 */
	/**
	 * This animation controls the menu panel's entry and exit from the page.
	 *
	 * When the menu panel is added to the DOM, it scales in and fades in its border.
	 *
	 * When the menu panel is removed from the DOM, it simply fades out after a brief
	 * delay to display the ripple.
	 */
	// TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.
	var transformMenu = _angular_core.trigger('transformMenu', [
	    _angular_core.state('showing', _angular_core.style({
	        opacity: 1,
	        transform: "scale(1)"
	    })),
	    _angular_core.transition('void => *', [
	        _angular_core.style({
	            opacity: 0,
	            transform: "scale(0)"
	        }),
	        _angular_core.animate("200ms cubic-bezier(0.25, 0.8, 0.25, 1)")
	    ]),
	    _angular_core.transition('* => void', [
	        _angular_core.animate('50ms 100ms linear', _angular_core.style({ opacity: 0 }))
	    ])
	]);
	/**
	 * This animation fades in the background color and content of the menu panel
	 * after its containing element is scaled in.
	 */
	var fadeInItems = _angular_core.trigger('fadeInItems', [
	    _angular_core.state('showing', _angular_core.style({ opacity: 1 })),
	    _angular_core.transition('void => *', [
	        _angular_core.style({ opacity: 0 }),
	        _angular_core.animate("200ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)")
	    ])
	]);
	
	// TODO(kara): prevent-close functionality
	var __decorate$68 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$68 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$15 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var MdMenu = (function () {
	    function MdMenu(posX, posY) {
	        /** Config object to be passed into the menu's ngClass */
	        this._classList = {};
	        /** Position of the menu in the X axis. */
	        this.positionX = 'after';
	        /** Position of the menu in the Y axis. */
	        this.positionY = 'below';
	        this.overlapTrigger = true;
	        /** Event emitted when the menu is closed. */
	        this.close = new _angular_core.EventEmitter();
	        if (posX) {
	            this._setPositionX(posX);
	        }
	        if (posY) {
	            this._setPositionY(posY);
	        }
	        this.setPositionClasses(this.positionX, this.positionY);
	    }
	    MdMenu.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        this._keyManager = new FocusKeyManager(this.items).withWrap();
	        this._tabSubscription = this._keyManager.tabOut.subscribe(function () {
	            _this._emitCloseEvent();
	        });
	    };
	    MdMenu.prototype.ngOnDestroy = function () {
	        this._tabSubscription.unsubscribe();
	    };
	    Object.defineProperty(MdMenu.prototype, "classList", {
	        /**
	         * This method takes classes set on the host md-menu element and applies them on the
	         * menu template that displays in the overlay container.  Otherwise, it's difficult
	         * to style the containing menu from outside the component.
	         * @param classes list of class names
	         */
	        set: function (classes) {
	            this._classList = classes.split(' ').reduce(function (obj, className) {
	                obj[className] = true;
	                return obj;
	            }, {});
	            this.setPositionClasses(this.positionX, this.positionY);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Focus the first item in the menu. This method is used by the menu trigger
	     * to focus the first item when the menu is opened by the ENTER key.
	     */
	    MdMenu.prototype.focusFirstItem = function () {
	        this._keyManager.setFirstItemActive();
	    };
	    /**
	     * This emits a close event to which the trigger is subscribed. When emitted, the
	     * trigger will close the menu.
	     */
	    MdMenu.prototype._emitCloseEvent = function () {
	        this.close.emit();
	    };
	    MdMenu.prototype._setPositionX = function (pos) {
	        if (pos !== 'before' && pos !== 'after') {
	            throw new MdMenuInvalidPositionX();
	        }
	        this.positionX = pos;
	    };
	    MdMenu.prototype._setPositionY = function (pos) {
	        if (pos !== 'above' && pos !== 'below') {
	            throw new MdMenuInvalidPositionY();
	        }
	        this.positionY = pos;
	    };
	    /**
	     * It's necessary to set position-based classes to ensure the menu panel animation
	     * folds out from the correct direction.
	     */
	    MdMenu.prototype.setPositionClasses = function (posX, posY) {
	        this._classList['mat-menu-before'] = posX == 'before';
	        this._classList['mat-menu-after'] = posX == 'after';
	        this._classList['mat-menu-above'] = posY == 'above';
	        this._classList['mat-menu-below'] = posY == 'below';
	    };
	    __decorate$68([
	        _angular_core.ViewChild(_angular_core.TemplateRef), 
	        __metadata$68('design:type', _angular_core.TemplateRef)
	    ], MdMenu.prototype, "templateRef", void 0);
	    __decorate$68([
	        _angular_core.ContentChildren(MdMenuItem), 
	        __metadata$68('design:type', _angular_core.QueryList)
	    ], MdMenu.prototype, "items", void 0);
	    __decorate$68([
	        _angular_core.Input(), 
	        __metadata$68('design:type', Object)
	    ], MdMenu.prototype, "overlapTrigger", void 0);
	    __decorate$68([
	        _angular_core.Input('class'), 
	        __metadata$68('design:type', String), 
	        __metadata$68('design:paramtypes', [String])
	    ], MdMenu.prototype, "classList", null);
	    __decorate$68([
	        _angular_core.Output(), 
	        __metadata$68('design:type', Object)
	    ], MdMenu.prototype, "close", void 0);
	    MdMenu = __decorate$68([
	        _angular_core.Component({selector: 'md-menu, mat-menu',
	            host: { 'role': 'menu' },
	            template: "<template><div class=\"mat-menu-panel\" [ngClass]=\"_classList\" (keydown)=\"_keyManager.onKeydown($event)\" (click)=\"_emitCloseEvent()\" [@transformMenu]=\"'showing'\"><div class=\"mat-menu-content\" [@fadeInItems]=\"'showing'\"><ng-content></ng-content></div></div></template>",
	            styles: [".mat-menu-panel{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh + 48px)}.mat-menu-panel.mat-menu-after.mat-menu-below{transform-origin:left top}.mat-menu-panel.mat-menu-after.mat-menu-above{transform-origin:left bottom}.mat-menu-panel.mat-menu-before.mat-menu-below{transform-origin:right top}.mat-menu-panel.mat-menu-before.mat-menu-above{transform-origin:right bottom}[dir=rtl] .mat-menu-panel.mat-menu-after.mat-menu-below{transform-origin:right top}[dir=rtl] .mat-menu-panel.mat-menu-after.mat-menu-above{transform-origin:right bottom}[dir=rtl] .mat-menu-panel.mat-menu-before.mat-menu-below{transform-origin:left top}[dir=rtl] .mat-menu-panel.mat-menu-before.mat-menu-above{transform-origin:left bottom}@media screen and (-ms-high-contrast:active){.mat-menu-panel{outline:solid 1px}}.mat-menu-content{padding-top:8px;padding-bottom:8px}.mat-menu-item{cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:0;border:none;white-space:nowrap;overflow-x:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;font-size:16px;font-family:Roboto,\"Helvetica Neue\",sans-serif;text-align:start;text-decoration:none;position:relative}.mat-menu-item[disabled]{cursor:default}.mat-menu-item .mat-icon{margin-right:16px}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px}button.mat-menu-item{width:100%}.mat-menu-ripple{position:absolute;top:0;left:0;bottom:0;right:0}"],
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            animations: [
	                transformMenu,
	                fadeInItems
	            ],
	            exportAs: 'mdMenu'
	        }),
	        __param$15(0, _angular_core.Attribute('x-position')),
	        __param$15(1, _angular_core.Attribute('y-position')), 
	        __metadata$68('design:paramtypes', [String, String])
	    ], MdMenu);
	    return MdMenu;
	}());
	
	var __decorate$70 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$70 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$16 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	/**
	 * This directive is intended to be used in conjunction with an md-menu tag.  It is
	 * responsible for toggling the display of the provided menu instance.
	 * TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors
	 */
	var MdMenuTrigger = (function () {
	    function MdMenuTrigger(_overlay, _element, _viewContainerRef, _renderer, _dir) {
	        this._overlay = _overlay;
	        this._element = _element;
	        this._viewContainerRef = _viewContainerRef;
	        this._renderer = _renderer;
	        this._dir = _dir;
	        this._menuOpen = false;
	        // tracking input type is necessary so it's possible to only auto-focus
	        // the first item of the list when the menu is opened via the keyboard
	        this._openedByMouse = false;
	        /** Event emitted when the associated menu is opened. */
	        this.onMenuOpen = new _angular_core.EventEmitter();
	        /** Event emitted when the associated menu is closed. */
	        this.onMenuClose = new _angular_core.EventEmitter();
	    }
	    Object.defineProperty(MdMenuTrigger.prototype, "_deprecatedMdMenuTriggerFor", {
	        /** @deprecated */
	        get: function () { return this.menu; },
	        set: function (v) { this.menu = v; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdMenuTrigger.prototype, "_deprecatedMatMenuTriggerFor", {
	        /** @deprecated */
	        get: function () { return this.menu; },
	        set: function (v) { this.menu = v; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdMenuTrigger.prototype, "_matMenuTriggerFor", {
	        // Trigger input for compatibility mode
	        get: function () { return this.menu; },
	        set: function (v) { this.menu = v; },
	        enumerable: true,
	        configurable: true
	    });
	    MdMenuTrigger.prototype.ngAfterViewInit = function () {
	        var _this = this;
	        this._checkMenu();
	        this.menu.close.subscribe(function () { return _this.closeMenu(); });
	    };
	    MdMenuTrigger.prototype.ngOnDestroy = function () { this.destroyMenu(); };
	    Object.defineProperty(MdMenuTrigger.prototype, "menuOpen", {
	        /** Whether the menu is open. */
	        get: function () { return this._menuOpen; },
	        enumerable: true,
	        configurable: true
	    });
	    /** Toggles the menu between the open and closed states. */
	    MdMenuTrigger.prototype.toggleMenu = function () {
	        return this._menuOpen ? this.closeMenu() : this.openMenu();
	    };
	    /** Opens the menu. */
	    MdMenuTrigger.prototype.openMenu = function () {
	        if (!this._menuOpen) {
	            this._createOverlay();
	            this._overlayRef.attach(this._portal);
	            this._subscribeToBackdrop();
	            this._initMenu();
	        }
	    };
	    /** Closes the menu. */
	    MdMenuTrigger.prototype.closeMenu = function () {
	        if (this._overlayRef) {
	            this._overlayRef.detach();
	            this._backdropSubscription.unsubscribe();
	            this._resetMenu();
	        }
	    };
	    /** Removes the menu from the DOM. */
	    MdMenuTrigger.prototype.destroyMenu = function () {
	        if (this._overlayRef) {
	            this._overlayRef.dispose();
	            this._overlayRef = null;
	            this._cleanUpSubscriptions();
	        }
	    };
	    /** Focuses the menu trigger. */
	    MdMenuTrigger.prototype.focus = function () {
	        this._renderer.invokeElementMethod(this._element.nativeElement, 'focus');
	    };
	    Object.defineProperty(MdMenuTrigger.prototype, "dir", {
	        /** The text direction of the containing app. */
	        get: function () {
	            return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * This method ensures that the menu closes when the overlay backdrop is clicked.
	     * We do not use first() here because doing so would not catch clicks from within
	     * the menu, and it would fail to unsubscribe properly. Instead, we unsubscribe
	     * explicitly when the menu is closed or destroyed.
	     */
	    MdMenuTrigger.prototype._subscribeToBackdrop = function () {
	        var _this = this;
	        this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function () {
	            _this.closeMenu();
	        });
	    };
	    /**
	     * This method sets the menu state to open and focuses the first item if
	     * the menu was opened via the keyboard.
	     */
	    MdMenuTrigger.prototype._initMenu = function () {
	        this._setIsMenuOpen(true);
	        // Should only set focus if opened via the keyboard, so keyboard users can
	        // can easily navigate menu items. According to spec, mouse users should not
	        // see the focus style.
	        if (!this._openedByMouse) {
	            this.menu.focusFirstItem();
	        }
	    };
	    
	    /**
	     * This method resets the menu when it's closed, most importantly restoring
	     * focus to the menu trigger if the menu was opened via the keyboard.
	     */
	    MdMenuTrigger.prototype._resetMenu = function () {
	        this._setIsMenuOpen(false);
	        // Focus only needs to be reset to the host element if the menu was opened
	        // by the keyboard and manually shifted to the first menu item.
	        if (!this._openedByMouse) {
	            this.focus();
	        }
	        this._openedByMouse = false;
	    };
	    // set state rather than toggle to support triggers sharing a menu
	    MdMenuTrigger.prototype._setIsMenuOpen = function (isOpen) {
	        this._menuOpen = isOpen;
	        this._menuOpen ? this.onMenuOpen.emit() : this.onMenuClose.emit();
	    };
	    /**
	     *  This method checks that a valid instance of MdMenu has been passed into
	     *  mdMenuTriggerFor. If not, an exception is thrown.
	     */
	    MdMenuTrigger.prototype._checkMenu = function () {
	        if (!this.menu) {
	            throw new MdMenuMissingError();
	        }
	    };
	    /**
	     *  This method creates the overlay from the provided menu's template and saves its
	     *  OverlayRef so that it can be attached to the DOM when openMenu is called.
	     */
	    MdMenuTrigger.prototype._createOverlay = function () {
	        if (!this._overlayRef) {
	            this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);
	            var config = this._getOverlayConfig();
	            this._subscribeToPositions(config.positionStrategy);
	            this._overlayRef = this._overlay.create(config);
	        }
	    };
	    /**
	     * This method builds the configuration object needed to create the overlay, the OverlayState.
	     * @returns OverlayState
	     */
	    MdMenuTrigger.prototype._getOverlayConfig = function () {
	        var overlayState = new OverlayState();
	        overlayState.positionStrategy = this._getPosition()
	            .withDirection(this.dir);
	        overlayState.hasBackdrop = true;
	        overlayState.backdropClass = 'cdk-overlay-transparent-backdrop';
	        overlayState.direction = this.dir;
	        return overlayState;
	    };
	    /**
	     * Listens to changes in the position of the overlay and sets the correct classes
	     * on the menu based on the new position. This ensures the animation origin is always
	     * correct, even if a fallback position is used for the overlay.
	     */
	    MdMenuTrigger.prototype._subscribeToPositions = function (position) {
	        var _this = this;
	        this._positionSubscription = position.onPositionChange.subscribe(function (change) {
	            var posX = change.connectionPair.originX === 'start' ? 'after' : 'before';
	            var posY = change.connectionPair.originY === 'top' ? 'below' : 'above';
	            if (!_this.menu.overlapTrigger) {
	                posY = posY === 'below' ? 'above' : 'below';
	            }
	            _this.menu.setPositionClasses(posX, posY);
	        });
	    };
	    /**
	     * This method builds the position strategy for the overlay, so the menu is properly connected
	     * to the trigger.
	     * @returns ConnectedPositionStrategy
	     */
	    MdMenuTrigger.prototype._getPosition = function () {
	        var _a = this.menu.positionX === 'before' ? ['end', 'start'] : ['start', 'end'], posX = _a[0], fallbackX = _a[1];
	        var _b = this.menu.positionY === 'above' ? ['bottom', 'top'] : ['top', 'bottom'], overlayY = _b[0], fallbackOverlayY = _b[1];
	        var originY = overlayY;
	        var fallbackOriginY = fallbackOverlayY;
	        if (!this.menu.overlapTrigger) {
	            originY = overlayY === 'top' ? 'bottom' : 'top';
	            fallbackOriginY = fallbackOverlayY === 'top' ? 'bottom' : 'top';
	        }
	        return this._overlay.position()
	            .connectedTo(this._element, { originX: posX, originY: originY }, { overlayX: posX, overlayY: overlayY })
	            .withFallbackPosition({ originX: fallbackX, originY: originY }, { overlayX: fallbackX, overlayY: overlayY })
	            .withFallbackPosition({ originX: posX, originY: fallbackOriginY }, { overlayX: posX, overlayY: fallbackOverlayY })
	            .withFallbackPosition({ originX: fallbackX, originY: fallbackOriginY }, { overlayX: fallbackX, overlayY: fallbackOverlayY });
	    };
	    MdMenuTrigger.prototype._cleanUpSubscriptions = function () {
	        if (this._backdropSubscription) {
	            this._backdropSubscription.unsubscribe();
	        }
	        if (this._positionSubscription) {
	            this._positionSubscription.unsubscribe();
	        }
	    };
	    MdMenuTrigger.prototype._handleMousedown = function (event) {
	        if (!isFakeMousedownFromScreenReader(event)) {
	            this._openedByMouse = true;
	        }
	    };
	    __decorate$70([
	        _angular_core.Input('md-menu-trigger-for'), 
	        __metadata$70('design:type', Object)
	    ], MdMenuTrigger.prototype, "_deprecatedMdMenuTriggerFor", null);
	    __decorate$70([
	        _angular_core.Input('mat-menu-trigger-for'), 
	        __metadata$70('design:type', Object)
	    ], MdMenuTrigger.prototype, "_deprecatedMatMenuTriggerFor", null);
	    __decorate$70([
	        _angular_core.Input('matMenuTriggerFor'), 
	        __metadata$70('design:type', Object)
	    ], MdMenuTrigger.prototype, "_matMenuTriggerFor", null);
	    __decorate$70([
	        _angular_core.Input('mdMenuTriggerFor'), 
	        __metadata$70('design:type', Object)
	    ], MdMenuTrigger.prototype, "menu", void 0);
	    __decorate$70([
	        _angular_core.Output(), 
	        __metadata$70('design:type', Object)
	    ], MdMenuTrigger.prototype, "onMenuOpen", void 0);
	    __decorate$70([
	        _angular_core.Output(), 
	        __metadata$70('design:type', Object)
	    ], MdMenuTrigger.prototype, "onMenuClose", void 0);
	    MdMenuTrigger = __decorate$70([
	        _angular_core.Directive({
	            selector: "[md-menu-trigger-for], [mat-menu-trigger-for], \n             [mdMenuTriggerFor], [matMenuTriggerFor]",
	            host: {
	                'aria-haspopup': 'true',
	                '(mousedown)': '_handleMousedown($event)',
	                '(click)': 'toggleMenu()',
	            },
	            exportAs: 'mdMenuTrigger'
	        }),
	        __param$16(4, _angular_core.Optional()), 
	        __metadata$70('design:paramtypes', [Overlay, _angular_core.ElementRef, _angular_core.ViewContainerRef, _angular_core.Renderer, Dir])
	    ], MdMenuTrigger);
	    return MdMenuTrigger;
	}());
	
	var __decorate$67 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$67 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MdMenuModule = (function () {
	    function MdMenuModule() {
	    }
	    /** @deprecated */
	    MdMenuModule.forRoot = function () {
	        return {
	            ngModule: MdMenuModule,
	            providers: [],
	        };
	    };
	    MdMenuModule = __decorate$67([
	        _angular_core.NgModule({
	            imports: [OverlayModule, _angular_common.CommonModule, MdRippleModule, CompatibilityModule],
	            exports: [MdMenu, MdMenuItem, MdMenuTrigger, CompatibilityModule],
	            declarations: [MdMenu, MdMenuItem, MdMenuTrigger],
	        }), 
	        __metadata$67('design:paramtypes', [])
	    ], MdMenuModule);
	    return MdMenuModule;
	}());
	
	// TODO(jelbourn): resizing
	// TODO(jelbourn): afterOpen and beforeClose
	/**
	 * Reference to a dialog opened via the MdDialog service.
	 */
	var MdDialogRef = (function () {
	    function MdDialogRef(_overlayRef, config) {
	        this._overlayRef = _overlayRef;
	        this.config = config;
	        /** Subject for notifying the user that the dialog has finished closing. */
	        this._afterClosed = new rxjs_Subject.Subject();
	    }
	    /**
	     * Close the dialog.
	     * @param dialogResult Optional result to return to the dialog opener.
	     */
	    MdDialogRef.prototype.close = function (dialogResult) {
	        this._overlayRef.dispose();
	        this._afterClosed.next(dialogResult);
	        this._afterClosed.complete();
	    };
	    /**
	     * Gets an observable that is notified when the dialog is finished closing.
	     */
	    MdDialogRef.prototype.afterClosed = function () {
	        return this._afterClosed.asObservable();
	    };
	    return MdDialogRef;
	}());
	
	var MD_DIALOG_DATA = new _angular_core.OpaqueToken('MdDialogData');
	/** Custom injector type specifically for instantiating components with a dialog. */
	var DialogInjector = (function () {
	    function DialogInjector(_parentInjector, _dialogRef, _data) {
	        this._parentInjector = _parentInjector;
	        this._dialogRef = _dialogRef;
	        this._data = _data;
	    }
	    DialogInjector.prototype.get = function (token, notFoundValue) {
	        if (token === MdDialogRef) {
	            return this._dialogRef;
	        }
	        if (token === MD_DIALOG_DATA && this._data) {
	            return this._data;
	        }
	        return this._parentInjector.get(token, notFoundValue);
	    };
	    return DialogInjector;
	}());
	
	/**
	 * Configuration for opening a modal dialog with the MdDialog service.
	 */
	var MdDialogConfig = (function () {
	    function MdDialogConfig() {
	        /** The ARIA role of the dialog element. */
	        this.role = 'dialog';
	        /** Whether the user can use escape or clicking outside to close a modal. */
	        this.disableClose = false;
	        /** Width of the dialog. */
	        this.width = '';
	        /** Height of the dialog. */
	        this.height = '';
	    }
	    return MdDialogConfig;
	}());
	
	var __extends$23 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * Exception thrown when a ComponentPortal is attached to a DomPortalHost without an origin.
	 * @docs-private
	 */
	var MdDialogContentAlreadyAttachedError = (function (_super) {
	    __extends$23(MdDialogContentAlreadyAttachedError, _super);
	    function MdDialogContentAlreadyAttachedError() {
	        _super.call(this, 'Attempting to attach dialog content after content is already attached');
	    }
	    return MdDialogContentAlreadyAttachedError;
	}(MdError));
	
	var __extends$22 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate$73 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$73 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Internal component that wraps user-provided dialog content.
	 * @docs-private
	 */
	var MdDialogContainer = (function (_super) {
	    __extends$22(MdDialogContainer, _super);
	    function MdDialogContainer(_ngZone, _renderer) {
	        _super.call(this);
	        this._ngZone = _ngZone;
	        this._renderer = _renderer;
	        /** Element that was focused before the dialog was opened. Save this to restore upon close. */
	        this._elementFocusedBeforeDialogWasOpened = null;
	    }
	    /**
	     * Attach a ComponentPortal as content to this dialog container.
	     * @param portal Portal to be attached as the dialog content.
	     */
	    MdDialogContainer.prototype.attachComponentPortal = function (portal) {
	        if (this._portalHost.hasAttached()) {
	            throw new MdDialogContentAlreadyAttachedError();
	        }
	        var attachResult = this._portalHost.attachComponentPortal(portal);
	        this._trapFocus();
	        return attachResult;
	    };
	    /**
	     * Attach a TemplatePortal as content to this dialog container.
	     * @param portal Portal to be attached as the dialog content.
	     */
	    MdDialogContainer.prototype.attachTemplatePortal = function (portal) {
	        if (this._portalHost.hasAttached()) {
	            throw new MdDialogContentAlreadyAttachedError();
	        }
	        var attachedResult = this._portalHost.attachTemplatePortal(portal);
	        this._trapFocus();
	        return attachedResult;
	    };
	    /**
	     * Moves the focus inside the focus trap.
	     * @private
	     */
	    MdDialogContainer.prototype._trapFocus = function () {
	        var _this = this;
	        // If were to attempt to focus immediately, then the content of the dialog would not yet be
	        // ready in instances where change detection has to run first. To deal with this, we simply
	        // wait for the microtask queue to be empty.
	        this._ngZone.onMicrotaskEmpty.first().subscribe(function () {
	            _this._elementFocusedBeforeDialogWasOpened = document.activeElement;
	            _this._focusTrap.focusFirstTabbableElement();
	        });
	    };
	    MdDialogContainer.prototype.ngOnDestroy = function () {
	        var _this = this;
	        // When the dialog is destroyed, return focus to the element that originally had it before
	        // the dialog was opened. Wait for the DOM to finish settling before changing the focus so
	        // that it doesn't end up back on the <body>. Also note that we need the extra check, because
	        // IE can set the `activeElement` to null in some cases.
	        if (this._elementFocusedBeforeDialogWasOpened) {
	            this._ngZone.onMicrotaskEmpty.first().subscribe(function () {
	                _this._renderer.invokeElementMethod(_this._elementFocusedBeforeDialogWasOpened, 'focus');
	            });
	        }
	    };
	    __decorate$73([
	        _angular_core.ViewChild(PortalHostDirective), 
	        __metadata$73('design:type', PortalHostDirective)
	    ], MdDialogContainer.prototype, "_portalHost", void 0);
	    __decorate$73([
	        _angular_core.ViewChild(FocusTrap), 
	        __metadata$73('design:type', FocusTrap)
	    ], MdDialogContainer.prototype, "_focusTrap", void 0);
	    MdDialogContainer = __decorate$73([
	        _angular_core.Component({selector: 'md-dialog-container, mat-dialog-container',
	            template: "<cdk-focus-trap><template cdkPortalHost></template></cdk-focus-trap>",
	            styles: [".mat-dialog-container{box-shadow:0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12);display:block;padding:24px;border-radius:2px;box-sizing:border-box;overflow:auto;max-width:80vw;width:100%;height:100%}@media screen and (-ms-high-contrast:active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto}.mat-dialog-title{font-size:20px;font-weight:700;margin:0 0 20px;display:block}.mat-dialog-actions{padding:12px 0;display:flex}.mat-dialog-actions:last-child{margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}"],
	            host: {
	                '[class.mat-dialog-container]': 'true',
	                '[attr.role]': 'dialogConfig?.role',
	            },
	            encapsulation: _angular_core.ViewEncapsulation.None,
	        }), 
	        __metadata$73('design:paramtypes', [_angular_core.NgZone, _angular_core.Renderer])
	    ], MdDialogContainer);
	    return MdDialogContainer;
	}(BasePortalHost));
	
	var __decorate$72 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$72 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$17 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	// TODO(jelbourn): animations
	/**
	 * Service to open Material Design modal dialogs.
	 */
	var MdDialog = (function () {
	    function MdDialog(_overlay, _injector, _parentDialog) {
	        this._overlay = _overlay;
	        this._injector = _injector;
	        this._parentDialog = _parentDialog;
	        this._openDialogsAtThisLevel = [];
	        this._afterAllClosedAtThisLevel = new rxjs_Subject.Subject();
	        this._afterOpenAtThisLevel = new rxjs_Subject.Subject();
	        this._boundKeydown = this._handleKeydown.bind(this);
	        /** Gets an observable that is notified when a dialog has been opened. */
	        this.afterOpen = this._afterOpen.asObservable();
	        /** Gets an observable that is notified when all open dialog have finished closing. */
	        this.afterAllClosed = this._afterAllClosed.asObservable();
	    }
	    Object.defineProperty(MdDialog.prototype, "_openDialogs", {
	        /** Keeps track of the currently-open dialogs. */
	        get: function () {
	            return this._parentDialog ? this._parentDialog._openDialogs : this._openDialogsAtThisLevel;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdDialog.prototype, "_afterOpen", {
	        /** Subject for notifying the user that all open dialogs have finished closing. */
	        get: function () {
	            return this._parentDialog ? this._parentDialog._afterOpen : this._afterOpenAtThisLevel;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdDialog.prototype, "_afterAllClosed", {
	        /** Subject for notifying the user that a dialog has opened. */
	        get: function () {
	            return this._parentDialog ?
	                this._parentDialog._afterAllClosed : this._afterAllClosedAtThisLevel;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Opens a modal dialog containing the given component.
	     * @param componentOrTemplateRef Type of the component to load into the dialog,
	     *     or a TemplateRef to instantiate as the dialog content.
	     * @param config Extra configuration options.
	     * @returns Reference to the newly-opened dialog.
	     */
	    MdDialog.prototype.open = function (componentOrTemplateRef, config) {
	        var _this = this;
	        config = _applyConfigDefaults$1(config);
	        var overlayRef = this._createOverlay(config);
	        var dialogContainer = this._attachDialogContainer(overlayRef, config);
	        var dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);
	        if (!this._openDialogs.length && !this._parentDialog) {
	            document.addEventListener('keydown', this._boundKeydown);
	        }
	        this._openDialogs.push(dialogRef);
	        dialogRef.afterClosed().subscribe(function () { return _this._removeOpenDialog(dialogRef); });
	        this._afterOpen.next(dialogRef);
	        return dialogRef;
	    };
	    /**
	     * Closes all of the currently-open dialogs.
	     */
	    MdDialog.prototype.closeAll = function () {
	        var i = this._openDialogs.length;
	        while (i--) {
	            // The `_openDialogs` property isn't updated after close until the rxjs subscription
	            // runs on the next microtask, in addition to modifying the array as we're going
	            // through it. We loop through all of them and call close without assuming that
	            // they'll be removed from the list instantaneously.
	            this._openDialogs[i].close();
	        }
	    };
	    /**
	     * Creates the overlay into which the dialog will be loaded.
	     * @param dialogConfig The dialog configuration.
	     * @returns A promise resolving to the OverlayRef for the created overlay.
	     */
	    MdDialog.prototype._createOverlay = function (dialogConfig) {
	        var overlayState = this._getOverlayState(dialogConfig);
	        return this._overlay.create(overlayState);
	    };
	    /**
	     * Attaches an MdDialogContainer to a dialog's already-created overlay.
	     * @param overlay Reference to the dialog's underlying overlay.
	     * @param config The dialog configuration.
	     * @returns A promise resolving to a ComponentRef for the attached container.
	     */
	    MdDialog.prototype._attachDialogContainer = function (overlay, config) {
	        var viewContainer = config ? config.viewContainerRef : null;
	        var containerPortal = new ComponentPortal(MdDialogContainer, viewContainer);
	        var containerRef = overlay.attach(containerPortal);
	        containerRef.instance.dialogConfig = config;
	        return containerRef.instance;
	    };
	    /**
	     * Attaches the user-provided component to the already-created MdDialogContainer.
	     * @param componentOrTemplateRef The type of component being loaded into the dialog,
	     *     or a TemplateRef to instantiate as the content.
	     * @param dialogContainer Reference to the wrapping MdDialogContainer.
	     * @param overlayRef Reference to the overlay in which the dialog resides.
	     * @param config The dialog configuration.
	     * @returns A promise resolving to the MdDialogRef that should be returned to the user.
	     */
	    MdDialog.prototype._attachDialogContent = function (componentOrTemplateRef, dialogContainer, overlayRef, config) {
	        // Create a reference to the dialog we're creating in order to give the user a handle
	        // to modify and close it.
	        var dialogRef = new MdDialogRef(overlayRef, config);
	        if (!config.disableClose) {
	            // When the dialog backdrop is clicked, we want to close it.
	            overlayRef.backdropClick().first().subscribe(function () { return dialogRef.close(); });
	        }
	        // Set the dialogRef to the container so that it can use the ref to close the dialog.
	        dialogContainer.dialogRef = dialogRef;
	        // We create an injector specifically for the component we're instantiating so that it can
	        // inject the MdDialogRef. This allows a component loaded inside of a dialog to close itself
	        // and, optionally, to return a value.
	        var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
	        var dialogInjector = new DialogInjector(userInjector || this._injector, dialogRef, config.data);
	        if (componentOrTemplateRef instanceof _angular_core.TemplateRef) {
	            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null));
	        }
	        else {
	            var contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, null, dialogInjector));
	            dialogRef.componentInstance = contentRef.instance;
	        }
	        return dialogRef;
	    };
	    /**
	     * Creates an overlay state from a dialog config.
	     * @param dialogConfig The dialog configuration.
	     * @returns The overlay configuration.
	     */
	    MdDialog.prototype._getOverlayState = function (dialogConfig) {
	        var state$$1 = new OverlayState();
	        var strategy = this._overlay.position().global();
	        var position = dialogConfig.position;
	        state$$1.hasBackdrop = true;
	        state$$1.positionStrategy = strategy;
	        if (position && (position.left || position.right)) {
	            position.left ? strategy.left(position.left) : strategy.right(position.right);
	        }
	        else {
	            strategy.centerHorizontally();
	        }
	        if (position && (position.top || position.bottom)) {
	            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);
	        }
	        else {
	            strategy.centerVertically();
	        }
	        strategy.width(dialogConfig.width).height(dialogConfig.height);
	        return state$$1;
	    };
	    /**
	     * Removes a dialog from the array of open dialogs.
	     * @param dialogRef Dialog to be removed.
	     */
	    MdDialog.prototype._removeOpenDialog = function (dialogRef) {
	        var index = this._openDialogs.indexOf(dialogRef);
	        if (index > -1) {
	            this._openDialogs.splice(index, 1);
	            // no open dialogs are left, call next on afterAllClosed Subject
	            if (!this._openDialogs.length) {
	                this._afterAllClosed.next();
	                document.removeEventListener('keydown', this._boundKeydown);
	            }
	        }
	    };
	    /**
	     * Handles global key presses while there are open dialogs. Closes the
	     * top dialog when the user presses escape.
	     */
	    MdDialog.prototype._handleKeydown = function (event) {
	        var topDialog = this._openDialogs[this._openDialogs.length - 1];
	        if (event.keyCode === ESCAPE && topDialog && !topDialog.config.disableClose) {
	            topDialog.close();
	        }
	    };
	    MdDialog = __decorate$72([
	        _angular_core.Injectable(),
	        __param$17(2, _angular_core.Optional()),
	        __param$17(2, _angular_core.SkipSelf()), 
	        __metadata$72('design:paramtypes', [Overlay, _angular_core.Injector, MdDialog])
	    ], MdDialog);
	    return MdDialog;
	}());
	/**
	 * Applies default options to the dialog config.
	 * @param dialogConfig Config to be modified.
	 * @returns The new configuration object.
	 */
	function _applyConfigDefaults$1(dialogConfig) {
	    return extendObject(new MdDialogConfig(), dialogConfig);
	}
	
	var __decorate$74 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$74 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Button that will close the current dialog.
	 */
	var MdDialogClose = (function () {
	    function MdDialogClose(dialogRef) {
	        this.dialogRef = dialogRef;
	        /** Screenreader label for the button. */
	        this.ariaLabel = 'Close dialog';
	    }
	    __decorate$74([
	        _angular_core.Input('aria-label'), 
	        __metadata$74('design:type', String)
	    ], MdDialogClose.prototype, "ariaLabel", void 0);
	    MdDialogClose = __decorate$74([
	        _angular_core.Directive({
	            selector: 'button[md-dialog-close], button[mat-dialog-close]',
	            host: {
	                '(click)': 'dialogRef.close()',
	                '[attr.aria-label]': 'ariaLabel',
	                'type': 'button',
	            }
	        }), 
	        __metadata$74('design:paramtypes', [MdDialogRef])
	    ], MdDialogClose);
	    return MdDialogClose;
	}());
	/**
	 * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.
	 */
	var MdDialogTitle = (function () {
	    function MdDialogTitle() {
	    }
	    MdDialogTitle = __decorate$74([
	        _angular_core.Directive({
	            selector: '[md-dialog-title], [mat-dialog-title]',
	            host: {
	                '[class.mat-dialog-title]': 'true'
	            }
	        }), 
	        __metadata$74('design:paramtypes', [])
	    ], MdDialogTitle);
	    return MdDialogTitle;
	}());
	/**
	 * Scrollable content container of a dialog.
	 */
	var MdDialogContent = (function () {
	    function MdDialogContent() {
	    }
	    MdDialogContent = __decorate$74([
	        _angular_core.Directive({
	            selector: '[md-dialog-content], md-dialog-content, [mat-dialog-content], mat-dialog-content',
	            host: {
	                '[class.mat-dialog-content]': 'true'
	            }
	        }), 
	        __metadata$74('design:paramtypes', [])
	    ], MdDialogContent);
	    return MdDialogContent;
	}());
	/**
	 * Container for the bottom action buttons in a dialog.
	 * Stays fixed to the bottom when scrolling.
	 */
	var MdDialogActions = (function () {
	    function MdDialogActions() {
	    }
	    MdDialogActions = __decorate$74([
	        _angular_core.Directive({
	            selector: '[md-dialog-actions], md-dialog-actions, [mat-dialog-actions], mat-dialog-actions',
	            host: {
	                '[class.mat-dialog-actions]': 'true'
	            }
	        }), 
	        __metadata$74('design:paramtypes', [])
	    ], MdDialogActions);
	    return MdDialogActions;
	}());
	
	var __decorate$71 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$71 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MdDialogModule = (function () {
	    function MdDialogModule() {
	    }
	    /** @deprecated */
	    MdDialogModule.forRoot = function () {
	        return {
	            ngModule: MdDialogModule,
	            providers: [],
	        };
	    };
	    MdDialogModule = __decorate$71([
	        _angular_core.NgModule({
	            imports: [
	                OverlayModule,
	                PortalModule,
	                A11yModule,
	                CompatibilityModule,
	            ],
	            exports: [
	                MdDialogContainer,
	                MdDialogClose,
	                MdDialogTitle,
	                MdDialogContent,
	                MdDialogActions,
	                CompatibilityModule,
	            ],
	            declarations: [
	                MdDialogContainer,
	                MdDialogClose,
	                MdDialogTitle,
	                MdDialogActions,
	                MdDialogContent,
	            ],
	            providers: [
	                MdDialog,
	            ],
	            entryComponents: [MdDialogContainer],
	        }), 
	        __metadata$71('design:paramtypes', [])
	    ], MdDialogModule);
	    return MdDialogModule;
	}());
	
	var __decorate$76 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$76 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Autocomplete IDs need to be unique across components, so this counter exists outside of
	 * the component definition.
	 */
	var _uniqueAutocompleteIdCounter = 0;
	var MdAutocomplete = (function () {
	    function MdAutocomplete() {
	        /** Whether the autocomplete panel displays above or below its trigger. */
	        this.positionY = 'below';
	        /** Whether the autocomplete panel should be visible, depending on option length. */
	        this.showPanel = false;
	        /** Unique ID to be used by autocomplete trigger's "aria-owns" property. */
	        this.id = "md-autocomplete-" + _uniqueAutocompleteIdCounter++;
	    }
	    /**
	     * Sets the panel scrollTop. This allows us to manually scroll to display
	     * options below the fold, as they are not actually being focused when active.
	     */
	    MdAutocomplete.prototype._setScrollTop = function (scrollTop) {
	        if (this.panel) {
	            this.panel.nativeElement.scrollTop = scrollTop;
	        }
	    };
	    /** Panel should hide itself when the option list is empty. */
	    MdAutocomplete.prototype._setVisibility = function () {
	        var _this = this;
	        Promise.resolve().then(function () { return _this.showPanel = !!_this.options.length; });
	    };
	    /** Sets a class on the panel based on its position (used to set y-offset). */
	    MdAutocomplete.prototype._getClassList = function () {
	        return {
	            'mat-autocomplete-panel-below': this.positionY === 'below',
	            'mat-autocomplete-panel-above': this.positionY === 'above',
	            'mat-autocomplete-visible': this.showPanel,
	            'mat-autocomplete-hidden': !this.showPanel
	        };
	    };
	    __decorate$76([
	        _angular_core.ViewChild(_angular_core.TemplateRef), 
	        __metadata$76('design:type', _angular_core.TemplateRef)
	    ], MdAutocomplete.prototype, "template", void 0);
	    __decorate$76([
	        _angular_core.ViewChild('panel'), 
	        __metadata$76('design:type', _angular_core.ElementRef)
	    ], MdAutocomplete.prototype, "panel", void 0);
	    __decorate$76([
	        _angular_core.ContentChildren(MdOption), 
	        __metadata$76('design:type', _angular_core.QueryList)
	    ], MdAutocomplete.prototype, "options", void 0);
	    __decorate$76([
	        _angular_core.Input(), 
	        __metadata$76('design:type', Function)
	    ], MdAutocomplete.prototype, "displayWith", void 0);
	    MdAutocomplete = __decorate$76([
	        _angular_core.Component({selector: 'md-autocomplete, mat-autocomplete',
	            template: "<template><div class=\"mat-autocomplete-panel\" role=\"listbox\" [id]=\"id\" [ngClass]=\"_getClassList()\" #panel><ng-content></ng-content></div></template>",
	            styles: [".mat-autocomplete-panel{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-height:256px;position:relative}.mat-autocomplete-panel.mat-autocomplete-panel-below{top:6px}.mat-autocomplete-panel.mat-autocomplete-panel-above{top:-24px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}"],
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            exportAs: 'mdAutocomplete',
	            host: {
	                '[class.mat-autocomplete]': 'true'
	            }
	        }), 
	        __metadata$76('design:paramtypes', [])
	    ], MdAutocomplete);
	    return MdAutocomplete;
	}());
	
	var __extends$24 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ActiveDescendantKeyManager = (function (_super) {
	    __extends$24(ActiveDescendantKeyManager, _super);
	    function ActiveDescendantKeyManager(items) {
	        _super.call(this, items);
	    }
	    /**
	     * This method sets the active item to the item at the specified index.
	     * It also adds active styles to the newly active item and removes active
	     * styles from the previously active item.
	     */
	    ActiveDescendantKeyManager.prototype.setActiveItem = function (index) {
	        if (this.activeItem) {
	            this.activeItem.setInactiveStyles();
	        }
	        _super.prototype.setActiveItem.call(this, index);
	        if (this.activeItem) {
	            this.activeItem.setActiveStyles();
	        }
	    };
	    return ActiveDescendantKeyManager;
	}(ListKeyManager));
	
	var __decorate$77 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$77 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$18 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	/**
	 * The following style constants are necessary to save here in order
	 * to properly calculate the scrollTop of the panel. Because we are not
	 * actually focusing the active item, scroll must be handled manually.
	 */
	/** The height of each autocomplete option. */
	var AUTOCOMPLETE_OPTION_HEIGHT = 48;
	/** The total height of the autocomplete panel. */
	var AUTOCOMPLETE_PANEL_HEIGHT = 256;
	/**
	 * Provider that allows the autocomplete to register as a ControlValueAccessor.
	 * @docs-private
	 */
	var MD_AUTOCOMPLETE_VALUE_ACCESSOR = {
	    provide: _angular_forms.NG_VALUE_ACCESSOR,
	    useExisting: _angular_core.forwardRef(function () { return MdAutocompleteTrigger; }),
	    multi: true
	};
	var MdAutocompleteTrigger = (function () {
	    function MdAutocompleteTrigger(_element, _overlay, _viewContainerRef, _dir, _zone, _inputContainer) {
	        this._element = _element;
	        this._overlay = _overlay;
	        this._viewContainerRef = _viewContainerRef;
	        this._dir = _dir;
	        this._zone = _zone;
	        this._inputContainer = _inputContainer;
	        this._panelOpen = false;
	        /** Stream of blur events that should close the panel. */
	        this._blurStream = new rxjs_Subject.Subject();
	        /** View -> model callback called when value changes */
	        this._onChange = function (value) { };
	        /** View -> model callback called when autocomplete has been touched */
	        this._onTouched = function () { };
	    }
	    Object.defineProperty(MdAutocompleteTrigger.prototype, "_matAutocomplete", {
	        /** Property with mat- prefix for no-conflict mode. */
	        get: function () {
	            return this.autocomplete;
	        },
	        set: function (autocomplete) {
	            this.autocomplete = autocomplete;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdAutocompleteTrigger.prototype.ngAfterContentInit = function () {
	        this._keyManager = new ActiveDescendantKeyManager(this.autocomplete.options).withWrap();
	    };
	    MdAutocompleteTrigger.prototype.ngOnDestroy = function () {
	        if (this._panelPositionSubscription) {
	            this._panelPositionSubscription.unsubscribe();
	        }
	        this._destroyPanel();
	    };
	    Object.defineProperty(MdAutocompleteTrigger.prototype, "panelOpen", {
	        /* Whether or not the autocomplete panel is open. */
	        get: function () {
	            return this._panelOpen;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Opens the autocomplete suggestion panel. */
	    MdAutocompleteTrigger.prototype.openPanel = function () {
	        if (!this._overlayRef) {
	            this._createOverlay();
	        }
	        if (!this._overlayRef.hasAttached()) {
	            this._overlayRef.attach(this._portal);
	            this._subscribeToClosingActions();
	        }
	        this._panelOpen = true;
	        this._floatPlaceholder('always');
	    };
	    /** Closes the autocomplete suggestion panel. */
	    MdAutocompleteTrigger.prototype.closePanel = function () {
	        if (this._overlayRef && this._overlayRef.hasAttached()) {
	            this._overlayRef.detach();
	        }
	        this._panelOpen = false;
	        this._floatPlaceholder('auto');
	    };
	    Object.defineProperty(MdAutocompleteTrigger.prototype, "panelClosingActions", {
	        /**
	         * A stream of actions that should close the autocomplete panel, including
	         * when an option is selected, on blur, and when TAB is pressed.
	         */
	        get: function () {
	            return rxjs_Observable.Observable.merge.apply(rxjs_Observable.Observable, this.optionSelections.concat([this._blurStream.asObservable(), this._keyManager.tabOut]));
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdAutocompleteTrigger.prototype, "optionSelections", {
	        /** Stream of autocomplete option selections. */
	        get: function () {
	            return this.autocomplete.options.map(function (option) { return option.onSelect; });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdAutocompleteTrigger.prototype, "activeOption", {
	        /** The currently active option, coerced to MdOption type. */
	        get: function () {
	            return this._keyManager.activeItem;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Sets the autocomplete's value. Part of the ControlValueAccessor interface
	     * required to integrate with Angular's core forms API.
	     *
	     * @param value New value to be written to the model.
	     */
	    MdAutocompleteTrigger.prototype.writeValue = function (value) {
	        var _this = this;
	        Promise.resolve(null).then(function () { return _this._setTriggerValue(value); });
	    };
	    /**
	     * Saves a callback function to be invoked when the autocomplete's value
	     * changes from user input. Part of the ControlValueAccessor interface
	     * required to integrate with Angular's core forms API.
	     *
	     * @param fn Callback to be triggered when the value changes.
	     */
	    MdAutocompleteTrigger.prototype.registerOnChange = function (fn) {
	        this._onChange = fn;
	    };
	    /**
	     * Saves a callback function to be invoked when the autocomplete is blurred
	     * by the user. Part of the ControlValueAccessor interface required
	     * to integrate with Angular's core forms API.
	     *
	     * @param fn Callback to be triggered when the component has been touched.
	     */
	    MdAutocompleteTrigger.prototype.registerOnTouched = function (fn) {
	        this._onTouched = fn;
	    };
	    MdAutocompleteTrigger.prototype._handleKeydown = function (event) {
	        if (this.activeOption && event.keyCode === ENTER) {
	            this.activeOption._selectViaInteraction();
	        }
	        else {
	            this._keyManager.onKeydown(event);
	            if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {
	                this.openPanel();
	                this._scrollToOption();
	            }
	        }
	    };
	    MdAutocompleteTrigger.prototype._handleInput = function (value) {
	        this._onChange(value);
	        this.openPanel();
	    };
	    MdAutocompleteTrigger.prototype._handleBlur = function (newlyFocusedTag) {
	        this._onTouched();
	        // Only emit blur event if the new focus is *not* on an option.
	        if (newlyFocusedTag !== 'MD-OPTION') {
	            this._blurStream.next(null);
	        }
	    };
	    /**
	     * In "auto" mode, the placeholder will animate down as soon as focus is lost.
	     * This causes the value to jump when selecting an option with the mouse.
	     * This method manually floats the placeholder until the panel can be closed.
	     */
	    MdAutocompleteTrigger.prototype._floatPlaceholder = function (state$$1) {
	        if (this._inputContainer) {
	            this._inputContainer.floatPlaceholder = state$$1;
	        }
	    };
	    /**
	     * Given that we are not actually focusing active options, we must manually adjust scroll
	     * to reveal options below the fold. First, we find the offset of the option from the top
	     * of the panel. The new scrollTop will be that offset - the panel height + the option
	     * height, so the active option will be just visible at the bottom of the panel.
	     */
	    MdAutocompleteTrigger.prototype._scrollToOption = function () {
	        var optionOffset = this._keyManager.activeItemIndex * AUTOCOMPLETE_OPTION_HEIGHT;
	        var newScrollTop = Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);
	        this.autocomplete._setScrollTop(newScrollTop);
	    };
	    /**
	     * This method listens to a stream of panel closing actions and resets the
	     * stream every time the option list changes.
	     */
	    MdAutocompleteTrigger.prototype._subscribeToClosingActions = function () {
	        var _this = this;
	        // When the zone is stable initially, and when the option list changes...
	        rxjs_Observable.Observable.merge(this._zone.onStable.first(), this.autocomplete.options.changes)
	            .switchMap(function () {
	            _this._resetPanel();
	            return _this.panelClosingActions;
	        })
	            .first()
	            .subscribe(function (event) { return _this._setValueAndClose(event); });
	    };
	    /** Destroys the autocomplete suggestion panel. */
	    MdAutocompleteTrigger.prototype._destroyPanel = function () {
	        if (this._overlayRef) {
	            this.closePanel();
	            this._overlayRef.dispose();
	            this._overlayRef = null;
	        }
	    };
	    MdAutocompleteTrigger.prototype._setTriggerValue = function (value) {
	        this._element.nativeElement.value =
	            this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;
	    };
	    /**
	    * This method closes the panel, and if a value is specified, also sets the associated
	    * control to that value. It will also mark the control as dirty if this interaction
	    * stemmed from the user.
	    */
	    MdAutocompleteTrigger.prototype._setValueAndClose = function (event) {
	        if (event) {
	            this._setTriggerValue(event.source.value);
	            this._onChange(event.source.value);
	        }
	        this.closePanel();
	    };
	    MdAutocompleteTrigger.prototype._createOverlay = function () {
	        this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);
	        this._overlayRef = this._overlay.create(this._getOverlayConfig());
	    };
	    MdAutocompleteTrigger.prototype._getOverlayConfig = function () {
	        var overlayState = new OverlayState();
	        overlayState.positionStrategy = this._getOverlayPosition();
	        overlayState.width = this._getHostWidth();
	        overlayState.direction = this._dir ? this._dir.value : 'ltr';
	        return overlayState;
	    };
	    MdAutocompleteTrigger.prototype._getOverlayPosition = function () {
	        this._positionStrategy = this._overlay.position().connectedTo(this._element, { originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' })
	            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' });
	        this._subscribeToPositionChanges(this._positionStrategy);
	        return this._positionStrategy;
	    };
	    /**
	     * This method subscribes to position changes in the autocomplete panel, so the panel's
	     * y-offset can be adjusted to match the new position.
	     */
	    MdAutocompleteTrigger.prototype._subscribeToPositionChanges = function (strategy) {
	        var _this = this;
	        this._panelPositionSubscription = strategy.onPositionChange.subscribe(function (change) {
	            _this.autocomplete.positionY = change.connectionPair.originY === 'top' ? 'above' : 'below';
	        });
	    };
	    /** Returns the width of the input element, so the panel width can match it. */
	    MdAutocompleteTrigger.prototype._getHostWidth = function () {
	        return this._element.nativeElement.getBoundingClientRect().width;
	    };
	    /** Reset active item to null so arrow events will activate the correct options.*/
	    MdAutocompleteTrigger.prototype._resetActiveItem = function () {
	        this._keyManager.setActiveItem(null);
	    };
	    /**
	     * Resets the active item and re-calculates alignment of the panel in case its size
	     * has changed due to fewer or greater number of options.
	     */
	    MdAutocompleteTrigger.prototype._resetPanel = function () {
	        this._resetActiveItem();
	        this._positionStrategy.recalculateLastPosition();
	        this.autocomplete._setVisibility();
	    };
	    __decorate$77([
	        _angular_core.Input('mdAutocomplete'), 
	        __metadata$77('design:type', MdAutocomplete)
	    ], MdAutocompleteTrigger.prototype, "autocomplete", void 0);
	    __decorate$77([
	        _angular_core.Input('matAutocomplete'), 
	        __metadata$77('design:type', MdAutocomplete)
	    ], MdAutocompleteTrigger.prototype, "_matAutocomplete", null);
	    MdAutocompleteTrigger = __decorate$77([
	        _angular_core.Directive({
	            selector: 'input[mdAutocomplete], input[matAutocomplete]',
	            host: {
	                'role': 'combobox',
	                'autocomplete': 'off',
	                'aria-autocomplete': 'list',
	                'aria-multiline': 'false',
	                '[attr.aria-activedescendant]': 'activeOption?.id',
	                '[attr.aria-expanded]': 'panelOpen.toString()',
	                '[attr.aria-owns]': 'autocomplete?.id',
	                '(focus)': 'openPanel()',
	                '(blur)': '_handleBlur($event.relatedTarget?.tagName)',
	                '(input)': '_handleInput($event.target.value)',
	                '(keydown)': '_handleKeydown($event)',
	            },
	            providers: [MD_AUTOCOMPLETE_VALUE_ACCESSOR]
	        }),
	        __param$18(3, _angular_core.Optional()),
	        __param$18(5, _angular_core.Optional()),
	        __param$18(5, _angular_core.Host()), 
	        __metadata$77('design:paramtypes', [_angular_core.ElementRef, Overlay, _angular_core.ViewContainerRef, Dir, _angular_core.NgZone, MdInputContainer])
	    ], MdAutocompleteTrigger);
	    return MdAutocompleteTrigger;
	}());
	
	var __decorate$75 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$75 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MdAutocompleteModule = (function () {
	    function MdAutocompleteModule() {
	    }
	    /** @deprecated */
	    MdAutocompleteModule.forRoot = function () {
	        return {
	            ngModule: MdAutocompleteModule,
	            providers: [OVERLAY_PROVIDERS]
	        };
	    };
	    MdAutocompleteModule = __decorate$75([
	        _angular_core.NgModule({
	            imports: [MdOptionModule, OverlayModule, CompatibilityModule, _angular_common.CommonModule],
	            exports: [MdAutocomplete, MdOptionModule, MdAutocompleteTrigger, CompatibilityModule],
	            declarations: [MdAutocomplete, MdAutocompleteTrigger],
	        }), 
	        __metadata$75('design:paramtypes', [])
	    ], MdAutocompleteModule);
	    return MdAutocompleteModule;
	}());
	
	var __decorate$30 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$30 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MATERIAL_MODULES = [
	    MdAutocompleteModule,
	    MdButtonModule,
	    MdButtonToggleModule,
	    MdCardModule,
	    MdChipsModule,
	    MdCheckboxModule,
	    MdDialogModule,
	    MdGridListModule,
	    MdIconModule,
	    MdInputModule,
	    MdListModule,
	    MdMenuModule,
	    MdProgressBarModule,
	    MdProgressSpinnerModule,
	    MdRadioModule,
	    MdRippleModule,
	    MdSelectModule,
	    MdSidenavModule,
	    MdSliderModule,
	    MdSlideToggleModule,
	    MdSnackBarModule,
	    MdTabsModule,
	    MdToolbarModule,
	    MdTooltipModule,
	    OverlayModule,
	    PortalModule,
	    RtlModule,
	    StyleModule,
	    A11yModule,
	    PlatformModule,
	    ProjectionModule,
	    CompatibilityModule,
	    ObserveContentModule
	];
	var MaterialRootModule = (function () {
	    function MaterialRootModule() {
	    }
	    MaterialRootModule = __decorate$30([
	        _angular_core.NgModule({
	            imports: [
	                MdAutocompleteModule.forRoot(),
	                MdButtonModule.forRoot(),
	                MdCardModule.forRoot(),
	                MdChipsModule.forRoot(),
	                MdCheckboxModule.forRoot(),
	                MdGridListModule.forRoot(),
	                MdInputModule.forRoot(),
	                MdListModule.forRoot(),
	                MdProgressBarModule.forRoot(),
	                MdProgressSpinnerModule.forRoot(),
	                MdRippleModule.forRoot(),
	                MdSelectModule.forRoot(),
	                MdSidenavModule.forRoot(),
	                MdTabsModule.forRoot(),
	                MdToolbarModule.forRoot(),
	                PortalModule.forRoot(),
	                ProjectionModule.forRoot(),
	                RtlModule.forRoot(),
	                ObserveContentModule.forRoot(),
	                // These modules include providers.
	                A11yModule.forRoot(),
	                MdButtonToggleModule.forRoot(),
	                MdDialogModule.forRoot(),
	                MdIconModule.forRoot(),
	                MdMenuModule.forRoot(),
	                MdRadioModule.forRoot(),
	                MdSliderModule.forRoot(),
	                MdSlideToggleModule.forRoot(),
	                MdSnackBarModule.forRoot(),
	                MdTooltipModule.forRoot(),
	                PlatformModule.forRoot(),
	                OverlayModule.forRoot(),
	                CompatibilityModule.forRoot(),
	            ],
	            exports: MATERIAL_MODULES,
	        }), 
	        __metadata$30('design:paramtypes', [])
	    ], MaterialRootModule);
	    return MaterialRootModule;
	}());
	var MaterialModule = (function () {
	    function MaterialModule() {
	    }
	    /** @deprecated */
	    MaterialModule.forRoot = function () {
	        return { ngModule: MaterialRootModule };
	    };
	    MaterialModule = __decorate$30([
	        _angular_core.NgModule({
	            imports: MATERIAL_MODULES,
	            exports: MATERIAL_MODULES,
	        }), 
	        __metadata$30('design:paramtypes', [])
	    ], MaterialModule);
	    return MaterialModule;
	}());
	
	exports.MdCoreModule = MdCoreModule;
	exports.Dir = Dir;
	exports.RtlModule = RtlModule;
	exports.ObserveContentModule = ObserveContentModule;
	exports.ObserveContent = ObserveContent;
	exports.MdOptionModule = MdOptionModule;
	exports.MdOption = MdOption;
	exports.Portal = Portal;
	exports.BasePortalHost = BasePortalHost;
	exports.ComponentPortal = ComponentPortal;
	exports.TemplatePortal = TemplatePortal;
	exports.PortalHostDirective = PortalHostDirective;
	exports.TemplatePortalDirective = TemplatePortalDirective;
	exports.PortalModule = PortalModule;
	exports.DomPortalHost = DomPortalHost;
	exports.MdPlatform = Platform;
	exports.Overlay = Overlay;
	exports.OVERLAY_PROVIDERS = OVERLAY_PROVIDERS;
	exports.OverlayContainer = OverlayContainer;
	exports.FullscreenOverlayContainer = FullscreenOverlayContainer;
	exports.OverlayRef = OverlayRef;
	exports.OverlayState = OverlayState;
	exports.ConnectedOverlayDirective = ConnectedOverlayDirective;
	exports.OverlayOrigin = OverlayOrigin;
	exports.OverlayModule = OverlayModule;
	exports.ScrollDispatcher = ScrollDispatcher;
	exports.GestureConfig = GestureConfig;
	exports.MdRipple = MdRipple;
	exports.MdRippleModule = MdRippleModule;
	exports.LiveAnnouncer = LiveAnnouncer;
	exports.LIVE_ANNOUNCER_ELEMENT_TOKEN = LIVE_ANNOUNCER_ELEMENT_TOKEN;
	exports.LIVE_ANNOUNCER_PROVIDER = LIVE_ANNOUNCER_PROVIDER;
	exports.MdLiveAnnouncer = LiveAnnouncer;
	exports.FocusTrap = FocusTrap;
	exports.InteractivityChecker = InteractivityChecker;
	exports.isFakeMousedownFromScreenReader = isFakeMousedownFromScreenReader;
	exports.A11yModule = A11yModule;
	exports.UniqueSelectionDispatcher = UniqueSelectionDispatcher;
	exports.UNIQUE_SELECTION_DISPATCHER_PROVIDER = UNIQUE_SELECTION_DISPATCHER_PROVIDER;
	exports.MdUniqueSelectionDispatcher = UniqueSelectionDispatcher;
	exports.MdLineModule = MdLineModule;
	exports.MdLine = MdLine;
	exports.MdLineSetter = MdLineSetter;
	exports.MdError = MdError;
	exports.coerceBooleanProperty = coerceBooleanProperty;
	exports.coerceNumberProperty = coerceNumberProperty;
	exports.CompatibilityModule = CompatibilityModule;
	exports.NoConflictStyleCompatibilityMode = NoConflictStyleCompatibilityMode;
	exports.DomProjectionHost = DomProjectionHost;
	exports.DomProjection = DomProjection;
	exports.ProjectionModule = ProjectionModule;
	exports.PlatformModule = PlatformModule;
	exports.Platform = Platform;
	exports.getSupportedInputTypes = getSupportedInputTypes;
	exports.ConnectedPositionStrategy = ConnectedPositionStrategy;
	exports.ConnectionPositionPair = ConnectionPositionPair;
	exports.ScrollableViewProperties = ScrollableViewProperties;
	exports.ConnectedOverlayPositionChange = ConnectedOverlayPositionChange;
	exports.SelectionModel = SelectionModel;
	exports.SelectionChange = SelectionChange;
	exports.StyleModule = StyleModule;
	exports.TOUCH_BUFFER_MS = TOUCH_BUFFER_MS;
	exports.FocusOriginMonitor = FocusOriginMonitor;
	exports.CdkFocusClasses = CdkFocusClasses;
	exports.FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY = FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY;
	exports.FOCUS_ORIGIN_MONITOR_PROVIDER = FOCUS_ORIGIN_MONITOR_PROVIDER;
	exports.applyCssTransform = applyCssTransform;
	exports.UP_ARROW = UP_ARROW;
	exports.DOWN_ARROW = DOWN_ARROW;
	exports.RIGHT_ARROW = RIGHT_ARROW;
	exports.LEFT_ARROW = LEFT_ARROW;
	exports.PAGE_UP = PAGE_UP;
	exports.PAGE_DOWN = PAGE_DOWN;
	exports.HOME = HOME;
	exports.END = END;
	exports.ENTER = ENTER;
	exports.SPACE = SPACE;
	exports.TAB = TAB;
	exports.ESCAPE = ESCAPE;
	exports.BACKSPACE = BACKSPACE;
	exports.DELETE = DELETE;
	exports.MATERIAL_COMPATIBILITY_MODE = MATERIAL_COMPATIBILITY_MODE;
	exports.MAT_ELEMENTS_SELECTOR = MAT_ELEMENTS_SELECTOR;
	exports.MD_ELEMENTS_SELECTOR = MD_ELEMENTS_SELECTOR;
	exports.MatPrefixRejector = MatPrefixRejector;
	exports.MdPrefixRejector = MdPrefixRejector;
	exports.AnimationCurves = AnimationCurves;
	exports.AnimationDurations = AnimationDurations;
	exports.MdSelectionModule = MdSelectionModule;
	exports.MdPseudoCheckbox = MdPseudoCheckbox;
	exports.MaterialRootModule = MaterialRootModule;
	exports.MaterialModule = MaterialModule;
	exports.MdAutocompleteModule = MdAutocompleteModule;
	exports.MdAutocomplete = MdAutocomplete;
	exports.AUTOCOMPLETE_OPTION_HEIGHT = AUTOCOMPLETE_OPTION_HEIGHT;
	exports.AUTOCOMPLETE_PANEL_HEIGHT = AUTOCOMPLETE_PANEL_HEIGHT;
	exports.MD_AUTOCOMPLETE_VALUE_ACCESSOR = MD_AUTOCOMPLETE_VALUE_ACCESSOR;
	exports.MdAutocompleteTrigger = MdAutocompleteTrigger;
	exports.MdButtonCssMatStyler = MdButtonCssMatStyler;
	exports.MdRaisedButtonCssMatStyler = MdRaisedButtonCssMatStyler;
	exports.MdIconButtonCssMatStyler = MdIconButtonCssMatStyler;
	exports.MdFabCssMatStyler = MdFabCssMatStyler;
	exports.MdMiniFabCssMatStyler = MdMiniFabCssMatStyler;
	exports.MdButton = MdButton;
	exports.MdAnchor = MdAnchor;
	exports.MdButtonModule = MdButtonModule;
	exports.MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR;
	exports.MdButtonToggleChange = MdButtonToggleChange;
	exports.MdButtonToggleGroup = MdButtonToggleGroup;
	exports.MdButtonToggleGroupMultiple = MdButtonToggleGroupMultiple;
	exports.MdButtonToggle = MdButtonToggle;
	exports.MdButtonToggleModule = MdButtonToggleModule;
	exports.MdCardContent = MdCardContent;
	exports.MdCardTitle = MdCardTitle;
	exports.MdCardSubtitle = MdCardSubtitle;
	exports.MdCardActions = MdCardActions;
	exports.MdCardFooter = MdCardFooter;
	exports.MdCardSmImage = MdCardSmImage;
	exports.MdCardMdImage = MdCardMdImage;
	exports.MdCardLgImage = MdCardLgImage;
	exports.MdCardImage = MdCardImage;
	exports.MdCardXlImage = MdCardXlImage;
	exports.MdCardAvatar = MdCardAvatar;
	exports.MdCard = MdCard;
	exports.MdCardHeader = MdCardHeader;
	exports.MdCardTitleGroup = MdCardTitleGroup;
	exports.MdCardModule = MdCardModule;
	exports.MdChipList = MdChipList;
	exports.MdChipsModule = MdChipsModule;
	exports.MdChip = MdChip;
	exports.MD_CHECKBOX_CONTROL_VALUE_ACCESSOR = MD_CHECKBOX_CONTROL_VALUE_ACCESSOR;
	exports.MdCheckboxChange = MdCheckboxChange;
	exports.MdCheckbox = MdCheckbox;
	exports.MdCheckboxModule = MdCheckboxModule;
	exports.MdDialogModule = MdDialogModule;
	exports.MD_DIALOG_DATA = MD_DIALOG_DATA;
	exports.MdDialog = MdDialog;
	exports.MdDialogContainer = MdDialogContainer;
	exports.MdDialogClose = MdDialogClose;
	exports.MdDialogTitle = MdDialogTitle;
	exports.MdDialogContent = MdDialogContent;
	exports.MdDialogActions = MdDialogActions;
	exports.MdDialogConfig = MdDialogConfig;
	exports.MdDialogRef = MdDialogRef;
	exports.MdGridList = MdGridList;
	exports.MdGridListModule = MdGridListModule;
	exports.MdIconInvalidNameError = MdIconInvalidNameError;
	exports.MdIcon = MdIcon;
	exports.ICON_REGISTRY_PROVIDER_FACTORY = ICON_REGISTRY_PROVIDER_FACTORY;
	exports.ICON_REGISTRY_PROVIDER = ICON_REGISTRY_PROVIDER;
	exports.MdIconModule = MdIconModule;
	exports.MdIconRegistry = MdIconRegistry;
	exports.MdInputModule = MdInputModule;
	exports.MdTextareaAutosize = MdTextareaAutosize;
	exports.MdPlaceholder = MdPlaceholder;
	exports.MdHint = MdHint;
	exports.MdInputDirective = MdInputDirective;
	exports.MdInputContainer = MdInputContainer;
	exports.MdInputContainerPlaceholderConflictError = MdInputContainerPlaceholderConflictError;
	exports.MdInputContainerUnsupportedTypeError = MdInputContainerUnsupportedTypeError;
	exports.MdInputContainerDuplicatedHintError = MdInputContainerDuplicatedHintError;
	exports.MdInputContainerMissingMdInputError = MdInputContainerMissingMdInputError;
	exports.MdListDivider = MdListDivider;
	exports.MdList = MdList;
	exports.MdListCssMatStyler = MdListCssMatStyler;
	exports.MdNavListCssMatStyler = MdNavListCssMatStyler;
	exports.MdDividerCssMatStyler = MdDividerCssMatStyler;
	exports.MdListAvatarCssMatStyler = MdListAvatarCssMatStyler;
	exports.MdListIconCssMatStyler = MdListIconCssMatStyler;
	exports.MdListSubheaderCssMatStyler = MdListSubheaderCssMatStyler;
	exports.MdListItem = MdListItem;
	exports.MdListModule = MdListModule;
	exports.MdMenuTrigger = MdMenuTrigger;
	exports.fadeInItems = fadeInItems;
	exports.transformMenu = transformMenu;
	exports.MdMenu = MdMenu;
	exports.MdMenuItem = MdMenuItem;
	exports.MdMenuModule = MdMenuModule;
	exports.MdProgressBar = MdProgressBar;
	exports.MdProgressBarModule = MdProgressBarModule;
	exports.MdProgressCircle = MdProgressSpinner;
	exports.MdProgressCircleModule = MdProgressSpinnerModule;
	exports.MdProgressSpinnerCssMatStyler = MdProgressSpinnerCssMatStyler;
	exports.MdProgressCircleCssMatStyler = MdProgressCircleCssMatStyler;
	exports.MdProgressSpinner = MdProgressSpinner;
	exports.MdSpinner = MdSpinner;
	exports.MdProgressSpinnerModule = MdProgressSpinnerModule;
	exports.MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR;
	exports.MdRadioChange = MdRadioChange;
	exports.MdRadioGroup = MdRadioGroup;
	exports.MdRadioButton = MdRadioButton;
	exports.MdRadioModule = MdRadioModule;
	exports.MdSelectModule = MdSelectModule;
	exports.fadeInContent = fadeInContent;
	exports.transformPanel = transformPanel;
	exports.transformPlaceholder = transformPlaceholder;
	exports.SELECT_OPTION_HEIGHT = SELECT_OPTION_HEIGHT;
	exports.SELECT_PANEL_MAX_HEIGHT = SELECT_PANEL_MAX_HEIGHT;
	exports.SELECT_MAX_OPTIONS_DISPLAYED = SELECT_MAX_OPTIONS_DISPLAYED;
	exports.SELECT_TRIGGER_HEIGHT = SELECT_TRIGGER_HEIGHT;
	exports.SELECT_OPTION_HEIGHT_ADJUSTMENT = SELECT_OPTION_HEIGHT_ADJUSTMENT;
	exports.SELECT_PANEL_PADDING_X = SELECT_PANEL_PADDING_X;
	exports.SELECT_PANEL_PADDING_Y = SELECT_PANEL_PADDING_Y;
	exports.SELECT_PANEL_VIEWPORT_PADDING = SELECT_PANEL_VIEWPORT_PADDING;
	exports.MdSelectChange = MdSelectChange;
	exports.MdSelect = MdSelect;
	exports.MdDuplicatedSidenavError = MdDuplicatedSidenavError;
	exports.MdSidenavToggleResult = MdSidenavToggleResult;
	exports.MdSidenav = MdSidenav;
	exports.MdSidenavContainer = MdSidenavContainer;
	exports.MdSidenavModule = MdSidenavModule;
	exports.MD_SLIDER_VALUE_ACCESSOR = MD_SLIDER_VALUE_ACCESSOR;
	exports.MdSliderChange = MdSliderChange;
	exports.MdSlider = MdSlider;
	exports.SliderRenderer = SliderRenderer;
	exports.MdSliderModule = MdSliderModule;
	exports.MD_SLIDE_TOGGLE_VALUE_ACCESSOR = MD_SLIDE_TOGGLE_VALUE_ACCESSOR;
	exports.MdSlideToggleChange = MdSlideToggleChange;
	exports.MdSlideToggle = MdSlideToggle;
	exports.MdSlideToggleModule = MdSlideToggleModule;
	exports.MdSnackBarModule = MdSnackBarModule;
	exports.MdSnackBar = MdSnackBar;
	exports.SHOW_ANIMATION = SHOW_ANIMATION;
	exports.HIDE_ANIMATION = HIDE_ANIMATION;
	exports.MdSnackBarContainer = MdSnackBarContainer;
	exports.MdSnackBarConfig = MdSnackBarConfig;
	exports.MdSnackBarRef = MdSnackBarRef;
	exports.SimpleSnackBar = SimpleSnackBar;
	exports.MdInkBar = MdInkBar;
	exports.MdTabBody = MdTabBody;
	exports.MdTabHeader = MdTabHeader;
	exports.MdTabLabelWrapper = MdTabLabelWrapper;
	exports.MdTab = MdTab;
	exports.MdTabLabel = MdTabLabel;
	exports.MdTabChangeEvent = MdTabChangeEvent;
	exports.MdTabGroup = MdTabGroup;
	exports.MdTabsModule = MdTabsModule;
	exports.MdTabNavBar = MdTabNavBar;
	exports.MdTabLink = MdTabLink;
	exports.MdTabLinkRipple = MdTabLinkRipple;
	exports.MdToolbarRow = MdToolbarRow;
	exports.MdToolbar = MdToolbar;
	exports.MdToolbarModule = MdToolbarModule;
	exports.TOUCHEND_HIDE_DELAY = TOUCHEND_HIDE_DELAY;
	exports.SCROLL_THROTTLE_MS = SCROLL_THROTTLE_MS;
	exports.MdTooltip = MdTooltip;
	exports.TooltipComponent = TooltipComponent;
	exports.MdTooltipModule = MdTooltipModule;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	})));


/***/ },

/***/ 81:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(3);
	var router_1 = __webpack_require__(82);
	var login_module_1 = __webpack_require__(622);
	var login1_component_1 = __webpack_require__(96);
	var appRoutes = [
	    { path: 'login', component: login1_component_1.Login1Component },
	    { path: '', component: login1_component_1.Login1Component },
	];
	var AppRoutingModule = (function () {
	    function AppRoutingModule() {
	    }
	    return AppRoutingModule;
	}());
	AppRoutingModule = __decorate([
	    core_1.NgModule({
	        imports: [
	            router_1.RouterModule.forRoot(appRoutes, { useHash: true }),
	            login_module_1.appLoginModule,
	        ],
	        declarations: [],
	        exports: [
	            router_1.RouterModule
	        ],
	    }),
	    __metadata("design:paramtypes", [])
	], AppRoutingModule);
	exports.AppRoutingModule = AppRoutingModule;


/***/ },

/***/ 96:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(3);
	var Login1Component = (function () {
	    function Login1Component() {
	    }
	    return Login1Component;
	}());
	Login1Component = __decorate([
	    core_1.Component({
	        selector: 'login1-form',
	        template: __webpack_require__(97),
	    })
	], Login1Component);
	exports.Login1Component = Login1Component;


/***/ },

/***/ 97:
/***/ function(module, exports) {

	module.exports = "<md-input-container>\n  <input mdInput placeholder=\"Favorite food\" value=\"Sushi\">\n</md-input-container>\n\n";

/***/ },

/***/ 98:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(3);
	var AppComponent = (function () {
	    function AppComponent() {
	    }
	    return AppComponent;
	}());
	AppComponent = __decorate([
	    core_1.Component({
	        selector: 'my-app',
	        template: "<router-outlet></router-outlet>",
	    })
	], AppComponent);
	exports.AppComponent = AppComponent;


/***/ },

/***/ 99:
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },

/***/ 622:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(3);
	var login1_component_1 = __webpack_require__(96);
	var material_1 = __webpack_require__(29);
	var appLoginModule = (function () {
	    function appLoginModule() {
	    }
	    return appLoginModule;
	}());
	appLoginModule = __decorate([
	    core_1.NgModule({
	        imports: [
	            material_1.MaterialModule.forRoot(),
	        ],
	        declarations: [
	            login1_component_1.Login1Component,
	        ],
	        exports: [
	            login1_component_1.Login1Component
	        ],
	    })
	], appLoginModule);
	exports.appLoginModule = appLoginModule;


/***/ }

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,